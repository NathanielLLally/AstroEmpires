[Wed Oct 22 12:25:50 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 12:25:50 2014] [debug] GET "/ae".
[Wed Oct 22 12:25:50 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 12:25:50 2014] [debug] Template "not_found.html.ep" not found.
[Wed Oct 22 12:25:50 2014] [debug] Rendering inline template "3e3201ab0667c1fc7f39089209f0435c".
[Wed Oct 22 12:25:50 2014] [debug] Rendering inline template "b2d451b47e2053ce583cbfdf7bcc6006".
[Wed Oct 22 12:25:50 2014] [debug] 404 Not Found (0.035229s, 28.386/s).
[Wed Oct 22 12:27:33 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 12:27:33 2014] [debug] GET "/ae".
[Wed Oct 22 12:27:33 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 12:27:33 2014] [debug] Rendering template "example/welcome.html.ep".
[Wed Oct 22 12:27:33 2014] [debug] Rendering template "layouts/default.html.ep".
[Wed Oct 22 12:27:33 2014] [debug] 200 OK (0.005731s, 174.490/s).
[Wed Oct 22 12:27:48 2014] [debug] GET "/ae".
[Wed Oct 22 12:27:48 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 12:27:48 2014] [debug] Rendering cached template "example/welcome.html.ep".
[Wed Oct 22 12:27:48 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 12:27:48 2014] [debug] 200 OK (0.001746s, 572.738/s).
[Wed Oct 22 12:34:47 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 12:34:47 2014] [debug] wtf
[Wed Oct 22 12:35:24 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 12:35:24 2014] [debug] wtf
[Wed Oct 22 12:35:24 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 12:35:48 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 12:35:48 2014] [debug] wtf
[Wed Oct 22 12:35:48 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 12:37:28 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 12:37:28 2014] [debug] wtf
[Wed Oct 22 12:37:28 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 12:41:53 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 12:41:53 2014] [debug] wtf
[Wed Oct 22 12:41:53 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 12:41:56 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:41:56 2014] [debug] GET "/ae".
[Wed Oct 22 12:41:56 2014] [error] Can't locate MD5.pm in @INC (you may need to install the MD5 module) (@INC contains: /home/nate/src/git/AstroEmpires/ae_web/script/../lib /etc/perl /usr/local/lib/perl/5.18.2 /usr/local/share/perl/5.18.2 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.18 /usr/share/perl/5.18 /usr/local/lib/site_perl .) at /home/nate/src/git/AstroEmpires/ae_web/script/../lib/AeWeb/Main.pm line 7, <DATA> line 231.
BEGIN failed--compilation aborted at /home/nate/src/git/AstroEmpires/ae_web/script/../lib/AeWeb/Main.pm line 7.
Compilation failed in require at (eval 345) line 1.

[Wed Oct 22 12:41:56 2014] [debug] Template "exception.development.html.ep" not found.
[Wed Oct 22 12:41:56 2014] [debug] Template "exception.html.ep" not found.
[Wed Oct 22 12:41:56 2014] [debug] Rendering inline template "3e3201ab0667c1fc7f39089209f0435c".
[Wed Oct 22 12:41:56 2014] [debug] Rendering inline template "b2d451b47e2053ce583cbfdf7bcc6006".
[Wed Oct 22 12:41:56 2014] [debug] 500 Internal Server Error (0.039870s, 25.082/s).
[Wed Oct 22 12:42:55 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 12:42:55 2014] [debug] wtf
[Wed Oct 22 12:42:55 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 12:42:56 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:42:56 2014] [debug] GET "/ae".
[Wed Oct 22 12:42:56 2014] [debug] Routing to controller "AeWeb::Main" and action "index".
[Wed Oct 22 12:42:56 2014] [debug] Rendering template "main/index.html.ep".
[Wed Oct 22 12:42:56 2014] [debug] Rendering template "layouts/default.html.ep".
[Wed Oct 22 12:42:56 2014] [debug] Rendering template "common_styles.html.ep".
[Wed Oct 22 12:42:56 2014] [debug] Rendering template "header.html.ep".
[Wed Oct 22 12:42:56 2014] [debug] Rendering template "common_js.html.ep".
[Wed Oct 22 12:42:56 2014] [debug] 200 OK (0.133375s, 7.498/s).
[Wed Oct 22 12:49:43 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:49:43 2014] [debug] GET "/ae".
[Wed Oct 22 12:49:43 2014] [debug] Routing to controller "AeWeb::Main" and action "index".
[Wed Oct 22 12:49:43 2014] [debug] Rendering cached template "main/index.html.ep".
[Wed Oct 22 12:49:43 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 12:49:43 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 12:49:43 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 12:49:43 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 12:49:43 2014] [debug] 200 OK (0.011276s, 88.684/s).
[Wed Oct 22 12:51:06 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:51:06 2014] [debug] GET "/ae".
[Wed Oct 22 12:51:06 2014] [debug] Routing to controller "AeWeb::Main" and action "index".
[Wed Oct 22 12:51:06 2014] [debug] Rendering cached template "main/index.html.ep".
[Wed Oct 22 12:51:06 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 12:51:06 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 12:51:06 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 12:51:06 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 12:51:06 2014] [debug] 200 OK (0.006155s, 162.470/s).
[Wed Oct 22 12:51:13 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 12:51:13 2014] [debug] wtf
[Wed Oct 22 12:51:13 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 12:51:14 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:51:14 2014] [debug] GET "/ae".
[Wed Oct 22 12:51:14 2014] [debug] Routing to controller "AeWeb::Main" and action "index".
[Wed Oct 22 12:51:14 2014] [debug] Rendering template "main/index.html.ep".
[Wed Oct 22 12:51:14 2014] [debug] Rendering template "layouts/default.html.ep".
[Wed Oct 22 12:51:14 2014] [debug] Rendering template "common_styles.html.ep".
[Wed Oct 22 12:51:14 2014] [debug] Rendering template "header.html.ep".
[Wed Oct 22 12:51:14 2014] [debug] Rendering template "common_js.html.ep".
[Wed Oct 22 12:51:14 2014] [debug] 200 OK (0.123141s, 8.121/s).
[Wed Oct 22 12:51:37 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:51:37 2014] [debug] GET "/ae".
[Wed Oct 22 12:51:37 2014] [debug] Routing to controller "AeWeb::Main" and action "index".
[Wed Oct 22 12:51:37 2014] [debug] Rendering cached template "main/index.html.ep".
[Wed Oct 22 12:51:37 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 12:51:37 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 12:51:37 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 12:51:37 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 12:51:37 2014] [debug] 200 OK (0.008043s, 124.332/s).
[Wed Oct 22 12:52:12 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:52:12 2014] [debug] GET "/ae/".
[Wed Oct 22 12:52:12 2014] [debug] Routing to controller "AeWeb::Main" and action "index".
[Wed Oct 22 12:52:12 2014] [debug] Rendering cached template "main/index.html.ep".
[Wed Oct 22 12:52:12 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 12:52:12 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 12:52:12 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 12:52:12 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 12:52:12 2014] [debug] 200 OK (0.006474s, 154.464/s).
[Wed Oct 22 12:52:12 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:52:12 2014] [debug] GET "/ae/".
[Wed Oct 22 12:52:12 2014] [debug] Routing to controller "AeWeb::Main" and action "index".
[Wed Oct 22 12:52:12 2014] [debug] Rendering cached template "main/index.html.ep".
[Wed Oct 22 12:52:12 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 12:52:12 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 12:52:12 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 12:52:12 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 12:52:12 2014] [debug] 200 OK (0.006495s, 153.965/s).
[Wed Oct 22 12:52:37 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:52:37 2014] [debug] GET "/ae/".
[Wed Oct 22 12:52:37 2014] [debug] Routing to controller "AeWeb::Main" and action "index".
[Wed Oct 22 12:52:37 2014] [debug] Rendering cached template "main/index.html.ep".
[Wed Oct 22 12:52:37 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 12:52:37 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 12:52:37 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 12:52:37 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 12:52:37 2014] [debug] 200 OK (0.006080s, 164.474/s).
[Wed Oct 22 12:54:57 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:54:57 2014] [debug] GET "/ae/".
[Wed Oct 22 12:54:57 2014] [debug] Routing to controller "AeWeb::Main" and action "index".
[Wed Oct 22 12:54:57 2014] [debug] Rendering cached template "main/index.html.ep".
[Wed Oct 22 12:54:57 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 12:54:57 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 12:54:57 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 12:54:57 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 12:54:57 2014] [debug] 200 OK (0.005962s, 167.729/s).
[Wed Oct 22 12:54:59 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:54:59 2014] [debug] GET "/ae/login".
[Wed Oct 22 12:54:59 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 12:54:59 2014] [debug] Rendering template "not_found.html.ep".
[Wed Oct 22 12:54:59 2014] [debug] Rendering template "layouts/none.html.ep".
[Wed Oct 22 12:54:59 2014] [debug] 404 Not Found (0.008316s, 120.250/s).
[Wed Oct 22 12:55:14 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:55:14 2014] [debug] GET "/ae/".
[Wed Oct 22 12:55:14 2014] [debug] Routing to controller "AeWeb::Main" and action "index".
[Wed Oct 22 12:55:14 2014] [debug] Rendering cached template "main/index.html.ep".
[Wed Oct 22 12:55:14 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 12:55:14 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 12:55:14 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 12:55:14 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 12:55:14 2014] [debug] 200 OK (0.006339s, 157.754/s).
[Wed Oct 22 12:55:17 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:55:17 2014] [debug] GET "/ae/login".
[Wed Oct 22 12:55:17 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 12:55:17 2014] [debug] Rendering cached template "not_found.html.ep".
[Wed Oct 22 12:55:17 2014] [debug] Rendering cached template "layouts/none.html.ep".
[Wed Oct 22 12:55:17 2014] [debug] 404 Not Found (0.001511s, 661.813/s).
[Wed Oct 22 12:56:30 2014] [debug] $VAR1 = [];

[Wed Oct 22 12:56:30 2014] [debug] GET "/ae/".
[Wed Oct 22 12:56:30 2014] [debug] Routing to controller "AeWeb::Main" and action "index".
[Wed Oct 22 12:56:30 2014] [debug] Rendering cached template "main/index.html.ep".
[Wed Oct 22 12:56:30 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 12:56:30 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 12:56:30 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 12:56:30 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 12:56:30 2014] [debug] 200 OK (0.006063s, 164.935/s).
[Wed Oct 22 13:01:45 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:01:45 2014] [debug] wtf
[Wed Oct 22 13:01:45 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:02:17 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:02:17 2014] [debug] POST "/ae/gia".
[Wed Oct 22 13:02:17 2014] [debug] Routing to controller "AeWeb::Main" and action "dumpPostData".
[Wed Oct 22 13:02:17 2014] [debug] $VAR1 = bless( {
                 'content' => bless( {
                                       'read' => sub { "DUMMY" },
                                       'raw_size' => 3591,
                                       'state' => 'finished',
                                       'buffer' => '',
                                       'size' => 3591,
                                       'events' => {
                                                     'read' => [
                                                                 $VAR1->{'content'}{'read'}
                                                               ]
                                                   },
                                       'headers' => bless( {
                                                             'normalcase' => {
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST'
                                                                             },
                                                             'headers' => {
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ],
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'content-length' => [
                                                                                                  '3591'
                                                                                                ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ]
                                                                          }
                                                           }, 'Mojo::Headers' ),
                                       'body' => 2,
                                       'asset' => bless( {
                                                           'max_memory_size' => 262144,
                                                           'auto_upgrade' => 1,
                                                           'content' => 'package uiobjFactory;use DBI;use Moose;use Test::More;use Compress::Zlib qw/compress uncompress/;use Storable qw/nstore freeze thaw dclone retrieve/;use Data::Dumper;use Try::Tiny;$Storable::canonical = 1;#BEGIN: {  DBI->trace(3); };has \'dsn\' => (isa => \'Str\', is => \'rw\', default => \'DBI:ODBC:DRIVER={Easysoft ODBC-SQL Server};SERVER=SQLDEV;dbname=treppwebdb_3\');#has \'dsn\' => (isa => \'Str\', is => \'rw\', default => \'DBI:ODBC:DRIVER={Easysoft ODBC-SQL Server};SERVER=10.0.1.105;dbname=treppwebdb_3\');has \'dbh\' => (isa => \'DBI::db\', is => \'rw\', lazy => 1, default => sub {  my $dbh = DBI->connect_cached($_[0]->dsn(), "treppweb_3user", "treppweb_3user");  $dbh->{LongTruncOk} = 0;  $dbh->{LongReadLen} = 99999999;  $dbh;});has \'resultSet\' => (  traits => [\'Array\'],  isa => \'ArrayRef[Any]\',  is => \'rw\',  lazy => 1,  handles => {    \'getSQL\' => \'get\',    \'elSQL\' => \'elements\',    \'mapSQL\' => \'map\',    \'countSQL\' => \'count\',  },  builder => \'getUIObjects\');sub getUIObjects{  my ($s) = @_;  my @out;#  my $stoFile = "/home/nate/src/cmbsweb_to_mongo/uiobj.sto";    my @fieldNames = qw/owner fromUser namespace id description modifiedDt obj/;  my $sqlFields = join(\', \', @fieldNames);#  my $sth = $s->dbh->prepare(#  "SELECT $sqlFields FROM (#    SELECT $sqlFields, ROW_NUMBER() OVER (ORDER BY UIObjectID asc) as row from UIObject#  ) a WHERE row > 830 and row < 852"#);  my $sth = $s->dbh->prepare("SELECT $sqlFields from UIObject order by UIObjectID asc");  $sth->execute();  my $rs = $sth->fetchall_arrayref();  $sth->finish();  foreach my $rsEl (@$rs) {    my %h;    for my $i (0..($#fieldNames+1)) {      if (defined $rsEl->[$i]) {        if ($fieldNames[$i] eq \'obj\') {          $h{$fieldNames[$i]} = $s->memoizeObj($rsEl->[$i]);        } else {          $h{$fieldNames[$i]} = $rsEl->[$i];        }      }    }    Trepp::OverrideTemplate::clean(\\%h);    push @out, \\%h;  }  \\@out;}sub xlateKeys{  my ($s, $blah) = @_;#  if ($key =~ m/\\./ || $key eq \'\' || $key =~ m/^\\$/) {}sub memoizeObj{  my ($s, $data) = @_;  my $compress_sig = "compressed:";  if ($compress_sig eq substr($data, 0, length($compress_sig))) {    substr($data, 0, length($compress_sig), \'\');    $data = uncompress($data);  }  my $ref = Storable::thaw($data);  $ref;}package main;use Storable qw/dclone nstore retrieve/;use Digest::MD5 qw/md5_hex/;use Data::Dumper;use Test::More qw/no_plan/;use lib \'.\';use Trepp::OverrideTemplate;use RTP;use IO::Socket::INET;use Try::Tiny;my $f = new uiobjFactory();#memoize / builder$f->getSQL(0);my $ip = "127.0.0.1";sub newSock {  print "opening socket to $ip\\n";  my $port = 31337;  my $cli = IO::Socket::INET->new(    PeerAddr => $ip || \'127.0.0.1\',    PeerPort => $port,     Proto => \'tcp\'      );  $cli;}my $rtp = RTP->new(sock => newSock());=head2 openSend($rtp, $data)  opens a socket, sends data  meant to be atomic via recursion until success    client end is also meant to restart upon failure=cutsub Send($$){  my ($Prtp, $Pdata)  = @_;  my ($state);  try {    $state = $Prtp->sendData($Pdata);  } catch {    warn "sendData failed: $_, trying again";    $Prtp->close();    $Prtp->sock(newSock());    Send($Prtp, $Pdata);  };}foreach my $obj ($f->elSQL()) {  my ($data, $size, $sent);  $data = Storable::freeze($obj);#    print "sending ".length($data)." bytes\\n";  Send($rtp, $data);}$rtp->close();#my $cref = dclone($f->resultSet());#ok(1, Dumper(\\$cref));#nstore(\\$cref, "UIObject.sto");#my ($newcref, $refOfRef);#$refOfRef = retrieve("UIObject.sto");#$newcref = ${ $refOfRef };#ok(1, Dumper(\\$newcref));#unlink "test.sto";#print Dumper(\\$cref);#print Dumper(\\$newcref);'
                                                         }, 'Mojo::Asset::Memory' ),
                                       'real_size' => 3591,
                                       'pre_buffer' => '',
                                       'auto_upgrade' => 1
                                     }, 'Mojo::Content::Single' ),
                 'raw_size' => 0,
                 'version' => '1.0',
                 'env' => {
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'SCRIPT_NAME' => '',
                            'PATH_INFO' => '/ae/gia',
                            'REMOTE_ADDR' => '127.0.0.1',
                            'psgi.input' => bless( \*{'Stream::Buffered::PerlIO::$io'}, 'FileHandle' ),
                            'QUERY_STRING' => '',
                            'psgi.multiprocess' => '',
                            'psgi.multithread' => '',
                            'psgi.errors' => *::STDERR,
                            'psgix.harakiri' => 1,
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'psgix.input.buffered' => 1,
                            'psgi.url_scheme' => 'http',
                            'HTTP_CONNECTION' => 'close',
                            'HTTP_HOST' => 'localhost',
                            'psgi.run_once' => '',
                            'SERVER_PORT' => 5000,
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'HTTP_ACCEPT' => '*/*',
                            'psgi.streaming' => 1,
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'REMOTE_PORT' => 54434,
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'CONTENT_LENGTH' => '3591',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'psgix.io' => bless( \*Symbol::GEN1, 'IO::Socket::INET' ),
                            'REQUEST_METHOD' => 'POST',
                            'SERVER_NAME' => 0,
                            'psgi.nonblocking' => '',
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'REQUEST_URI' => '/ae/gia'
                          },
                 'method' => 'POST',
                 'max_message_size' => 10485760,
                 'state' => 'finished',
                 'buffer' => '',
                 'url' => bless( {
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia'
                                                    }, 'Mojo::Path' ),
                                   'base' => bless( {
                                                      'path' => bless( {
                                                                         'charset' => 'UTF-8',
                                                                         'trailing_slash' => '',
                                                                         'parts' => [],
                                                                         'leading_slash' => ''
                                                                       }, 'Mojo::Path' ),
                                                      'host' => 'localhost',
                                                      'port' => '',
                                                      'scheme' => 'HTTP'
                                                    }, 'Mojo::URL' )
                                 }, 'Mojo::URL' ),
                 'events' => {},
                 'finished' => 1
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:02:17 2014] [debug] Template "main/dumpPostData.html.ep" not found.
[Wed Oct 22 13:02:17 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:02:17 2014] [debug] Rendering template "not_found.html.ep".
[Wed Oct 22 13:02:17 2014] [debug] Rendering template "layouts/none.html.ep".
[Wed Oct 22 13:02:17 2014] [debug] 404 Not Found (0.110010s, 9.090/s).
[Wed Oct 22 13:04:50 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:04:50 2014] [debug] GET "/ae/gia".
[Wed Oct 22 13:04:50 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:04:50 2014] [debug] Rendering template "not_found.html.ep".
[Wed Oct 22 13:04:50 2014] [debug] Rendering template "layouts/none.html.ep".
[Wed Oct 22 13:04:50 2014] [debug] 404 Not Found (0.005774s, 173.190/s).
[Wed Oct 22 13:04:54 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:04:54 2014] [debug] GET "/ae/gia/".
[Wed Oct 22 13:04:54 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:04:54 2014] [debug] Rendering cached template "not_found.html.ep".
[Wed Oct 22 13:04:54 2014] [debug] Rendering cached template "layouts/none.html.ep".
[Wed Oct 22 13:04:54 2014] [debug] 404 Not Found (0.001748s, 572.082/s).
[Wed Oct 22 13:05:10 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:05:10 2014] [debug] wtf
[Wed Oct 22 13:05:10 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:05:11 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:05:11 2014] [debug] GET "/ae/gia/".
[Wed Oct 22 13:05:11 2014] [debug] Routing to controller "AeWeb::Main" and action "dumpPostData".
[Wed Oct 22 13:05:11 2014] [debug] $VAR1 = bless( {
                 'state' => 'finished',
                 'buffer' => '',
                 'finished' => 1,
                 'env' => {
                            'psgi.multithread' => '',
                            'psgi.errors' => *::STDERR,
                            'HTTP_CACHE_CONTROL' => 'max-age=0',
                            'REQUEST_METHOD' => 'GET',
                            'psgi.multiprocess' => '',
                            'psgix.harakiri' => 1,
                            'HTTP_HOST' => 'cirrus.airitechsecurity.com',
                            'SERVER_NAME' => 0,
                            'psgi.url_scheme' => 'http',
                            'HTTP_CONNECTION' => 'close',
                            'psgix.io' => bless( \*Symbol::GEN1, 'IO::Socket::INET' ),
                            'psgi.streaming' => 1,
                            'SERVER_PORT' => 5000,
                            'HTTP_ACCEPT_ENCODING' => 'gzip,deflate,lzma,sdch',
                            'REMOTE_ADDR' => '127.0.0.1',
                            'psgi.run_once' => '',
                            'HTTP_X_FORWARDED_HOST' => 'cirrus.airitechsecurity.com',
                            'SCRIPT_NAME' => '',
                            'HTTP_X_REAL_IP' => '12.189.207.114',
                            'HTTP_X_FORWARDED_FOR' => '12.189.207.114',
                            'QUERY_STRING' => '',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'HTTP_ACCEPT' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                            'REMOTE_PORT' => 54437,
                            'psgi.nonblocking' => '',
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'HTTP_USER_AGENT' => 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.101 Safari/537.36 OPR/25.0.1614.50',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'REQUEST_URI' => '/ae/gia/',
                            'HTTP_ACCEPT_LANGUAGE' => 'en-US,en;q=0.8',
                            'psgi.input' => \*{'HTTP::Server::PSGI::$input'},
                            'psgix.input.buffered' => 1,
                            'PATH_INFO' => '/ae/gia/'
                          },
                 'content' => bless( {
                                       'real_size' => 0,
                                       'body' => 1,
                                       'size' => 0,
                                       'events' => {
                                                     'read' => [
                                                                 sub { "DUMMY" }
                                                               ]
                                                   },
                                       'raw_size' => 0,
                                       'auto_upgrade' => 1,
                                       'headers' => bless( {
                                                             'headers' => {
                                                                            'host' => [
                                                                                        'cirrus.airitechsecurity.com'
                                                                                      ],
                                                                            'user-agent' => [
                                                                                              'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.101 Safari/537.36 OPR/25.0.1614.50'
                                                                                            ],
                                                                            'accept' => [
                                                                                          'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
                                                                                        ],
                                                                            'accept-encoding' => [
                                                                                                   'gzip,deflate,lzma,sdch'
                                                                                                 ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'accept-language' => [
                                                                                                   'en-US,en;q=0.8'
                                                                                                 ],
                                                                            'x-real-ip' => [
                                                                                             '12.189.207.114'
                                                                                           ],
                                                                            'x-forwarded-for' => [
                                                                                                   '12.189.207.114'
                                                                                                 ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'x-forwarded-host' => [
                                                                                                    'cirrus.airitechsecurity.com'
                                                                                                  ],
                                                                            'cache-control' => [
                                                                                                 'max-age=0'
                                                                                               ]
                                                                          },
                                                             'normalcase' => {
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR'
                                                                             }
                                                           }, 'Mojo::Headers' ),
                                       'read' => $VAR1->{'content'}{'events'}{'read'}[0],
                                       'pre_buffer' => '',
                                       'state' => 'finished',
                                       'buffer' => ''
                                     }, 'Mojo::Content::Single' ),
                 'events' => {},
                 'max_message_size' => 10485760,
                 'raw_size' => 0,
                 'url' => bless( {
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia/'
                                                    }, 'Mojo::Path' ),
                                   'base' => bless( {
                                                      'port' => '',
                                                      'path' => bless( {
                                                                         'parts' => [],
                                                                         'charset' => 'UTF-8',
                                                                         'leading_slash' => '',
                                                                         'trailing_slash' => ''
                                                                       }, 'Mojo::Path' ),
                                                      'scheme' => 'HTTP',
                                                      'host' => 'cirrus.airitechsecurity.com'
                                                    }, 'Mojo::URL' )
                                 }, 'Mojo::URL' ),
                 'method' => 'GET',
                 'version' => '1.0'
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:05:11 2014] [debug] Template "main/dumpPostData.html.ep" not found.
[Wed Oct 22 13:05:11 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:05:11 2014] [debug] Rendering template "not_found.html.ep".
[Wed Oct 22 13:05:11 2014] [debug] Rendering template "layouts/none.html.ep".
[Wed Oct 22 13:05:11 2014] [debug] 404 Not Found (0.114201s, 8.756/s).
[Wed Oct 22 13:05:17 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:05:17 2014] [debug] GET "/ae/gia/".
[Wed Oct 22 13:05:17 2014] [debug] Routing to controller "AeWeb::Main" and action "dumpPostData".
[Wed Oct 22 13:05:17 2014] [debug] $VAR1 = bless( {
                 'url' => bless( {
                                   'base' => bless( {
                                                      'host' => 'cirrus.airitechsecurity.com',
                                                      'path' => bless( {
                                                                         'leading_slash' => '',
                                                                         'trailing_slash' => '',
                                                                         'charset' => 'UTF-8',
                                                                         'parts' => []
                                                                       }, 'Mojo::Path' ),
                                                      'scheme' => 'HTTP',
                                                      'port' => ''
                                                    }, 'Mojo::URL' ),
                                   'path' => bless( {
                                                      'path' => '/ae/gia/',
                                                      'charset' => 'UTF-8'
                                                    }, 'Mojo::Path' )
                                 }, 'Mojo::URL' ),
                 'raw_size' => 0,
                 'events' => {},
                 'max_message_size' => 10485760,
                 'method' => 'GET',
                 'version' => '1.0',
                 'buffer' => '',
                 'finished' => 1,
                 'state' => 'finished',
                 'content' => bless( {
                                       'state' => 'finished',
                                       'buffer' => '',
                                       'pre_buffer' => '',
                                       'events' => {
                                                     'read' => [
                                                                 sub { "DUMMY" }
                                                               ]
                                                   },
                                       'size' => 0,
                                       'body' => 1,
                                       'headers' => bless( {
                                                             'headers' => {
                                                                            'accept-encoding' => [
                                                                                                   'gzip,deflate,lzma,sdch'
                                                                                                 ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'host' => [
                                                                                        'cirrus.airitechsecurity.com'
                                                                                      ],
                                                                            'accept' => [
                                                                                          'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
                                                                                        ],
                                                                            'user-agent' => [
                                                                                              'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.101 Safari/537.36 OPR/25.0.1614.50'
                                                                                            ],
                                                                            'x-real-ip' => [
                                                                                             '12.189.207.114'
                                                                                           ],
                                                                            'accept-language' => [
                                                                                                   'en-US,en;q=0.8'
                                                                                                 ],
                                                                            'x-forwarded-for' => [
                                                                                                   '12.189.207.114'
                                                                                                 ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'x-forwarded-host' => [
                                                                                                    'cirrus.airitechsecurity.com'
                                                                                                  ],
                                                                            'cache-control' => [
                                                                                                 'max-age=0'
                                                                                               ]
                                                                          },
                                                             'normalcase' => {
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR'
                                                                             }
                                                           }, 'Mojo::Headers' ),
                                       'read' => $VAR1->{'content'}{'events'}{'read'}[0],
                                       'raw_size' => 0,
                                       'auto_upgrade' => 1,
                                       'real_size' => 0
                                     }, 'Mojo::Content::Single' ),
                 'env' => {
                            'QUERY_STRING' => '',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'HTTP_ACCEPT' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                            'REMOTE_PORT' => 54438,
                            'HTTP_X_FORWARDED_FOR' => '12.189.207.114',
                            'HTTP_X_REAL_IP' => '12.189.207.114',
                            'SCRIPT_NAME' => '',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'REQUEST_URI' => '/ae/gia/',
                            'psgix.input.buffered' => 1,
                            'psgi.input' => \*{'HTTP::Server::PSGI::$input'},
                            'HTTP_ACCEPT_LANGUAGE' => 'en-US,en;q=0.8',
                            'PATH_INFO' => '/ae/gia/',
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'psgi.nonblocking' => '',
                            'HTTP_USER_AGENT' => 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.101 Safari/537.36 OPR/25.0.1614.50',
                            'SERVER_NAME' => 0,
                            'HTTP_HOST' => 'cirrus.airitechsecurity.com',
                            'psgix.harakiri' => 1,
                            'psgi.multithread' => '',
                            'psgi.multiprocess' => '',
                            'REQUEST_METHOD' => 'GET',
                            'psgi.errors' => *::STDERR,
                            'HTTP_CACHE_CONTROL' => 'max-age=0',
                            'SERVER_PORT' => 5000,
                            'HTTP_ACCEPT_ENCODING' => 'gzip,deflate,lzma,sdch',
                            'REMOTE_ADDR' => '127.0.0.1',
                            'HTTP_X_FORWARDED_HOST' => 'cirrus.airitechsecurity.com',
                            'psgi.run_once' => '',
                            'psgi.streaming' => 1,
                            'HTTP_CONNECTION' => 'close',
                            'psgix.io' => bless( \*Symbol::GEN2, 'IO::Socket::INET' ),
                            'psgi.url_scheme' => 'http'
                          }
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:05:17 2014] [debug] Template "main/dumpPostData.html.ep" not found.
[Wed Oct 22 13:05:17 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:05:17 2014] [debug] Rendering cached template "not_found.html.ep".
[Wed Oct 22 13:05:17 2014] [debug] Rendering cached template "layouts/none.html.ep".
[Wed Oct 22 13:05:17 2014] [debug] 404 Not Found (0.005010s, 199.601/s).
[Wed Oct 22 13:05:21 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:05:21 2014] [debug] GET "/ae/gia".
[Wed Oct 22 13:05:21 2014] [debug] Routing to controller "AeWeb::Main" and action "dumpPostData".
[Wed Oct 22 13:05:21 2014] [debug] $VAR1 = bless( {
                 'method' => 'GET',
                 'version' => '1.0',
                 'max_message_size' => 10485760,
                 'events' => {},
                 'url' => bless( {
                                   'base' => bless( {
                                                      'path' => bless( {
                                                                         'parts' => [],
                                                                         'leading_slash' => '',
                                                                         'trailing_slash' => '',
                                                                         'charset' => 'UTF-8'
                                                                       }, 'Mojo::Path' ),
                                                      'port' => '',
                                                      'scheme' => 'HTTP',
                                                      'host' => 'cirrus.airitechsecurity.com'
                                                    }, 'Mojo::URL' ),
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia'
                                                    }, 'Mojo::Path' )
                                 }, 'Mojo::URL' ),
                 'raw_size' => 0,
                 'env' => {
                            'REMOTE_PORT' => 54439,
                            'HTTP_ACCEPT' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'QUERY_STRING' => '',
                            'HTTP_X_FORWARDED_FOR' => '12.189.207.114',
                            'HTTP_X_REAL_IP' => '12.189.207.114',
                            'SCRIPT_NAME' => '',
                            'REQUEST_URI' => '/ae/gia',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'PATH_INFO' => '/ae/gia',
                            'psgix.input.buffered' => 1,
                            'psgi.input' => \*{'HTTP::Server::PSGI::$input'},
                            'HTTP_ACCEPT_LANGUAGE' => 'en-US,en;q=0.8',
                            'psgi.nonblocking' => '',
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'HTTP_USER_AGENT' => 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.101 Safari/537.36 OPR/25.0.1614.50',
                            'HTTP_HOST' => 'cirrus.airitechsecurity.com',
                            'SERVER_NAME' => 0,
                            'psgix.harakiri' => 1,
                            'psgi.multiprocess' => '',
                            'psgi.errors' => *::STDERR,
                            'REQUEST_METHOD' => 'GET',
                            'psgi.multithread' => '',
                            'REMOTE_ADDR' => '127.0.0.1',
                            'HTTP_ACCEPT_ENCODING' => 'gzip,deflate,lzma,sdch',
                            'SERVER_PORT' => 5000,
                            'HTTP_X_FORWARDED_HOST' => 'cirrus.airitechsecurity.com',
                            'psgi.run_once' => '',
                            'psgi.streaming' => 1,
                            'psgi.url_scheme' => 'http',
                            'HTTP_CONNECTION' => 'close',
                            'psgix.io' => bless( \*Symbol::GEN3, 'IO::Socket::INET' )
                          },
                 'content' => bless( {
                                       'pre_buffer' => '',
                                       'state' => 'finished',
                                       'buffer' => '',
                                       'real_size' => 0,
                                       'size' => 0,
                                       'events' => {
                                                     'read' => [
                                                                 sub { "DUMMY" }
                                                               ]
                                                   },
                                       'body' => 1,
                                       'read' => $VAR1->{'content'}{'events'}{'read'}[0],
                                       'headers' => bless( {
                                                             'headers' => {
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'accept-encoding' => [
                                                                                                   'gzip,deflate,lzma,sdch'
                                                                                                 ],
                                                                            'host' => [
                                                                                        'cirrus.airitechsecurity.com'
                                                                                      ],
                                                                            'accept' => [
                                                                                          'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
                                                                                        ],
                                                                            'user-agent' => [
                                                                                              'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.101 Safari/537.36 OPR/25.0.1614.50'
                                                                                            ],
                                                                            'x-real-ip' => [
                                                                                             '12.189.207.114'
                                                                                           ],
                                                                            'accept-language' => [
                                                                                                   'en-US,en;q=0.8'
                                                                                                 ],
                                                                            'x-forwarded-for' => [
                                                                                                   '12.189.207.114'
                                                                                                 ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'x-forwarded-host' => [
                                                                                                    'cirrus.airitechsecurity.com'
                                                                                                  ]
                                                                          },
                                                             'normalcase' => {
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR'
                                                                             }
                                                           }, 'Mojo::Headers' ),
                                       'auto_upgrade' => 1,
                                       'raw_size' => 0
                                     }, 'Mojo::Content::Single' ),
                 'state' => 'finished',
                 'finished' => 1,
                 'buffer' => ''
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:05:21 2014] [debug] Template "main/dumpPostData.html.ep" not found.
[Wed Oct 22 13:05:21 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:05:21 2014] [debug] Rendering cached template "not_found.html.ep".
[Wed Oct 22 13:05:21 2014] [debug] Rendering cached template "layouts/none.html.ep".
[Wed Oct 22 13:05:21 2014] [debug] 404 Not Found (0.003602s, 277.624/s).
[Wed Oct 22 13:06:12 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:06:12 2014] [debug] wtf
[Wed Oct 22 13:06:12 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:06:14 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:06:14 2014] [debug] GET "/ae/gia".
[Wed Oct 22 13:06:14 2014] [debug] Routing to controller "AeWeb::Main" and action "dumpPostData".
[Wed Oct 22 13:06:14 2014] [debug] $VAR1 = bless( {
                 'version' => '1.0',
                 'raw_size' => 0,
                 'url' => bless( {
                                   'base' => bless( {
                                                      'host' => 'cirrus.airitechsecurity.com',
                                                      'path' => bless( {
                                                                         'leading_slash' => '',
                                                                         'parts' => [],
                                                                         'trailing_slash' => '',
                                                                         'charset' => 'UTF-8'
                                                                       }, 'Mojo::Path' ),
                                                      'port' => '',
                                                      'scheme' => 'HTTP'
                                                    }, 'Mojo::URL' ),
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia'
                                                    }, 'Mojo::Path' )
                                 }, 'Mojo::URL' ),
                 'method' => 'GET',
                 'events' => {},
                 'state' => 'finished',
                 'env' => {
                            'SERVER_PORT' => 5000,
                            'HTTP_CACHE_CONTROL' => 'max-age=0',
                            'REMOTE_PORT' => 54440,
                            'HTTP_ACCEPT' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                            'REMOTE_ADDR' => '127.0.0.1',
                            'REQUEST_URI' => '/ae/gia',
                            'psgi.multithread' => '',
                            'HTTP_ACCEPT_LANGUAGE' => 'en-US,en;q=0.8',
                            'psgi.streaming' => 1,
                            'psgi.nonblocking' => '',
                            'HTTP_X_FORWARDED_FOR' => '12.189.207.114',
                            'HTTP_X_FORWARDED_HOST' => 'cirrus.airitechsecurity.com',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'psgix.input.buffered' => 1,
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'HTTP_USER_AGENT' => 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.101 Safari/537.36 OPR/25.0.1614.50',
                            'QUERY_STRING' => '',
                            'HTTP_ACCEPT_ENCODING' => 'gzip,deflate,lzma,sdch',
                            'HTTP_CONNECTION' => 'close',
                            'HTTP_HOST' => 'cirrus.airitechsecurity.com',
                            'psgi.url_scheme' => 'http',
                            'psgix.harakiri' => 1,
                            'psgi.errors' => *::STDERR,
                            'HTTP_X_REAL_IP' => '12.189.207.114',
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'psgi.run_once' => '',
                            'REQUEST_METHOD' => 'GET',
                            'SERVER_NAME' => 0,
                            'PATH_INFO' => '/ae/gia',
                            'SCRIPT_NAME' => '',
                            'psgix.io' => bless( \*Symbol::GEN1, 'IO::Socket::INET' ),
                            'psgi.input' => \*{'HTTP::Server::PSGI::$input'},
                            'psgi.multiprocess' => ''
                          },
                 'buffer' => '',
                 'content' => bless( {
                                       'auto_upgrade' => 1,
                                       'pre_buffer' => '',
                                       'size' => 0,
                                       'headers' => bless( {
                                                             'headers' => {
                                                                            'x-forwarded-host' => [
                                                                                                    'cirrus.airitechsecurity.com'
                                                                                                  ],
                                                                            'host' => [
                                                                                        'cirrus.airitechsecurity.com'
                                                                                      ],
                                                                            'accept-encoding' => [
                                                                                                   'gzip,deflate,lzma,sdch'
                                                                                                 ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'user-agent' => [
                                                                                              'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.101 Safari/537.36 OPR/25.0.1614.50'
                                                                                            ],
                                                                            'accept' => [
                                                                                          'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
                                                                                        ],
                                                                            'accept-language' => [
                                                                                                   'en-US,en;q=0.8'
                                                                                                 ],
                                                                            'cache-control' => [
                                                                                                 'max-age=0'
                                                                                               ],
                                                                            'x-real-ip' => [
                                                                                             '12.189.207.114'
                                                                                           ],
                                                                            'x-forwarded-for' => [
                                                                                                   '12.189.207.114'
                                                                                                 ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ]
                                                                          },
                                                             'normalcase' => {
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR'
                                                                             }
                                                           }, 'Mojo::Headers' ),
                                       'body' => 1,
                                       'buffer' => '',
                                       'state' => 'finished',
                                       'raw_size' => 0,
                                       'read' => sub { "DUMMY" },
                                       'events' => {
                                                     'read' => [
                                                                 $VAR1->{'content'}{'read'}
                                                               ]
                                                   },
                                       'real_size' => 0
                                     }, 'Mojo::Content::Single' ),
                 'max_message_size' => 10485760,
                 'finished' => 1
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:06:14 2014] [debug] Template "main/dumpPostData.html.ep" not found.
[Wed Oct 22 13:06:14 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:06:14 2014] [debug] Rendering template "not_found.html.ep".
[Wed Oct 22 13:06:14 2014] [debug] Rendering template "layouts/none.html.ep".
[Wed Oct 22 13:06:14 2014] [debug] 404 Not Found (0.121162s, 8.253/s).
[Wed Oct 22 13:06:17 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:06:17 2014] [debug] GET "/ae/gia".
[Wed Oct 22 13:06:17 2014] [debug] Routing to controller "AeWeb::Main" and action "dumpPostData".
[Wed Oct 22 13:06:17 2014] [debug] $VAR1 = bless( {
                 'events' => {},
                 'method' => 'GET',
                 'url' => bless( {
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia'
                                                    }, 'Mojo::Path' ),
                                   'base' => bless( {
                                                      'port' => '',
                                                      'scheme' => 'HTTP',
                                                      'host' => 'cirrus.airitechsecurity.com',
                                                      'path' => bless( {
                                                                         'charset' => 'UTF-8',
                                                                         'parts' => [],
                                                                         'trailing_slash' => '',
                                                                         'leading_slash' => ''
                                                                       }, 'Mojo::Path' )
                                                    }, 'Mojo::URL' )
                                 }, 'Mojo::URL' ),
                 'raw_size' => 0,
                 'version' => '1.0',
                 'buffer' => '',
                 'state' => 'finished',
                 'env' => {
                            'REQUEST_URI' => '/ae/gia',
                            'REMOTE_ADDR' => '127.0.0.1',
                            'psgi.multithread' => '',
                            'HTTP_ACCEPT' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                            'psgi.streaming' => 1,
                            'psgi.nonblocking' => '',
                            'HTTP_X_FORWARDED_FOR' => '12.189.207.114',
                            'HTTP_ACCEPT_LANGUAGE' => 'en-US,en;q=0.8',
                            'HTTP_CACHE_CONTROL' => 'max-age=0',
                            'SERVER_PORT' => 5000,
                            'REMOTE_PORT' => 54441,
                            'QUERY_STRING' => '',
                            'HTTP_ACCEPT_ENCODING' => 'gzip,deflate,lzma,sdch',
                            'HTTP_HOST' => 'cirrus.airitechsecurity.com',
                            'HTTP_CONNECTION' => 'close',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'HTTP_X_FORWARDED_HOST' => 'cirrus.airitechsecurity.com',
                            'HTTP_USER_AGENT' => 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.101 Safari/537.36 OPR/25.0.1614.50',
                            'psgix.input.buffered' => 1,
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'psgi.run_once' => '',
                            'psgi.url_scheme' => 'http',
                            'psgix.harakiri' => 1,
                            'psgi.errors' => *::STDERR,
                            'HTTP_X_REAL_IP' => '12.189.207.114',
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'psgix.io' => bless( \*Symbol::GEN2, 'IO::Socket::INET' ),
                            'psgi.multiprocess' => '',
                            'psgi.input' => \*{'HTTP::Server::PSGI::$input'},
                            'SERVER_NAME' => 0,
                            'REQUEST_METHOD' => 'GET',
                            'SCRIPT_NAME' => '',
                            'PATH_INFO' => '/ae/gia'
                          },
                 'content' => bless( {
                                       'body' => 1,
                                       'size' => 0,
                                       'headers' => bless( {
                                                             'normalcase' => {
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST'
                                                                             },
                                                             'headers' => {
                                                                            'cache-control' => [
                                                                                                 'max-age=0'
                                                                                               ],
                                                                            'accept-language' => [
                                                                                                   'en-US,en;q=0.8'
                                                                                                 ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'x-forwarded-for' => [
                                                                                                   '12.189.207.114'
                                                                                                 ],
                                                                            'x-real-ip' => [
                                                                                             '12.189.207.114'
                                                                                           ],
                                                                            'accept-encoding' => [
                                                                                                   'gzip,deflate,lzma,sdch'
                                                                                                 ],
                                                                            'host' => [
                                                                                        'cirrus.airitechsecurity.com'
                                                                                      ],
                                                                            'x-forwarded-host' => [
                                                                                                    'cirrus.airitechsecurity.com'
                                                                                                  ],
                                                                            'accept' => [
                                                                                          'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
                                                                                        ],
                                                                            'user-agent' => [
                                                                                              'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.101 Safari/537.36 OPR/25.0.1614.50'
                                                                                            ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ]
                                                                          }
                                                           }, 'Mojo::Headers' ),
                                       'pre_buffer' => '',
                                       'auto_upgrade' => 1,
                                       'real_size' => 0,
                                       'events' => {
                                                     'read' => [
                                                                 sub { "DUMMY" }
                                                               ]
                                                   },
                                       'raw_size' => 0,
                                       'read' => $VAR1->{'content'}{'events'}{'read'}[0],
                                       'state' => 'finished',
                                       'buffer' => ''
                                     }, 'Mojo::Content::Single' ),
                 'finished' => 1,
                 'max_message_size' => 10485760
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:06:17 2014] [debug] Template "main/dumpPostData.html.ep" not found.
[Wed Oct 22 13:06:17 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:06:17 2014] [debug] Rendering cached template "not_found.html.ep".
[Wed Oct 22 13:06:17 2014] [debug] Rendering cached template "layouts/none.html.ep".
[Wed Oct 22 13:06:17 2014] [debug] 404 Not Found (0.003669s, 272.554/s).
[Wed Oct 22 13:06:20 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:06:20 2014] [debug] GET "/ae/gia/".
[Wed Oct 22 13:06:20 2014] [debug] Routing to controller "AeWeb::Main" and action "dumpPostData".
[Wed Oct 22 13:06:20 2014] [debug] $VAR1 = bless( {
                 'buffer' => '',
                 'state' => 'finished',
                 'env' => {
                            'SCRIPT_NAME' => '',
                            'PATH_INFO' => '/ae/gia/',
                            'SERVER_NAME' => 0,
                            'REQUEST_METHOD' => 'GET',
                            'psgi.multiprocess' => '',
                            'psgi.input' => \*{'HTTP::Server::PSGI::$input'},
                            'psgix.io' => bless( \*Symbol::GEN3, 'IO::Socket::INET' ),
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'HTTP_X_REAL_IP' => '12.189.207.114',
                            'psgi.errors' => *::STDERR,
                            'psgix.harakiri' => 1,
                            'psgi.url_scheme' => 'http',
                            'psgi.run_once' => '',
                            'psgix.input.buffered' => 1,
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'HTTP_USER_AGENT' => 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.101 Safari/537.36 OPR/25.0.1614.50',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'HTTP_X_FORWARDED_HOST' => 'cirrus.airitechsecurity.com',
                            'HTTP_HOST' => 'cirrus.airitechsecurity.com',
                            'HTTP_CONNECTION' => 'close',
                            'HTTP_ACCEPT_ENCODING' => 'gzip,deflate,lzma,sdch',
                            'QUERY_STRING' => '',
                            'REMOTE_PORT' => 54442,
                            'SERVER_PORT' => 5000,
                            'HTTP_X_FORWARDED_FOR' => '12.189.207.114',
                            'psgi.streaming' => 1,
                            'psgi.nonblocking' => '',
                            'HTTP_ACCEPT_LANGUAGE' => 'en-US,en;q=0.8',
                            'psgi.multithread' => '',
                            'REMOTE_ADDR' => '127.0.0.1',
                            'REQUEST_URI' => '/ae/gia/',
                            'HTTP_ACCEPT' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
                          },
                 'events' => {},
                 'method' => 'GET',
                 'url' => bless( {
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia/'
                                                    }, 'Mojo::Path' ),
                                   'base' => bless( {
                                                      'host' => 'cirrus.airitechsecurity.com',
                                                      'path' => bless( {
                                                                         'leading_slash' => '',
                                                                         'charset' => 'UTF-8',
                                                                         'trailing_slash' => '',
                                                                         'parts' => []
                                                                       }, 'Mojo::Path' ),
                                                      'scheme' => 'HTTP',
                                                      'port' => ''
                                                    }, 'Mojo::URL' )
                                 }, 'Mojo::URL' ),
                 'raw_size' => 0,
                 'version' => '1.0',
                 'finished' => 1,
                 'max_message_size' => 10485760,
                 'content' => bless( {
                                       'pre_buffer' => '',
                                       'auto_upgrade' => 1,
                                       'body' => 1,
                                       'size' => 0,
                                       'headers' => bless( {
                                                             'normalcase' => {
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST'
                                                                             },
                                                             'headers' => {
                                                                            'x-real-ip' => [
                                                                                             '12.189.207.114'
                                                                                           ],
                                                                            'x-forwarded-for' => [
                                                                                                   '12.189.207.114'
                                                                                                 ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'accept-language' => [
                                                                                                   'en-US,en;q=0.8'
                                                                                                 ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'accept' => [
                                                                                          'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
                                                                                        ],
                                                                            'user-agent' => [
                                                                                              'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.101 Safari/537.36 OPR/25.0.1614.50'
                                                                                            ],
                                                                            'host' => [
                                                                                        'cirrus.airitechsecurity.com'
                                                                                      ],
                                                                            'x-forwarded-host' => [
                                                                                                    'cirrus.airitechsecurity.com'
                                                                                                  ],
                                                                            'accept-encoding' => [
                                                                                                   'gzip,deflate,lzma,sdch'
                                                                                                 ]
                                                                          }
                                                           }, 'Mojo::Headers' ),
                                       'buffer' => '',
                                       'state' => 'finished',
                                       'events' => {
                                                     'read' => [
                                                                 sub { "DUMMY" }
                                                               ]
                                                   },
                                       'real_size' => 0,
                                       'raw_size' => 0,
                                       'read' => $VAR1->{'content'}{'events'}{'read'}[0]
                                     }, 'Mojo::Content::Single' )
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:06:20 2014] [debug] Template "main/dumpPostData.html.ep" not found.
[Wed Oct 22 13:06:20 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:06:20 2014] [debug] Rendering cached template "not_found.html.ep".
[Wed Oct 22 13:06:20 2014] [debug] Rendering cached template "layouts/none.html.ep".
[Wed Oct 22 13:06:20 2014] [debug] 404 Not Found (0.005214s, 191.791/s).
[Wed Oct 22 13:08:13 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:08:13 2014] [debug] wtf
[Wed Oct 22 13:08:13 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:08:16 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:08:16 2014] [debug] GET "/ae/gia/".
[Wed Oct 22 13:08:16 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 13:08:16 2014] [debug] Rendering template "example/welcome.html.ep".
[Wed Oct 22 13:08:16 2014] [debug] Rendering template "layouts/default.html.ep".
[Wed Oct 22 13:08:16 2014] [debug] Rendering template "common_styles.html.ep".
[Wed Oct 22 13:08:16 2014] [debug] Rendering template "header.html.ep".
[Wed Oct 22 13:08:16 2014] [debug] Rendering template "common_js.html.ep".
[Wed Oct 22 13:08:16 2014] [debug] 200 OK (0.014461s, 69.152/s).
[Wed Oct 22 13:09:34 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:09:34 2014] [debug] wtf
[Wed Oct 22 13:09:34 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:09:38 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:09:38 2014] [debug] GET "/ae/".
[Wed Oct 22 13:09:38 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "index".
[Wed Oct 22 13:09:38 2014] [debug] Rendering template "main/index.html.ep".
[Wed Oct 22 13:09:38 2014] [debug] Rendering template "layouts/default.html.ep".
[Wed Oct 22 13:09:38 2014] [debug] Rendering template "common_styles.html.ep".
[Wed Oct 22 13:09:38 2014] [debug] Rendering template "header.html.ep".
[Wed Oct 22 13:09:38 2014] [debug] Rendering template "common_js.html.ep".
[Wed Oct 22 13:09:38 2014] [debug] 200 OK (0.112297s, 8.905/s).
[Wed Oct 22 13:09:43 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:09:43 2014] [debug] GET "/ae/upload/images".
[Wed Oct 22 13:09:43 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:09:43 2014] [debug] Rendering template "not_found.html.ep".
[Wed Oct 22 13:09:43 2014] [debug] Rendering template "layouts/none.html.ep".
[Wed Oct 22 13:09:43 2014] [debug] 404 Not Found (0.007329s, 136.444/s).
[Wed Oct 22 13:09:46 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:09:46 2014] [debug] GET "/ae/login".
[Wed Oct 22 13:09:46 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:09:46 2014] [debug] Rendering cached template "not_found.html.ep".
[Wed Oct 22 13:09:46 2014] [debug] Rendering cached template "layouts/none.html.ep".
[Wed Oct 22 13:09:46 2014] [debug] 404 Not Found (0.002621s, 381.534/s).
[Wed Oct 22 13:10:15 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:10:15 2014] [debug] GET "/ae/login".
[Wed Oct 22 13:10:15 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:10:15 2014] [debug] Rendering cached template "not_found.html.ep".
[Wed Oct 22 13:10:15 2014] [debug] Rendering cached template "layouts/none.html.ep".
[Wed Oct 22 13:10:15 2014] [debug] 404 Not Found (0.001537s, 650.618/s).
[Wed Oct 22 13:10:21 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:10:21 2014] [debug] wtf
[Wed Oct 22 13:10:21 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:10:22 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:10:22 2014] [debug] GET "/ae/login".
[Wed Oct 22 13:10:23 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "login".
[Wed Oct 22 13:10:23 2014] [debug] routed to login correctly
[Wed Oct 22 13:10:23 2014] [debug] Template "main/login.html.ep" not found.
[Wed Oct 22 13:10:23 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:10:23 2014] [debug] Rendering template "not_found.html.ep".
[Wed Oct 22 13:10:23 2014] [debug] Rendering template "layouts/none.html.ep".
[Wed Oct 22 13:10:23 2014] [debug] 404 Not Found (0.113913s, 8.779/s).
[Wed Oct 22 13:10:23 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:10:23 2014] [debug] GET "/ae/login".
[Wed Oct 22 13:10:23 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "login".
[Wed Oct 22 13:10:23 2014] [debug] routed to login correctly
[Wed Oct 22 13:10:23 2014] [debug] Template "main/login.html.ep" not found.
[Wed Oct 22 13:10:23 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 13:10:23 2014] [debug] Rendering cached template "not_found.html.ep".
[Wed Oct 22 13:10:23 2014] [debug] Rendering cached template "layouts/none.html.ep".
[Wed Oct 22 13:10:23 2014] [debug] 404 Not Found (0.002092s, 478.011/s).
[Wed Oct 22 13:10:48 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:10:48 2014] [debug] GET "/ae/gia".
[Wed Oct 22 13:10:48 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 13:10:48 2014] [debug] Rendering template "example/welcome.html.ep".
[Wed Oct 22 13:10:48 2014] [debug] Rendering template "layouts/default.html.ep".
[Wed Oct 22 13:10:48 2014] [debug] Rendering template "common_styles.html.ep".
[Wed Oct 22 13:10:48 2014] [debug] Rendering template "header.html.ep".
[Wed Oct 22 13:10:48 2014] [debug] Rendering template "common_js.html.ep".
[Wed Oct 22 13:10:48 2014] [debug] 200 OK (0.013173s, 75.913/s).
[Wed Oct 22 13:11:33 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:11:33 2014] [debug] GET "/ae/login".
[Wed Oct 22 13:11:33 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "login".
[Wed Oct 22 13:11:33 2014] [debug] routed to login correctly
[Wed Oct 22 13:11:33 2014] [debug] Rendering template "main/login.html.ep".
[Wed Oct 22 13:11:33 2014] [debug] Rendering template "layouts/default.html.ep".
[Wed Oct 22 13:11:33 2014] [debug] Rendering template "common_styles.html.ep".
[Wed Oct 22 13:11:33 2014] [debug] Rendering template "header.html.ep".
[Wed Oct 22 13:11:33 2014] [debug] Rendering template "common_js.html.ep".
[Wed Oct 22 13:11:33 2014] [debug] 200 OK (0.011215s, 89.166/s).
[Wed Oct 22 13:34:08 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:34:08 2014] [debug] GET "/ae/gia".
[Wed Oct 22 13:34:08 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 13:34:08 2014] [debug] Rendering cached template "example/welcome.html.ep".
[Wed Oct 22 13:34:08 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 13:34:08 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 13:34:08 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 13:34:08 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 13:34:08 2014] [debug] 200 OK (0.004874s, 205.170/s).
[Wed Oct 22 13:34:12 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:34:12 2014] [debug] GET "/ae/gia".
[Wed Oct 22 13:34:12 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 13:34:12 2014] [debug] Rendering cached template "example/welcome.html.ep".
[Wed Oct 22 13:34:12 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 13:34:12 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 13:34:12 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 13:34:12 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 13:34:12 2014] [debug] 200 OK (0.005340s, 187.266/s).
[Wed Oct 22 13:34:23 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:34:23 2014] [debug] wtf
[Wed Oct 22 13:34:23 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:34:31 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:34:31 2014] [debug] GET "/ae/gia".
[Wed Oct 22 13:34:31 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 13:34:31 2014] [debug] Rendering template "example/welcome.html.ep".
[Wed Oct 22 13:34:31 2014] [debug] Rendering template "layouts/default.html.ep".
[Wed Oct 22 13:34:31 2014] [debug] Rendering template "common_styles.html.ep".
[Wed Oct 22 13:34:31 2014] [debug] Rendering template "header.html.ep".
[Wed Oct 22 13:34:31 2014] [debug] Rendering template "common_js.html.ep".
[Wed Oct 22 13:34:31 2014] [debug] 200 OK (0.014275s, 70.053/s).
[Wed Oct 22 13:34:34 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:34:34 2014] [debug] GET "/ae/gia".
[Wed Oct 22 13:34:34 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 13:34:34 2014] [debug] Rendering cached template "example/welcome.html.ep".
[Wed Oct 22 13:34:34 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 13:34:34 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 13:34:34 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 13:34:34 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 13:34:34 2014] [debug] 200 OK (0.005112s, 195.618/s).
[Wed Oct 22 13:34:48 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:34:48 2014] [debug] POST "/ae/gia".
[Wed Oct 22 13:34:48 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 13:34:48 2014] [debug] $VAR1 = bless( {
                 'buffer' => '',
                 'version' => '1.0',
                 'env' => {
                            'psgix.harakiri' => 1,
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'psgi.streaming' => 1,
                            'SERVER_PORT' => 5000,
                            'psgi.input' => bless( \*{'Stream::Buffered::PerlIO::$io'}, 'FileHandle' ),
                            'QUERY_STRING' => '',
                            'SERVER_NAME' => 0,
                            'REQUEST_METHOD' => 'POST',
                            'CONTENT_LENGTH' => '3591',
                            'HTTP_ACCEPT' => '*/*',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'psgi.run_once' => '',
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'psgix.input.buffered' => 1,
                            'REMOTE_ADDR' => '127.0.0.1',
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'HTTP_HOST' => 'localhost',
                            'REQUEST_URI' => '/ae/gia',
                            'HTTP_CONNECTION' => 'close',
                            'psgi.multiprocess' => '',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'PATH_INFO' => '/ae/gia',
                            'psgix.io' => bless( \*Symbol::GEN3, 'IO::Socket::INET' ),
                            'psgi.nonblocking' => '',
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'psgi.errors' => *::STDERR,
                            'SCRIPT_NAME' => '',
                            'REMOTE_PORT' => 54471,
                            'psgi.multithread' => '',
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'psgi.url_scheme' => 'http'
                          },
                 'finished' => 1,
                 'events' => {},
                 'state' => 'finished',
                 'method' => 'POST',
                 'content' => bless( {
                                       'state' => 'finished',
                                       'real_size' => 3591,
                                       'events' => {
                                                     'read' => [
                                                                 sub { "DUMMY" }
                                                               ]
                                                   },
                                       'pre_buffer' => '',
                                       'asset' => bless( {
                                                           'auto_upgrade' => 1,
                                                           'content' => 'package uiobjFactory;use DBI;use Moose;use Test::More;use Compress::Zlib qw/compress uncompress/;use Storable qw/nstore freeze thaw dclone retrieve/;use Data::Dumper;use Try::Tiny;$Storable::canonical = 1;#BEGIN: {  DBI->trace(3); };has \'dsn\' => (isa => \'Str\', is => \'rw\', default => \'DBI:ODBC:DRIVER={Easysoft ODBC-SQL Server};SERVER=SQLDEV;dbname=treppwebdb_3\');#has \'dsn\' => (isa => \'Str\', is => \'rw\', default => \'DBI:ODBC:DRIVER={Easysoft ODBC-SQL Server};SERVER=10.0.1.105;dbname=treppwebdb_3\');has \'dbh\' => (isa => \'DBI::db\', is => \'rw\', lazy => 1, default => sub {  my $dbh = DBI->connect_cached($_[0]->dsn(), "treppweb_3user", "treppweb_3user");  $dbh->{LongTruncOk} = 0;  $dbh->{LongReadLen} = 99999999;  $dbh;});has \'resultSet\' => (  traits => [\'Array\'],  isa => \'ArrayRef[Any]\',  is => \'rw\',  lazy => 1,  handles => {    \'getSQL\' => \'get\',    \'elSQL\' => \'elements\',    \'mapSQL\' => \'map\',    \'countSQL\' => \'count\',  },  builder => \'getUIObjects\');sub getUIObjects{  my ($s) = @_;  my @out;#  my $stoFile = "/home/nate/src/cmbsweb_to_mongo/uiobj.sto";    my @fieldNames = qw/owner fromUser namespace id description modifiedDt obj/;  my $sqlFields = join(\', \', @fieldNames);#  my $sth = $s->dbh->prepare(#  "SELECT $sqlFields FROM (#    SELECT $sqlFields, ROW_NUMBER() OVER (ORDER BY UIObjectID asc) as row from UIObject#  ) a WHERE row > 830 and row < 852"#);  my $sth = $s->dbh->prepare("SELECT $sqlFields from UIObject order by UIObjectID asc");  $sth->execute();  my $rs = $sth->fetchall_arrayref();  $sth->finish();  foreach my $rsEl (@$rs) {    my %h;    for my $i (0..($#fieldNames+1)) {      if (defined $rsEl->[$i]) {        if ($fieldNames[$i] eq \'obj\') {          $h{$fieldNames[$i]} = $s->memoizeObj($rsEl->[$i]);        } else {          $h{$fieldNames[$i]} = $rsEl->[$i];        }      }    }    Trepp::OverrideTemplate::clean(\\%h);    push @out, \\%h;  }  \\@out;}sub xlateKeys{  my ($s, $blah) = @_;#  if ($key =~ m/\\./ || $key eq \'\' || $key =~ m/^\\$/) {}sub memoizeObj{  my ($s, $data) = @_;  my $compress_sig = "compressed:";  if ($compress_sig eq substr($data, 0, length($compress_sig))) {    substr($data, 0, length($compress_sig), \'\');    $data = uncompress($data);  }  my $ref = Storable::thaw($data);  $ref;}package main;use Storable qw/dclone nstore retrieve/;use Digest::MD5 qw/md5_hex/;use Data::Dumper;use Test::More qw/no_plan/;use lib \'.\';use Trepp::OverrideTemplate;use RTP;use IO::Socket::INET;use Try::Tiny;my $f = new uiobjFactory();#memoize / builder$f->getSQL(0);my $ip = "127.0.0.1";sub newSock {  print "opening socket to $ip\\n";  my $port = 31337;  my $cli = IO::Socket::INET->new(    PeerAddr => $ip || \'127.0.0.1\',    PeerPort => $port,     Proto => \'tcp\'      );  $cli;}my $rtp = RTP->new(sock => newSock());=head2 openSend($rtp, $data)  opens a socket, sends data  meant to be atomic via recursion until success    client end is also meant to restart upon failure=cutsub Send($$){  my ($Prtp, $Pdata)  = @_;  my ($state);  try {    $state = $Prtp->sendData($Pdata);  } catch {    warn "sendData failed: $_, trying again";    $Prtp->close();    $Prtp->sock(newSock());    Send($Prtp, $Pdata);  };}foreach my $obj ($f->elSQL()) {  my ($data, $size, $sent);  $data = Storable::freeze($obj);#    print "sending ".length($data)." bytes\\n";  Send($rtp, $data);}$rtp->close();#my $cref = dclone($f->resultSet());#ok(1, Dumper(\\$cref));#nstore(\\$cref, "UIObject.sto");#my ($newcref, $refOfRef);#$refOfRef = retrieve("UIObject.sto");#$newcref = ${ $refOfRef };#ok(1, Dumper(\\$newcref));#unlink "test.sto";#print Dumper(\\$cref);#print Dumper(\\$newcref);',
                                                           'max_memory_size' => 262144
                                                         }, 'Mojo::Asset::Memory' ),
                                       'raw_size' => 3591,
                                       'body' => 2,
                                       'auto_upgrade' => 1,
                                       'buffer' => '',
                                       'headers' => bless( {
                                                             'normalcase' => {
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT'
                                                                             },
                                                             'headers' => {
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ],
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'content-length' => [
                                                                                                  '3591'
                                                                                                ]
                                                                          }
                                                           }, 'Mojo::Headers' ),
                                       'read' => $VAR1->{'content'}{'events'}{'read'}[0],
                                       'size' => 3591
                                     }, 'Mojo::Content::Single' ),
                 'max_message_size' => 10485760,
                 'url' => bless( {
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia'
                                                    }, 'Mojo::Path' ),
                                   'base' => bless( {
                                                      'host' => 'localhost',
                                                      'port' => '',
                                                      'path' => bless( {
                                                                         'parts' => [],
                                                                         'leading_slash' => '',
                                                                         'charset' => 'UTF-8',
                                                                         'trailing_slash' => ''
                                                                       }, 'Mojo::Path' ),
                                                      'scheme' => 'HTTP'
                                                    }, 'Mojo::URL' )
                                 }, 'Mojo::URL' ),
                 'raw_size' => 0
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:34:48 2014] [debug] Rendering template "main/dumpPostData.html.ep".
[Wed Oct 22 13:34:48 2014] [error] Global symbol "$images" requires explicit package name at template main/dumpPostData.html.ep line 7, <DATA> line 231.
Global symbol "$images" requires explicit package name at template main/dumpPostData.html.ep line 12, <DATA> line 231.
2: % layout 'default';
3:   <div id="container">
4: 
5:         <div id="main" role="main">
6: 
7: dB total: <%=  @$images %>
8: <br>
9: <div id="seehires">
10: <table width=100% height=100%>
11: % my $i = 0;
12: % for my $img (@$images) {

[Wed Oct 22 13:34:48 2014] [debug] Template "exception.development.html.ep" not found.
[Wed Oct 22 13:34:48 2014] [debug] Template "exception.html.ep" not found.
[Wed Oct 22 13:34:48 2014] [debug] Rendering inline template "3e3201ab0667c1fc7f39089209f0435c".
[Wed Oct 22 13:34:49 2014] [debug] Rendering inline template "b2d451b47e2053ce583cbfdf7bcc6006".
[Wed Oct 22 13:34:49 2014] [debug] 500 Internal Server Error (0.144642s, 6.914/s).
[Wed Oct 22 13:36:27 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:36:27 2014] [debug] wtf
[Wed Oct 22 13:36:27 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:36:53 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:36:53 2014] [debug] GET "/ae/gia".
[Wed Oct 22 13:36:53 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 13:36:53 2014] [debug] Rendering template "example/welcome.html.ep".
[Wed Oct 22 13:36:53 2014] [debug] Rendering template "layouts/default.html.ep".
[Wed Oct 22 13:36:53 2014] [debug] Rendering template "common_styles.html.ep".
[Wed Oct 22 13:36:53 2014] [debug] Rendering template "header.html.ep".
[Wed Oct 22 13:36:53 2014] [debug] Rendering template "common_js.html.ep".
[Wed Oct 22 13:36:53 2014] [debug] 200 OK (0.015307s, 65.330/s).
[Wed Oct 22 13:37:24 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:37:24 2014] [debug] POST "/ae/gia".
[Wed Oct 22 13:37:25 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 13:37:25 2014] [debug] $VAR1 = bless( {
                 'raw_size' => 0,
                 'url' => bless( {
                                   'path' => bless( {
                                                      'path' => '/ae/gia',
                                                      'charset' => 'UTF-8'
                                                    }, 'Mojo::Path' ),
                                   'base' => bless( {
                                                      'path' => bless( {
                                                                         'parts' => [],
                                                                         'trailing_slash' => '',
                                                                         'leading_slash' => '',
                                                                         'charset' => 'UTF-8'
                                                                       }, 'Mojo::Path' ),
                                                      'scheme' => 'HTTP',
                                                      'host' => 'localhost',
                                                      'port' => ''
                                                    }, 'Mojo::URL' )
                                 }, 'Mojo::URL' ),
                 'content' => bless( {
                                       'size' => 63681,
                                       'read' => sub { "DUMMY" },
                                       'buffer' => '',
                                       'headers' => bless( {
                                                             'headers' => {
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'content-length' => [
                                                                                                  '63681'
                                                                                                ],
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ],
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ]
                                                                          },
                                                             'normalcase' => {
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT'
                                                                             }
                                                           }, 'Mojo::Headers' ),
                                       'auto_upgrade' => 1,
                                       'body' => 2,
                                       'raw_size' => 63681,
                                       'events' => {
                                                     'read' => [
                                                                 $VAR1->{'content'}{'read'}
                                                               ]
                                                   },
                                       'real_size' => 63681,
                                       'state' => 'finished',
                                       'asset' => bless( {
                                                           'content' => '// ==UserScript==// @name           GIA Script (Modified)// @author          Luke Bonaccorsi AKA SpeedySurfer// @namespace       http://gears.speedysurfer.co.uk// @description     Scouts for bases in the current region// @license         Creative Commons Attribution License// @include        http://*.astroempires.com/*// @exclude        http://*.astroempires.com/login.aspx// @exclude        http://*.astroempires.com/home.aspx// ==/UserScript==/* * This file is a Greasemonkey user script. To install it, you need  * the Firefox plugin "Greasemonkey" (URL: http://greasemonkey.mozdev.org/) * After you installed the extension, restart Firefox and revisit  * this script. Now you will see a new menu item "Install User Script" * in your tools menu. *  * To uninstall this script, go to your "Tools" menu and select  * "Manage User Scripts", then select this script from the list * and click uninstall :-) * * Creative Commons Attribution License (--> or Public Domain) * http://creativecommons.org/licenses/by/2.5/*/  ////////////////////////////////////////// /// Variables //////////////////////////////////////////////////////////////////////if (document.location.href.match(/(.+?)astroempires.com/)){var server=document.location.href.match(/\\/(.+?).astroempires.com/)[1]server = server.replace(/\\//, "")var serverurl= "http://"+server+".astroempires.com/"}if(document.location.href.match(/astroempires.com/)){var empireLinks = []; var ProductionGetCost = [5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000]; var numcredits = document.evaluate(    "/html/body/table/tbody/tr/th/table/tbody/tr[2]/th[2]",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    numcredits = numcredits.snapshotItem(0).innerHTML;var FT_INDEX = 0;var BO_INDEX = 1;var HB_INDEX = 2;var IB_INDEX = 3;var CV_INDEX = 4;var RC_INDEX = 5;var DE_INDEX = 6;var FR_INDEX = 7;var IF_INDEX = 8;var SS_INDEX = 9;var OS_INDEX = 10;var CR_INDEX = 11;var CA_INDEX = 12;var HC_INDEX = 13;var BC_INDEX = 14;var FC_INDEX = 15;var DN_INDEX = 16;var TI_INDEX = 17;var LE_INDEX = 18;var DS_INDEX = 19;var BARRACKS_INDEX = 20;var LASER_TURRETS_INDEX = 21;var MISSLE_TURRETS_INDEX = 22;var PLASMA_TURRENTS_INDEX = 23;var ION_TURRETS_INDEX = 24;var PHOTON_TURRETS_INDEX = 25;var DISRUPTOR_TURRETS_INDEX = 26;var DEFLECTION_SHIELDS_INDEX = 27;var PLANETARY_SHIELD_INDEX = 28;var PLANETARY_RING_INDEX = 29;var fightingShips = "11111011100101101111";var shipValues = new Array(5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000);var shipHangarValues = new Array(0,0,0,0,0,0,0,4,4,0,0,4,60,8,40,400,200,1000,4000,10000);var GIAServers = new Array("bravo");}  ////////////////////////////////////////// /// Misc /////////////////////////////////////////////////////////////////////////Array.prototype.inArray = function (value)// Returns true if the passed value is found in the// array. Returns false if it is not.{var i;for (i=0; i < this.length; i++) {// Matches identical (===), not just similar (==).if (this[i] === value) {return true;}}return false;};function replaceTime(){	  for(n=1;n<=500;n++)	  {		elem=document.getElementById(\'time\'+n);	    if (!elem)	    {	       break;	    }	    elem.id = \'blah\'+n;	    s=elem.title;	    var newElement, endTime;	    var d = new Date();	    var now = new Date();	    if (elem)	    {	       if(s<=0)	       {		 endTime="-"	       }	       else	       {		 d.setTime(d.getTime()+(s*1000));		 tempdate = new Date();		 tempdate.setDate(tempdate.getDate()+1)		 if(now.toLocaleDateString() == d.toLocaleDateString() )		 {		    endTime="Today @ "+d.formatDate(\'H:i:s\');		 }		 else if(tempdate.toLocaleDateString() == d.toLocaleDateString())		 {		    endTime="Tomorrow @ "+d.formatDate(\'H:i:s\');		 }		 else		 {		    endTime=d.formatDate(\'D jS M @ H:i:s\');		 }	       }	       elem.innerHTML = "<b><span id=\'time"+n+"\' title=\'"+ s +"\'>-</span></b><br><nobr><span id=\'done"+n+"\' style=\'font-size: xx-small; color: "+getAgeCol(s)+"\'>" + endTime + "</span></nobr>"	    }	  }};  // formatDate :// a PHP date like function, for formatting date strings// authored by Svend Tofte <www.svendtofte.com>// the code is in the public domain//// see http://www.svendtofte.com/javascript/javascript-date-string-formatting/// and http://www.php.net/date//// thanks to//  - Daniel Berlin <mail@daniel-berlin.de>,//    major overhaul and improvements//  - Matt Bannon,//    correcting some stupid bugs in my days-in-the-months list!//  - levon ghazaryan. pointing out an error in z switch.//  - Andy Pemberton. pointing out error in c switch//// input : format string// time : epoch time (seconds, and optional)//// if time is not passed, formatting is based on// the current "this" date object\'s set time.//// supported switches are// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L),// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z//// unsupported (as compared to date in PHP 5.1.3)// T, e, oDate.prototype.formatDate = function (input,time) {    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday",                       "Thursday", "Friday", "Saturday"];    var daysShort =   ["Sun", "Mon", "Tue", "Wed",                       "Thu", "Fri", "Sat"];    var monthsShort = ["Jan", "Feb", "Mar", "Apr",                       "May", "Jun", "Jul", "Aug", "Sep",                       "Oct", "Nov", "Dec"];    var monthsLong =  ["January", "February", "March", "April",                       "May", "June", "July", "August", "September",                       "October", "November", "December"];    var switches = { // switches object        a : function () {            // Lowercase Ante meridiem and Post meridiem            return date.getHours() > 11? "pm" : "am";        },        A : function () {            // Uppercase Ante meridiem and Post meridiem            return (this.a().toUpperCase ());        },        B : function (){            // Swatch internet time. code simply grabbed from ppk,            // since I was feeling lazy:            // http://www.xs4all.nl/~ppk/js/beat.html            var off = (date.getTimezoneOffset() + 60)*60;            var theSeconds = (date.getHours() * 3600) +                             (date.getMinutes() * 60) +                              date.getSeconds() + off;            var beat = Math.floor(theSeconds/86.4);            if (beat > 1000) beat -= 1000;            if (beat < 0) beat += 1000;            if ((String(beat)).length == 1) beat = "00"+beat;            if ((String(beat)).length == 2) beat = "0"+beat;            return beat;        },        c : function () {            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" +                    this.H() + ":" + this.i() + ":" + this.s() + this.P());        },        d : function () {            // Day of the month, 2 digits with leading zeros            var j = String(this.j());            return (j.length == 1 ? "0"+j : j);        },        D : function () {            // A textual representation of a day, three letters            return daysShort[date.getDay()];        },        F : function () {            // A full textual representation of a month            return monthsLong[date.getMonth()];        },        g : function () {           // 12-hour format of an hour without leading zeros, 1 through 12!           if (date.getHours() == 0) {               return 12;           } else {               return date.getHours()>12 ? date.getHours()-12 : date.getHours();           }       },        G : function () {            // 24-hour format of an hour without leading zeros            return date.getHours();        },        h : function () {            // 12-hour format of an hour with leading zeros            var g = String(this.g());            return (g.length == 1 ? "0"+g : g);        },        H : function () {            // 24-hour format of an hour with leading zeros            var G = String(this.G());            return (G.length == 1 ? "0"+G : G);        },        i : function () {            // Minutes with leading zeros            var min = String (date.getMinutes ());            return (min.length == 1 ? "0" + min : min);        },        I : function () {            // Whether or not the date is in daylight saving time (DST)            // note that this has no bearing in actual DST mechanics,            // and is just a pure guess. buyer beware.            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");            return (noDST.getTimezoneOffset () ==                    date.getTimezoneOffset () ? 0 : 1);        },        j : function () {            // Day of the month without leading zeros            return date.getDate();        },        l : function () {            // A full textual representation of the day of the week            return daysLong[date.getDay()];        },        L : function () {            // leap year or not. 1 if leap year, 0 if not.            // the logic should match iso\'s 8601 standard.            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html            var Y = this.Y();            if (                (Y % 4 == 0 && Y % 100 != 0) ||                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)                ) {                return 1;            } else {                return 0;            }        },        m : function () {            // Numeric representation of a month, with leading zeros            var n = String(this.n());            return (n.length == 1 ? "0"+n : n);        },        M : function () {            // A short textual representation of a month, three letters            return monthsShort[date.getMonth()];        },        n : function () {            // Numeric representation of a month, without leading zeros            return date.getMonth()+1;        },        N : function () {            // ISO-8601 numeric representation of the day of the week            var w = this.w();            return (w == 0 ? 7 : w);        },        O : function () {            // Difference to Greenwich time (GMT) in hours            var os = Math.abs(date.getTimezoneOffset());            var h = String(Math.floor(os/60));            var m = String(os%60);            h.length == 1? h = "0"+h:1;            m.length == 1? m = "0"+m:1;            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;        },        P : function () {            // Difference to GMT, with colon between hours and minutes            var O = this.O();            return (O.substr(0, 3) + ":" + O.substr(3, 2));        },        r : function () {            // RFC 822 formatted date            var r; // result            //  Thu         ,     21               Dec              2000            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +            //    16          :    01          :    07               0200            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();            return r;        },        s : function () {            // Seconds, with leading zeros            var sec = String (date.getSeconds ());            return (sec.length == 1 ? "0" + sec : sec);        },        S : function () {            // English ordinal suffix for the day of the month, 2 characters            switch (date.getDate ()) {                case  1: return ("st");                case  2: return ("nd");                case  3: return ("rd");                case 21: return ("st");                case 22: return ("nd");                case 23: return ("rd");                case 31: return ("st");                default: return ("th");            }        },        t : function () {            // thanks to Matt Bannon for some much needed code-fixes here!            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];            if (this.L()==1 && this.n()==2) return 29; // ~leap day            return daysinmonths[this.n()];        },        U : function () {            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)            return Math.round(date.getTime()/1000);        },        w : function () {            // Numeric representation of the day of the week            return date.getDay();        },        W : function () {            // Weeknumber, as per ISO specification:            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            var DoW = this.N ();            var DoY = this.z ();            // If the day is 3 days before New Year\'s Eve and is Thursday or earlier,            // it\'s week 1 of next year.            var daysToNY = 364 + this.L () - DoY;            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {                return 1;            }            // If the day is within 3 days after New Year\'s Eve and is Friday or later,            // it belongs to the old year.            if (DoY <= 2 && DoW >= 5) {                return new Date (this.Y () - 1, 11, 31).formatDate ("W");            }            var nyDoW = new Date (this.Y (), 0, 1).getDay ();            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier                return (1 + Math.floor ((DoY + nyDoW) / 7));            } else {  // First day of the year is a Friday or later                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));            }        },        y : function () {            // A two-digit representation of a year            var y = String(this.Y());            return y.substring(y.length-2,y.length);        },        Y : function () {            // A full numeric representation of a year, 4 digits            // we first check, if getFullYear is supported. if it            // is, we just use that. ppks code is nice, but wont            // work with dates outside 1900-2038, or something like that            if (date.getFullYear) {                var newDate = new Date("January 1 2001 00:00:00 +0000");                var x = newDate .getFullYear();                if (x == 2001) {                    // i trust the method now                    return date.getFullYear();                }            }            // else, do this:            // codes thanks to ppk:            // http://www.xs4all.nl/~ppk/js/introdate.html            var x = date.getYear();            var y = x % 100;            y += (y < 38) ? 2000 : 1900;            return y;        },        z : function () {            // The day of the year, zero indexed! 0 through 366            var s = "January 1 " + this.Y() + " 00:00:00 GMT" + this.O();            var t = new Date(s);            var diff = date.getTime() - t.getTime();            return Math.floor(diff/1000/60/60/24);        },        Z : function () {            // Timezone offset in seconds            return (date.getTimezoneOffset () * -60);        }    }    function getSwitch(str) {        if (switches[str] != undefined) {            return switches[str]();        } else {            return str;        }    }    var date;    if (time) {        var date = new Date (time);    } else {        var date = this;    }    var formatString = input.split("");    var i = 0;    while (i < formatString.length) {        if (formatString[i] == "%") {            // this is our way of allowing users to escape stuff            formatString.splice(i,1);        } else {            formatString[i] = getSwitch(formatString[i]);        }        i++;    }    return formatString.join("");}// Some (not all) predefined format strings from PHP 5.1.1, which// offer standard date representations.// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants//// Atom      "2005-08-15T15:52:01+00:00"Date.DATE_ATOM    = "Y-m-d%TH:i:sP";// ISO-8601  "2005-08-15T15:52:01+0000"Date.DATE_ISO8601 = "Y-m-d%TH:i:sO";// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"Date.DATE_RFC2822 = "D, d M Y H:i:s O";// W3C       "2005-08-15 15:52:01+00:00"Date.DATE_W3C     = "Y-m-d%TH:i:sP";function getAgeCol(age) {		var col = \'#461B7E\'; // 72 hours +		if (age <= 3600)			col = \'#FFFFFF\'; // 1 hour		else if (age <=10800)			col = \'#FFFFFF\'; // 3 hours		else if (age <=21600)			col = \'#9E7BFF\'; // 6 hours		else if (age <=43200)			col = \'#9172EC\'; // 12 hours		else if (age <=86400)			col = \'#8467D7\'; // 24 hours		else if (age <=172800)			col = \'#7A5DC7\'; // 48 hours		else if (age <=259200)			col = \'#461B7E\'; // 72 hours		return col;}function debrisShow(){	spanArray = document.getElementsByTagName("span")	for(i=0; i<spanArray.length; i++){		if(spanArray[i].getAttribute("class") == "gray"){		spanArray[i].innerHTML = spanArray[i].title		}	}}function formatVariousNumbers(){	var debrisElement = document.evaluate(    "//center[contains(text(),\'Debris\')]",    document,    null,    XPathResult.FIRST_ORDERED_NODE_TYPE,    null).singleNodeValue;    if(debrisElement !=null)    {        var debrisMessage = debrisElement.textContent;        console.log(debrisMessage);        var indexOfText = debrisMessage.indexOf(" credits");        var valueText = debrisMessage.substring(0,indexOfText);        var value = commaFormat(parseInt(valueText));        //console.log(valueText+" new value:" +value.toString());        //console.log(debrisElement.textContent + " -< " + debrisElement.textContent.replace(valueText,value.toString()));        debrisElement.textContent = debrisElement.textContent.replace(valueText,value.toString());    }}function scannerFormat(){	baseArray=document.getElementsByTagName("a")	bases = GM_getValue(server+"Bases")	for(i=0; i<baseArray.length; i++){		if(baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){			basecoord=baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)			if(bases.match(basecoord)){			baseArray[i].setAttribute("style", "color: red; font-weight: normal;")			}		}	}}var galaxyInfoArrays = new Array();function getGalaxyInfoArray(galaxy){	if(galaxyInfoArrays[galaxy]==undefined)	{		var newArray = new Array(20);		for(var i = 0; i < 20;i++)		{			newArray[i] = 0;		}		galaxyInfoArrays[galaxy] = new Array(galaxy,0,newArray,0,0);//[galaxy number],[mobile fleet count],[mobilefleetarray],[total fighting fleet],[total fleet],	}	return galaxyInfoArrays[galaxy];}function isBase(base){	bases = GM_getValue(server+"Bases")    if(bases==null)    return false;    if(bases.match(base)){        return true;    }else{    return false;	}}function insertTotalsRow(node,sums,mobileSums,fleetCount,mobileFleetCount,overallFleetTotal,overallFightingFleetTotal,overallMobileFleetTotal,overallMobileFightingFleetTotal){    	//GALAXY ROWS	for(var i = 0;i<galaxyInfoArrays.length;i++)	{		var galaxyInfoArray = galaxyInfoArrays[i];		if(galaxyInfoArray==undefined || galaxyInfoArray[1] == 0)			continue;				var sumRow = document.createElement("tr");	    sumRow.setAttribute(\'align\',\'center\');	    	    var element = sumRow.insertCell(0);	    element.textContent = "Mobile Fleets ("+i+")";	    element = sumRow.insertCell(1);	    element.textContent = galaxyInfoArray[1];	    		var galaxyFleetSums = galaxyInfoArray[2];		for(var k = 0; k < 20; k++)	    {	        //console.log(sums[k]);	        var cell = document.createElement("td");	        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	        if(galaxyFleetSums[k] > 0)				cell.innerHTML = "<small>"+galaxyFleetSums[k]+"</small>";	        //console.log(element);	        sumRow.insertBefore(cell,null);	    }	    //Add totals cell	    var cell = document.createElement("td");	    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	    cell.innerHTML =galaxyInfoArray[3] +" / "+ galaxyInfoArray[4];	    //console.log(element);	    sumRow.insertBefore(cell,null);	    node.insertBefore(sumRow,null);	}	//MOBILE ROW	var sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    var element = sumRow.insertCell(0);    element.textContent = "Total Mobile Fleets";    element = sumRow.insertCell(1);    element.textContent = mobileFleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(mobileSums[k] > 0)			cell.innerHTML = "<small>"+mobileSums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallMobileFightingFleetTotal +" / "+ overallMobileFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);    //TOTAL ROW    sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    element = sumRow.insertCell(0);    element.textContent = "Total Fleets";    element = sumRow.insertCell(1);    element.textContent = fleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(sums[k] > 0)			cell.innerHTML = "<small>"+sums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallFightingFleetTotal +" / "+ overallFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);}function node(opt) {  function attr(name) {    var value = opt[name];    delete opt[name];    return value;  }  var expandos = { id: 1, className: 1, title: 1, type: 1, checked: 1 };  var id = opt.id;  var n = document.getElementById(id);  if (!n) {    var tag = attr("tag") || "div";    if ("string" == typeof tag)      n = document.createElement(tag);    else {      var t = document.createElement("div");      t.innerHTML = tag.toXMLString();      var ids = {};      for each (var n in $x(\'.//*[@id]\', t))        ids[n.id] = 1;      if (!n) ids = null;      var r = document.createRange();      r.selectNodeContents(t);      n = r.extractContents();      if (n.childNodes.length == 1)        n = n.firstChild;    }    var after = attr("after");    var before = opt.prepend ? opt.prepend.firstChild : attr("before");    var parent = attr("prepend") || attr("append") ||                   (before || after || {}).parentNode;    if (parent) {      if (before)        parent.insertBefore(n, before);      else if (after)        parent.insertBefore(n, after.nextSibling);      else        parent.appendChild(n);    }    if (id) n.id = id;  }  var html = attr("html");  if ("undefined" != typeof html) n.innerHTML = html;  var text = attr("text");  if ("undefined" != typeof text) n.textContent = text;  var style = attr("style");  if (style)    for (var prop in style)      n.style[prop] = style[prop];  for (prop in opt)    if (expandos[prop])      n[prop] = opt[prop];    else      n.setAttribute(prop, opt[prop]+"");  if (ids)    for (var id in ids)      ids[id] = document.getElementById(id);  return ids || n;}function enhanceConstructionPage() {  urbanAdjust = 0;  solarAdjust = 0;  gasAdjust = 0;  fusionAdjust = 0;  antimatterAdjust = 0;  researchAdjust = 0;  metalAdjust = 0;  crystalAdjust = 0;  roboticsAdjust = 0;  shipyardsAdjust = 0;  osAdjust = 0;  spaceportsAdjust = 0;  ccAdjust = 0;  naniteAdjust = 0;  androidAdjust = 0;  economicAdjust = 0;  terraformAdjust = 0;  mlpAdjust = 0;  orbitalbaseAdjust = 0;  jgAdjust = 0;  biosphereAdjust = 0;  capitalAdjust = 0;  barrackAdjust = 0;  laserAdjust = 0;  missileAdjust = 0;  plasmabaseAdjust = 0;  ionAdjust = 0;  photonAdjust = 0;  disruptorAdjust = 0;  deflectionAdjust = 0;  pshieldAdjust = 0;  pringAdjust = 0;  tableArray = document.getElementsByTagName("table")  for(i=0; i<tableArray.length; i++){  if(tableArray[i].innerHTML.match(/<th colspan=.2.>Construction Queue<.th>/)){  for(a=1; a<tableArray[i].childNodes[0].childNodes.length; a++){  if(!tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/<select name=.add_stack.>/)){  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Urban Structures/))  urbanAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Solar Plants/))  solarAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Gas Plants/))  gasAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Fusion Plants/))  fusionAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Antimatter Plants/))  antimatterAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Research Labs/))  researchAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Metal Refineries/))  metalAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Crystal Mines/))  crystalAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Robotic Factories/))  roboticsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Shipyards/) && !tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  shipyardsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  osAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Spaceports/))  spaceportsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Command Centers/))  ccAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Nanite Factories/))  naniteAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Androids Factories/))  androidAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Economic Centers/))  economicAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Terraform/))  terraformAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Multi-Level Platforms/))  mlpAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Base/))  orbitalbaseAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Jump Gate/))  jgAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Biosphere Modification/))  biosphereAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Capital/))  capitalAdjust++;}  }  }  }	table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;	var i_lastcolumn = 5;	var forms = document.getElementsByTagName(\'form\');	if (!table.innerHTML.match(/The research of this base is linked to/)){	if (table && table.childNodes.length > 4) {		table.childNodes[0].style.display=\'none\';		table.childNodes[2].style.display=\'none\';		for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {			if(!table.childNodes[nrow].innerHTML.match(/Research Labs linked to this base research./)){			table.childNodes[nrow+1].style.display=\'none\';			}		}	}	techmultipliers=GM_getValue(server+"techData", "0").split(",")	var energytechmultiplier = (techmultipliers[0]*0.05)+1;	var averageroute = GM_getValue(server+"averageRoute", "31");	var fertility = 0;	var uspopcost = 0;	var obpopcost = 0;	var obcostparentnode = 0;	var popcost = 0;	var areacost = 0;	var energycost = 0;	var econcost = 0;	var prodcost = 0;	var constcost = 0;	var flag = 0;	var bestAreaSignifier = node({tag: \'span\', html: \' <br /> (Best Area)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEconSignifier = node({tag: \'span\', html: \' <br /> (Best Econ)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestProdSignifier = node({tag: \'span\', html: \' <br /> (Best Prod)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestConstSignifier = node({tag: \'span\', html: \' <br /> (Best Const)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestPopSignifier = node({tag: \'span\', html: \' <br /> (Best Pop)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEnergySignifier = node({tag: \'span\', html: \' <br /> (Best Energy)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {		if(!table.childNodes[nrow].innerHTML.match(/linked to this base research./)){		var cname = table.childNodes[nrow].childNodes[1].firstChild.firstChild.firstChild.firstChild.nodeValue + table.childNodes[nrow].childNodes[1].firstChild.firstChild.childNodes[1].nodeValue;		if (location.search.indexOf(\'view=structures\')!=-1) {			table.childNodes[nrow].title = cname;			var td1help_res = table.childNodes[nrow+1].innerHTML.match(/(fertility|metal resource|crystals resource).\\((.+?)\\)/)			if (td1help_res) {			if (flag == 0){				if(td1help_res[1]=="fertility"){				var td1help = "&nbsp;(Fert "+td1help_res[2]+")"				}else if(td1help_res[1]=="metal resource"){				var td1help = "&nbsp;(Metal "+td1help_res[2]+")"				}else if(td1help_res[1]=="crystals resource"){				var td1help = "&nbsp;(Crystal "+td1help_res[2]+")"				}				var d = table.childNodes[nrow].childNodes[1].innerHTML + td1help;				table.childNodes[nrow].childNodes[1].innerHTML = d				}			}				if (cname==\'Terraform\') {				makeAdjustments(nrow, terraformAdjust)				terracost = parseInt(itemcost) / 5;					if(areacost == 0 || areacost > terracost){					areacost = terracost					table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Multi-Level Platforms\') {				adjust = mlpAdjust				makeAdjustments(nrow, mlpAdjust)					var cost = parseInt(itemcost) / 10;					if (cost < areacost) {						areacost = cost;						bestAreaSignifier.parentNode.removeChild(bestAreaSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Urban Structures\') {				makeAdjustments(nrow, urbanAdjust)          USLevel = table.childNodes[nrow].childNodes[1].innerHTML.match(/\\(Level [0-9]{1,}/);          USLevel = parseInt(USLevel[0].replace(/\\(Level /, ""));					fertility = parseInt(td1help_res[2]);					uspopcost = parseInt(itemcost);					uspopcost = (uspopcost+areacost) / fertility;					if (popcost == 0 || popcost > uspopcost){					popcost = uspopcost;					table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);					}				}				if (cname==\'Orbital Base\') {				makeAdjustments(nrow, orbitalbaseAdjust)					obpopcost = parseInt(itemcost) / 10;					obcostparentnode = table.childNodes[nrow].childNodes[2];					if (obpopcost && obpopcost < popcost) {						popcost = obpopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);								}				}								if (cname==\'Solar Plants\' || cname==\'Gas Plants\' || cname==\'Fusion Plants\' || cname==\'Antimatter Plants\') {				if(cname==\'Solar Plants\'){				adjust = solarAdjust				}else if(cname==\'Gas Plants\'){				adjust = gasAdjust				}else if(cname==\'Fusion Plants\'){				adjust = fusionAdjust				}else if(cname==\'Antimatter Plants\'){				adjust = antimatterAdjust				}makeAdjustments(nrow, adjust)					var c = parseInt(itemcost);					var e = parseInt(table.childNodes[nrow].childNodes[3].firstChild.nodeValue.slice(1));					c = (c + popcost + areacost) / (energytechmultiplier*e);					if (e>2){					if (!energycost)						energycost = c;					if (c <= energycost) {						energycost = c;						if (bestEnergySignifier.parentNode)							bestEnergySignifier.parentNode.removeChild(bestEnergySignifier);							table.childNodes[nrow].childNodes[2].appendChild(bestEnergySignifier);					}					}				}				if (cname == "Biosphere Modification"){makeAdjustments(nrow, biosphereAdjust)          var biopopcost = parseInt(itemcost);					biopopcost = (biopopcost+(24*energycost)+areacost)/USLevel										if (biopopcost < popcost) {						popcost = biopopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);																	}				}				if (cname == "Metal Refineries"){				makeAdjustments(nrow, metalAdjust)				var metal = parseInt(td1help_res[2]);				var metalcost = parseInt(itemcost);				metalprodcost = (metalcost + energycost + areacost + popcost)/ metal				metalconstcost = (metalcost + energycost + areacost + popcost)/ metal				metaleconcost = (metalcost + energycost + areacost + popcost)          	if(econcost == 0 || econcost > metaleconcost){          	econcost = metaleconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost == 0 || prodcost > metalprodcost){          	prodcost = metalprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost == 0 || constcost > metalconstcost){          	constcost = metalconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Crystals Mines"){				makeAdjustments(nrow, crystalAdjust)				var crystals = parseInt(td1help_res[2]);				var crystalcost = parseInt(itemcost);				crystalcost = (crystalcost + energycost + areacost)/ crystals          	if(econcost > crystalcost){          	econcost = crystalcost;													table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}			}				if (cname == "Robotic Factories"){				makeAdjustments(nrow, roboticsAdjust)				var robscost = parseInt(itemcost);				robsprodcost = (robscost + energycost + areacost + popcost)/ 2				robsconstcost = (robscost + energycost + areacost + popcost)/ 2				robseconcost = (robscost + energycost + areacost + popcost)          	if(econcost > robseconcost){          	econcost = robseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > robsprodcost){          	prodcost = robsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > robsconstcost){          	constcost = robsconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Shipyards"){				makeAdjustments(nrow, shipyardsAdjust)				var shipscost = parseInt(itemcost);				shipsprodcost = (shipscost + energycost + areacost + popcost)/ 2        shipseconcost = (shipscost + energycost + areacost + popcost)          	if(econcost > shipseconcost){          	econcost = shipseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > shipsprodcost){          	prodcost = shipsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Orbital Shipyards"){				makeAdjustments(nrow, osAdjust)				var oscost = parseInt(itemcost);				osprodcost = (oscost + (energycost*12) + popcost)/8        oseconcost = (oscost + (energycost*12) + popcost)/2          	if(econcost > oseconcost){          	econcost = oseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > osprodcost){          	prodcost = osprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Spaceports"){				makeAdjustments(nrow, spaceportsAdjust)				var Spcost = parseInt(itemcost);				Spcost = (Spcost + energycost + areacost)/ 2          	if(econcost > Spcost){          	econcost = Spcost;							table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}				if (cname == "Nanite Factories"){				makeAdjustments(nrow, naniteAdjust)				var nanicost = parseInt(itemcost);				naniprodcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				naniconstcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				nanieconcost = (nanicost + (energycost*2) + areacost + popcost) /2          	if(econcost > nanieconcost){          	econcost = nanieconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > naniprodcost){          	prodcost = naniprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > naniconstcost){          	constcost = naniconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Androids Factories"){				makeAdjustments(nrow, androidAdjust)				var andrcost = parseInt(itemcost);				andrprodcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andrconstcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andreconcost = (andrcost + (energycost*4) + areacost + popcost) /2          	if(econcost > andreconcost){          	econcost = andreconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > andrprodcost){          	prodcost = andrprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > andrconstcost){          	constcost = andrconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}								if (cname == "Economic Centers"){				makeAdjustments(nrow, economicAdjust)				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*2) + areacost + popcost) /3          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}        if (cname == "Capital"){        makeAdjustments(nrow, capitalAdjust)				basesArray = GM_getValue(server+"Bases")				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*12) + areacost + popcost) / (10+basesArray.length)          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}				        if (cname == "Research Labs"){        makeAdjustments(nrow, researchAdjust)				}					        if (cname == "Command Centers"){        makeAdjustments(nrow, ccAdjust)				}		if (flag == 0){				    	getOptionValue(cname);		if (v==1) {		buttontext=document.createElement("a")		buttontext.href="javascript:document.getElementsByName(\'add_stack\')[0].selectedIndex="+a+"; document.getElementsByTagName(\'form\')[1].submit()"		buttontext.innerHTML = "Queue"			if (buttontext) {			if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){			colnum=3			}else{			colnum=5			}				table.childNodes[nrow].childNodes[colnum].style.whiteSpace=\'nowrap\';				table.childNodes[nrow].childNodes[colnum].appendChild(buttontext);			}	}	if (flag == 0 && nrow==table.childNodes.length-1){						flag =1;						nrow = 1;						}		}}}}}function buttonToSelect(option, text, fallback_text) {}function makeAdjustments(nrow, adjustvar){adjust = adjustvar				if(table.childNodes[nrow].childNodes[6].innerHTML.match(/<span id="time/)){				adjust++ 				}				if(adjust>0){				basecost = parseInt(table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, ""))				time = getSeconds(table.childNodes[nrow].childNodes[5].firstChild.nodeValue)/basecost				time = secsToHMS(time*(Math.round(basecost*Math.pow(1.5, adjust))))				table.childNodes[nrow].childNodes[5].innerHTML = table.childNodes[nrow].childNodes[5].innerHTML + "<br />("+time+") "        table.childNodes[nrow].childNodes[1].innerHTML = table.childNodes[nrow].childNodes[1].innerHTML + " (+"+adjust+")"        table.childNodes[nrow].childNodes[2].firstChild.nodeValue = table.childNodes[nrow].childNodes[2].firstChild.nodeValue + " ("+Math.round((basecost*Math.pow(1.5, adjust)))+")"        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        itemcost = itemcost.replace(/[0-9]+\\(/,"")        itemcost = itemcost.replace(/\\)/, "")        }else{        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        }        }function secsToHMS(seconds){        secVar0 = Math.round(seconds);                            // The initial data, in seconds        minVar = Math.floor(secVar0/60);  // The minutes           hourVar = Math.floor(minVar/60);  // The minutes        minVar = minVar % 60;        secVar = secVar0 % 60;              // The balance of seconds        if(hourVar != 0){        return hourVar+"h "+(minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else if(minVar != 0){        return (minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else{        return (secVar<10?\'0\'+secVar:secVar)+"s"        }                }function getOptionValue(obj){v=0x = document.getElementsByName("add_stack")if(x[0]){x = x[0]for (i=0;i<x.length;i++)    {    if(x.options[i].text == obj){    v=1;	a=i    i = x.length    }    }    }    }/*function insertTimeTextBoxes(){    var inputs = document.forms[1].elements;    for(var i = 0; i < inputs.length; i++)    {        if(inputs[i].className == \'quant\')        {            var row = inputs[i].parentNode.parentNode;            //console.log(row);            var cell = document.createElement("td");            cell.setAttribute("align","center");            cell.innerHTML = \'<input type="text" value="" maxlength="5" size="5" name="\'+inputs[i].name+\' - Time" id="\'+inputs[i].name+\' - Time" class="quant" onchange="update(\\\'\'+inputs[i].name+\'\\\')"/>\';            row.appendChild(cell);            cell.addEventListener(\'keyup\',getConvertTimeToQuantityClosure(row),true);			//cell.addEventListener(\'blur\',onProductionTextBoxChanged,true);        }    }        var tbody = inputs[0].parentNode.parentNode.parentNode;    //console.log(tbody.childNodes[0].firstChild);    //Adjust colspan for top row and third row    tbody.childNodes[0].firstChild.setAttribute("colspan",7);    tbody.childNodes[2].firstChild.setAttribute("colspan",7);    //console.log(tbody.childNodes[1].firstChild);    //Insert column title    var titleCell = document.createElement("th");    titleCell.setAttribute("width","10%");    titleCell.textContent = "Time (h)"    tbody.childNodes[1].appendChild(titleCell);		titleCell.previousSibling.setAttribute("width","10%");    //adjust colspan for all help rows    var helpCells = document.evaluate(    "//td[@class=\'help\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(helpCells.snapshotLength);    for(var i=0;i<helpCells.snapshotLength;i++)    {        helpCells.snapshotItem(i).setAttribute("colspan",6);    }    //adjust colspan for all red rows    var redCells = document.evaluate(    "//td[@class=\'red\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(redCells.snapshotLength);    for(var i=0;i<redCells.snapshotLength;i++)    {        redCells.snapshotItem(i).setAttribute("colspan",2);    }    //adjust colspan for last two rows    document.getElementById("fast").addEventListener("click", function(){var inputs = document.forms[1].elements; for(var i = 0; i < inputs.length; i++){if(inputs[i].className == \'quant\'){if(inputs[i].value == ""){}else{var row = inputs[i].parentNode.parentNode; convertTimeToQuantity(row); unsafeWindow.update(inputs[i].name);}}}}, false)    tbody.childNodes[tbody.childNodes.length-1].firstChild.setAttribute("colspan",7);}*/function getConvertTimeToQuantityClosure(row){    function func(){        convertTimeToQuantity(row);    }    ;    return func;}function convertTimeToQuantity(row){	//console.log(row);    var credits = row.childNodes[2].textContent;    var time = row.childNodes[4].textContent;    var qtyInput = row.childNodes[5].firstChild;    var enteredTime;    try{        enteredTime = parseFloat(row.childNodes[6].firstChild.value);    }    catch(Exception)    {        return;    }    if(isNaN(enteredTime)){    enteredTime = 0    }else{    //console.log("Credits: "+credits+" Time: "+time+" qtyInput: "+ qtyInput.value);    //console.log("entered time: "+isNaN(enteredTime));    var totalSeconds = getSeconds(time);    if(totalSeconds != -1)    {        //console.log("Time " +getTimeDisplay(totalSeconds));        var enteredTimeInSeconds = enteredTime*60*60;        //console.log(enteredTimeInSeconds+" / " +totalSeconds);        if(enteredTimeInSeconds < totalSeconds){			qtyInput.value = "";		}else{			if(document.getElementById("fast").checked == true){			qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)*2			}else{				qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)			}		}    }    onProductionTextBoxKeyUp();    }}function getSeconds(timeString){    var regex = /((\\d|,| |\\.)*h)?\\W?((\\d|,| |\\.)*m)?\\W?((\\d|,| |\\.)*s)?/;    var result = regex.exec(timeString);    if(result)    {        //console.log(result);        var h = 0;var m=0;var s=0;        if(result[1] != null)        h = result[1].substring(0,result[1].indexOf("h"));        if(result[3] != null)        m = result[3].substring(0,result[3].indexOf("m"));        if(result[5] != null)        s = result[5].substring(0,result[5].indexOf("s"));        return h*60*60 + m*60 + s*1;    }    else return -1;}function getTimeDisplay(seconds){    var h = Math.floor(seconds/3600);    var m = Math.floor((seconds % 3600)/60);    var s = Math.floor((seconds % 3600) % 60);    var string = s+"s";    if(m>0 || h>0)		string = m+"m "+string;    if(h>0)		string = h+"h "+string;    return string;}var PRESET_KEYS = new Array("Fighters","Bombers","Heavy Bombers","Ion Bombers","Corvette","Recycler","Destroyer","Frigate","Ion Frigate","Scout Ship", "Outpost Ship","Cruiser","Carrier","Heavy Cruiser","Battleship","Fleet Carrier","Dreadnought","Titan","Leviathan","Death Star","Goods");function onProductionTextBoxKeyUp(){    var shipName;    var count=0,cost=0;    var productionCost = 0;    var totalTime = 0;    for(var i = 0;i <PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.log("Failed to find textBox for "+shipName+".");            continue;        }				if(textBox.value != "")        {            var row = textBox.parentNode.parentNode;            var time = row.childNodes[4].textContent;            //console.log(textBox.value);            count = parseInt(textBox.value);            cost = parseInt(textBox.parentNode.previousSibling.previousSibling.previousSibling.innerHTML.replace(/(,| |\\.)/g, ""));            totalTime+= getSeconds(time) * count;            //console.log(count + " " + shipName + "s @ " + cost);            productionCost += (cost * count);			//textBox.parentNode.nextSibling.value = "";        }    }    //console.log("total Time: "+getTimeDisplay(totalTime));    var fastProduction = document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.checked;    //console.info(fastProduction);    if(fastProduction)	{		productionCost *= 2;		totalTime /= 2;	}    //console.log("Text changed. Total production cost: " +productionCost);    var submitButton = document.evaluate(	    "//input[@type=\'submit\']",	    document,	    null,	    XPathResult.FIRST_ORDERED_NODE_TYPE,	    null).singleNodeValue;    if(productionCost > 0)		submitButton.value = "Submit";    else		submitButton.value = "Submit";}function registerTextBoxEventListeners(){    for(var i = 0;i < PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.info("Failed to find textBox for "+shipName+".");            continue;        }        textBox.addEventListener(\'keyup\',onProductionTextBoxKeyUp,false);		//textBox.addEventListener(\'blur\',onProductionTextBoxChanged,true);    }    document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'change\',onProductionTextBoxKeyUp,false);    //document.evaluate("//input[@type=\'reset\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'click\',onProductionTextBoxKeyUp,true);    document.evaluate("//form[@method=\'post\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'reset\',onProductionTextBoxKeyUp,false);}function productionHelperOnClick(num, box) {	num=num.replace("+", "")	num=num.replace(" ","")	num=num.replace("k","000")		document.getElementById(box).value = parseInt(document.getElementById(box).value) + parseInt(num);     calculateTotals();}function prodHelperEvent(e) {  if (e.shiftKey && (e.name == \'fast\')) {    for (i=0; i<empireLinks.length; i++) {    document.getElementById("fast_"+empireLinks[i]).checked = e.checked;    }  } else if (e.shiftKey && (e.name == \'unit\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("unit_"+empireLinks[i]).selectedIndex = e.selectedIndex;    }  } else if (e.shiftKey && (e.name == \'quant\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("quant_"+empireLinks[i]).value = e.value;    }  }  if ((e.name == \'fast\')||(e.name == \'unit\')||(e.name == \'quant\'))    calculateTotals();}function calculateTotals() {	var pcost = 0;  for (i=0; i<empireLinks.length; i++) {    n = (document.getElementById("fast_"+empireLinks[i]).checked) ? 2 : 1;    pcost += parseInt(ProductionGetCost[document.getElementById("unit_"+empireLinks[i]).selectedIndex] * document.getElementById("quant_"+empireLinks[i]).value * n);	}	document.getElementById(\'cost_all\').innerHTML = pcost+\' credits\';	var credits_left = parseInt(numcredits) - pcost;	document.getElementById(\'cost_all\').style.color = (credits_left < 0) ? \'red\' : \'\';}function resetForm() {  for (i=0; i<empireLinks.length; i++) {    document.getElementById("unit_"+empireLinks[i]).selectedIndex = 0;    document.getElementById("fast_"+empireLinks[i]).checked = false;    document.getElementById("quant_"+empireLinks[i]).value = 0;    returnto = i    calculateTotals();    i=returnto;  }}function startSubmitQueue() {  submitQueue(0);}function submitQueue(i) {    if (document.getElementById("quant_"+empireLinks[i]).value != 0) {      var postData = document.getElementById("unit_"+empireLinks[i]).value+"="+document.getElementById("quant_"+empireLinks[i]).value+"&post_back=true";      if (document.getElementById("fast_"+empireLinks[i]).checked)        postData += "&fast=true";      document.getElementById("quant_"+empireLinks[i]).value = \'ok\';      document.getElementById("quant_"+empireLinks[i]).style.backgroundColor = \'red\';      GM_xmlhttpRequest({        method: "POST",        url: serverurl+"base.aspx?base="+empireLinks[i]+"&view=production",        data: encodeURI(postData),        headers:{\'Content-type\':\'application/x-www-form-urlencoded\'},     		onreadystatechange: function(xhr) {if (xhr.readyState == "4") {endSubmitQueue(i, "1");}}      });    } else {      endSubmitQueue(i, "0");    }}function endSubmitQueue(i, value) {time=1000+Math.floor(Math.random()*1001)  if (i == empireLinks.length-1)    window.setTimeout(function(){ location.reload(true)}, time);  else  if(value == 0){  submitQueue(i+1)  }else{    window.setTimeout(function(){ submitQueue(i+1)}, time);    }}function productionHelper() {  var btn_details = [];  btn_details.push([1,\'+1 \']);  btn_details.push([5,\'+5 \']);  btn_details.push([10,\'+10 \']);  btn_details.push([25,\'+25 \']);  btn_details.push([100,\'+100 \']);  btn_details.push([250,\'+250 \']);  btn_details.push([1000,\'+1k \']);  table.rows[1].childNodes[4].innerHTML = \'Fast Prod\';  table.rows[1].childNodes[5].innerHTML = \'Unit Type\';  table.rows[1].childNodes[6].innerHTML = \'Quantity\';  table.rows[1].childNodes[3].innerHTML = \'Current Queue\';  a=0;  table.firstChild.style.display=\'none\';  for (i=2; i<table.rows.length; i=i+2) {    var currentRow = table.rows[i];		var res = /\\?base=((\\d|,| |\\.)+)/.exec(table.rows[i].childNodes[0].firstChild.href);	  table.rows[i+1].style.display = \'none\';	  empireLinks[a] = res[1];	  a++;	  currentRow.childNodes[3].innerHTML = currentRow.childNodes[5].innerHTML + "<br />" + table.rows[i+1].childNodes[3].innerHTML    currentRow.childNodes[4].innerHTML = "<input type=\'checkbox\' name=\'fast\' class=\'check\' id=\'fast_"+res[1]+"\' onfocus=\\"selectedBox=\'fast_"+res[1]+"\'\\" />";    currentRow.childNodes[6].innerHTML = "<input type=\'text\' name=\'quant\' class=\'quant\' id=\'quant_"+res[1]+"\' size=\'5\' maxlength=\'5\' value=\'0\' onfocus=\\"selectedBox=\'quant_"+res[1]+"\'\\" />";    var html = "<select name=\'unit\' id=\'unit_"+res[1]+"\' onfocus=\\"selectedBox=\'unit_"+res[1]+"\'\\"><option value=\'Fighters\'>Fighters</option><option value=\'Bombers\'>Bombers</option>";    html += "<option value=\'Heavy Bombers\'>Heavy Bombers</option><option value=\'Ion Bombers\'>Ion Bombers</option><option value=\'Corvette\'>Corvette</option>";    html += "<option value=\'Recycler\'>Recycler</option><option value=\'Destroyer\'>Destroyer</option><option value=\'Frigate\'>Frigate</option>"    html += "<option value=\'Ion Frigate\'>Ion Frigate</option><option value=\'Scout Ship\'>Scout Ship</option><option value=\'Outpost Ship\'>Outpost Ship</option>";    html += "<option value=\'Cruiser\'>Cruiser</option><option value=\'Carrier\'>Carrier</option><option value=\'Heavy Cruiser\'>Heavy Cruiser</option>";    html += "<option value=\'Battleship\'>Battleship</option><option value=\'Fleet Carrier\'>Fleet Carrier</option><option value=\'Dreadnought\'>Dreadnought</option>";    html += "<option value=\'Titan\'>Titan</option><option value=\'Leviathan\'>Leviathan</option><option value=\'Death Star\'>Death Star</option></select>";    currentRow.childNodes[5].innerHTML = html;    document.getElementById("unit_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("quant_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("fast_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    for(c=0; c<7; c++) {      var num = btn_details[c][0];      l = document.createElement("a");		l.href = "javascript:void(1);";		l.id= i + btn_details[c][1];		l.innerHTML = btn_details[c][1];            l.name = "quant_"+res[1];      currentRow.childNodes[6].appendChild(l);      document.getElementById(i + btn_details[c][1]).addEventListener(\'click\', function(){ productionHelperOnClick(this.innerHTML, this.name );}, true);    }  }  l = document.createElement("tr");  l.id="extrarow1";  table.appendChild(l);  l = document.createElement("td");		l.innerHTML = "0 credits";      l.className = \'help\';      l.align = "right";      l.id="cost_all"      document.getElementById("extrarow1").appendChild(l);      document.getElementById("cost_all").colSpan="7";      l = document.createElement("tr");      l.id="extrarow2";      table.appendChild(l);      l = document.createElement("td");      l.className = \'help\';      l.align = "right";          l.id="prodHelperButtons"      document.getElementById("extrarow2").appendChild(l);      document.getElementById("prodHelperButtons").colSpan="7";      l = document.createElement("input");      l.type = "reset";      l.id = "resetButton";      l.value = "Reset";      document.getElementById("prodHelperButtons").appendChild(l);      l = document.createElement("input");      l.type = "submit";      l.id = "submitButton";      l.value = "submit";      document.getElementById("prodHelperButtons").appendChild(l);   document.getElementById("submitButton").addEventListener(\'click\', function(){ startSubmitQueue();}, true);  document.getElementById("resetButton").addEventListener(\'click\', function(){ resetForm();}, true);}function productionHelperButton() {		table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;		var prodTitle = table.childNodes[1].childNodes[5];		scoutButton = document.createElement("a");		scoutButton.href = "javascript:void(1);";		scoutButton.id= "prodHelperButton";		scoutButton.innerHTML=" [&#177;]";		scoutButton.title = "Production Helper"		prodTitle.appendChild(scoutButton)		document.getElementById(\'prodHelperButton\').addEventListener(\'click\', function() {productionHelper();}, true);	}function saveTechData(){    //console.log("Saving tech data");    var techData = new Array();    var rows = document.evaluate(    "//tr[@align=\'center\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log("Tech rows: "+ rows.snapshotLength);    for (var i = 0; i < rows.snapshotLength; i++)    {        var techNameCell = document.evaluate(        "th[1]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        var techValueCell = document.evaluate(        "td[4]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        if(techNameCell.snapshotLength > 0)        {            var techValue = parseInt(techValueCell.snapshotItem(0).innerHTML.replace(/(,| |\\.)/g, ""));            var techName = techNameCell.snapshotItem(0).innerHTML;            //console.log(techName +": "+techValue);            techData[i] = techValue;        }    }    GM_setValue(server+"techData",techData.join());}/* function scannerGrab(){tableArray = document.getElementsByTagName("table")for(i=0; i<tableArray.length; i++){if(tableArray[i].innerHTML.match(/<th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=fleet">Fleet<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=player">Player<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=destination">Destination<\\/a><\\/th><th width="20%"><a href="empire.aspx\\?view=scanners&amp;order=arrival">Arrival<\\/a><\\/th><th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=size">Size<\\/a><\\/th>/)){table = tableArray[i]fleetId = []fleetName = []fleetOwner = []ownerId = []fleetDest = []fleetArrive = []fleetSize = []for(a=1; a<table.rows.length; a++){fleetId[a-1] = table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=/, "") fleetId[a-1] = fleetId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetName[a-1]=table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetName[a-1]=fleetName[a-1].replace(/<\\/a>/, "");fleetOwner[a-1]=table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=[0-9]{1,}">/, "")fleetOwner[a-1]=fleetOwner[a-1].replace(/<\\/a>/, "");ownerId[a-1] =table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=/, "")ownerId[a-1] = ownerId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetDest[a-1]=table.rows[a].childNodes[2].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)fleetArrive[a-1]=parseInt(table.rows[a].childNodes[3].title)+Math.round(new Date().getTime()/1000.0)fleetSize[a-1]=table.rows[a].childNodes[4].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetSize[a-1]=fleetSize[a-1].replace(/<\\/a>(.*?)/, "");fleetSize[a-1]=fleetSize[a-1].replace(/(,| |.)/, "");}sendData = "&fleetId="+fleetId+"&fleetName="+fleetName+"&fleetOwner="+fleetOwner+"&ownerId="+ownerId+"&fleetDest="+fleetDest+"&fleetArrive="+fleetArrive+"&fleetSize="+fleetSize+"&seenBy="+document.getElementById(\'account\').parentNode.childNodes[1].innerHTML.replace(/[A-Za-z]./, \'\')if(GIAServers.inArray(server)){sendtoserver(sendData, "scanners.php")}}}}*/// If NS -- that is, !IE -- then set up for mouse capturedocument.captureEvents(Event.MOUSEMOVE)// Set-up to use getMouseXY function onMouseMovedocument.addEventListener("mousemove", function(e) {getMouseXY(e)}, true);// Temporary variables to hold mouse x-y pos.svar tempX = 0var tempY = 0// Main function to retrieve mouse x-y pos.sfunction getMouseXY(e) {// grab the x-y pos.s if browser is NS    tempX = e.pageX    tempY = e.pageY  // catch possible negative values in NS4  if (tempX < 0){tempX = 0}  if (tempY < 0){tempY = 0}  // show the position values in the form named Show  // in the text fields named MouseX and MouseY  return true}function linkEventListeners(){if(GIAServers.inArray(server)){linkArray=document.getElementsByTagName("a")for(i=0; i<linkArray.length; i++){if(linkArray[i].href.match(/map.aspx\\?(.*?)loc=E[0-9]{2}:[0-9]{2}:[0-9]{2}/)){linkArray[i].addEventListener("mouseover", function(e) {showBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""), tempX, tempY)}, true);linkArray[i].addEventListener("mouseout", function() {hideBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""))}, true);}}}}function linkChange(){	linkArray=document.getElementsByTagName(\'a\')	for(i=0; i < linkArray.length; i++){		linkArray[i].target = "_blank"	}}  ////////////////////////////////////////// /// Execution //////////////////////////////////////////////////////////////////////if(document.location.href.match(/astroempires.com/)){replaceTime();if(document.location.href.match(/loc=[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){	if(document.body.innerHTML.match(/<th colspan=.4.>Base<\\/th>/)){	if(GIAServers.inArray(server)){	centerArray=document.getElementsByTagName(\'center\')	for(i=0; i<centerArray.length; i++){	if(centerArray[i].innerHTML.match(/Astro Type:/)){	baseLink = document.body.innerHTML.match(/base.aspx\\?base=[0-9]{1,}/)[0]	sourceDiv = document.createElement("div")	sourceDiv.id="baseDiv";	sourceDiv.innerHTML="Visit the <a href=\\""+baseLink+"\\">base page</a> to add this base to GIA.<br /><br />";	centerArray[i].appendChild(sourceDiv)	}	}	}	}}else if(document.location.href.match(/[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}/)){	debrisShow()}else if(document.location.href.match(/http:\\/\\/(.+?)\\.astroempires\\.com\\/base\\.aspx\\?base=[0-9]{1,}$/)){	if(window.parent.document.location.href != document.location.href){	baseDetails();	}}else if(document.location.href.match(/empire.aspx$/) || document.location.href.match(/empire.aspx\\?view=bases_events$/)){	productionHelperButton();}else if(document.location.href.match(/view=scanners/)){	scannerFormat();}else if(window.location.href.match(/empire.aspx\\?view=fleets/)){        sumShips();}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=structures/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=defenses/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){	if(!document.location.href.match(/&info=/)){enhanceConstructionPage();}}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=production/)){insertTimeTextBoxes()}if(window.location.href.indexOf(\'view=move\')==-1 && window.location.href.indexOf(\'view=fleets\')==-1 &&		window.location.href.indexOf(\'view=production\')==-1 && window.location.href.indexOf(\'view=structures\')==-1 &&		window.location.href.indexOf(\'view=trade\')==-1 && window.location.href.indexOf(\'view=research\')==-1){		formatVariousNumbers();	}	}',
                                                           'max_memory_size' => 262144,
                                                           'auto_upgrade' => 1
                                                         }, 'Mojo::Asset::Memory' ),
                                       'pre_buffer' => ''
                                     }, 'Mojo::Content::Single' ),
                 'max_message_size' => 10485760,
                 'method' => 'POST',
                 'events' => {},
                 'state' => 'finished',
                 'finished' => 1,
                 'env' => {
                            'psgi.run_once' => '',
                            'psgix.input.buffered' => 1,
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'REMOTE_ADDR' => '127.0.0.1',
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'HTTP_HOST' => 'localhost',
                            'REQUEST_URI' => '/ae/gia',
                            'CONTENT_LENGTH' => '63681',
                            'HTTP_ACCEPT' => '*/*',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'psgi.input' => bless( \*{'Stream::Buffered::PerlIO::$io'}, 'FileHandle' ),
                            'SERVER_PORT' => 5000,
                            'QUERY_STRING' => '',
                            'SERVER_NAME' => 0,
                            'REQUEST_METHOD' => 'POST',
                            'psgix.harakiri' => 1,
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'psgi.streaming' => 1,
                            'psgi.url_scheme' => 'http',
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'SCRIPT_NAME' => '',
                            'psgi.errors' => *::STDERR,
                            'psgi.multithread' => '',
                            'REMOTE_PORT' => 54474,
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'psgi.multiprocess' => '',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'PATH_INFO' => '/ae/gia',
                            'psgi.nonblocking' => '',
                            'psgix.io' => bless( \*Symbol::GEN2, 'IO::Socket::INET' ),
                            'HTTP_CONNECTION' => 'close'
                          },
                 'version' => '1.0',
                 'buffer' => ''
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:37:25 2014] [debug] Rendering template "main/dumpPostData.html.ep".
[Wed Oct 22 13:37:25 2014] [error] Global symbol "$images" requires explicit package name at template main/dumpPostData.html.ep line 7, <DATA> line 231.
Global symbol "$images" requires explicit package name at template main/dumpPostData.html.ep line 12, <DATA> line 231.
2: % layout 'default';
3:   <div id="container">
4: 
5:         <div id="main" role="main">
6: 
7: dB total: <%=  @$images %>
8: <br>
9: <div id="seehires">
10: <table width=100% height=100%>
11: % my $i = 0;
12: % for my $img (@$images) {

[Wed Oct 22 13:37:25 2014] [debug] Template "exception.development.html.ep" not found.
[Wed Oct 22 13:37:25 2014] [debug] Template "exception.html.ep" not found.
[Wed Oct 22 13:37:25 2014] [debug] Rendering inline template "3e3201ab0667c1fc7f39089209f0435c".
[Wed Oct 22 13:37:25 2014] [debug] Rendering inline template "b2d451b47e2053ce583cbfdf7bcc6006".
[Wed Oct 22 13:37:25 2014] [debug] 500 Internal Server Error (0.204571s, 4.888/s).
[Wed Oct 22 13:44:19 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:44:19 2014] [debug] wtf
[Wed Oct 22 13:44:19 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:44:55 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:44:55 2014] [debug] wtf
[Wed Oct 22 13:44:55 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:47:55 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:47:55 2014] [debug] wtf
[Wed Oct 22 13:47:55 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:48:59 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:48:59 2014] [debug] wtf
[Wed Oct 22 13:48:59 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:49:05 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:49:05 2014] [debug] wtf
[Wed Oct 22 13:49:05 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:49:10 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:49:10 2014] [debug] wtf
[Wed Oct 22 13:49:10 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:49:31 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:49:31 2014] [debug] wtf
[Wed Oct 22 13:49:31 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:49:36 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:49:36 2014] [debug] GET "/ae/gia".
[Wed Oct 22 13:49:36 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 13:49:36 2014] [debug] Rendering template "example/welcome.html.ep".
[Wed Oct 22 13:49:36 2014] [debug] Rendering template "layouts/default.html.ep".
[Wed Oct 22 13:49:36 2014] [debug] Rendering template "common_styles.html.ep".
[Wed Oct 22 13:49:36 2014] [debug] Rendering template "header.html.ep".
[Wed Oct 22 13:49:36 2014] [debug] Rendering template "common_js.html.ep".
[Wed Oct 22 13:49:36 2014] [debug] 200 OK (0.014029s, 71.281/s).
[Wed Oct 22 13:49:43 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:49:43 2014] [debug] POST "/ae/gia".
[Wed Oct 22 13:49:43 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 13:49:43 2014] [debug] $VAR1 = bless( {
                 'finished' => 1,
                 'raw_size' => 0,
                 'state' => 'finished',
                 'content' => bless( {
                                       'pre_buffer' => '',
                                       'asset' => bless( {
                                                           'content' => '// ==UserScript==// @name           GIA Script (Modified)// @author          Luke Bonaccorsi AKA SpeedySurfer// @namespace       http://gears.speedysurfer.co.uk// @description     Scouts for bases in the current region// @license         Creative Commons Attribution License// @include        http://*.astroempires.com/*// @exclude        http://*.astroempires.com/login.aspx// @exclude        http://*.astroempires.com/home.aspx// ==/UserScript==/* * This file is a Greasemonkey user script. To install it, you need  * the Firefox plugin "Greasemonkey" (URL: http://greasemonkey.mozdev.org/) * After you installed the extension, restart Firefox and revisit  * this script. Now you will see a new menu item "Install User Script" * in your tools menu. *  * To uninstall this script, go to your "Tools" menu and select  * "Manage User Scripts", then select this script from the list * and click uninstall :-) * * Creative Commons Attribution License (--> or Public Domain) * http://creativecommons.org/licenses/by/2.5/*/  ////////////////////////////////////////// /// Variables //////////////////////////////////////////////////////////////////////if (document.location.href.match(/(.+?)astroempires.com/)){var server=document.location.href.match(/\\/(.+?).astroempires.com/)[1]server = server.replace(/\\//, "")var serverurl= "http://"+server+".astroempires.com/"}if(document.location.href.match(/astroempires.com/)){var empireLinks = []; var ProductionGetCost = [5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000]; var numcredits = document.evaluate(    "/html/body/table/tbody/tr/th/table/tbody/tr[2]/th[2]",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    numcredits = numcredits.snapshotItem(0).innerHTML;var FT_INDEX = 0;var BO_INDEX = 1;var HB_INDEX = 2;var IB_INDEX = 3;var CV_INDEX = 4;var RC_INDEX = 5;var DE_INDEX = 6;var FR_INDEX = 7;var IF_INDEX = 8;var SS_INDEX = 9;var OS_INDEX = 10;var CR_INDEX = 11;var CA_INDEX = 12;var HC_INDEX = 13;var BC_INDEX = 14;var FC_INDEX = 15;var DN_INDEX = 16;var TI_INDEX = 17;var LE_INDEX = 18;var DS_INDEX = 19;var BARRACKS_INDEX = 20;var LASER_TURRETS_INDEX = 21;var MISSLE_TURRETS_INDEX = 22;var PLASMA_TURRENTS_INDEX = 23;var ION_TURRETS_INDEX = 24;var PHOTON_TURRETS_INDEX = 25;var DISRUPTOR_TURRETS_INDEX = 26;var DEFLECTION_SHIELDS_INDEX = 27;var PLANETARY_SHIELD_INDEX = 28;var PLANETARY_RING_INDEX = 29;var fightingShips = "11111011100101101111";var shipValues = new Array(5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000);var shipHangarValues = new Array(0,0,0,0,0,0,0,4,4,0,0,4,60,8,40,400,200,1000,4000,10000);var GIAServers = new Array("bravo");}  ////////////////////////////////////////// /// Misc /////////////////////////////////////////////////////////////////////////Array.prototype.inArray = function (value)// Returns true if the passed value is found in the// array. Returns false if it is not.{var i;for (i=0; i < this.length; i++) {// Matches identical (===), not just similar (==).if (this[i] === value) {return true;}}return false;};function replaceTime(){	  for(n=1;n<=500;n++)	  {		elem=document.getElementById(\'time\'+n);	    if (!elem)	    {	       break;	    }	    elem.id = \'blah\'+n;	    s=elem.title;	    var newElement, endTime;	    var d = new Date();	    var now = new Date();	    if (elem)	    {	       if(s<=0)	       {		 endTime="-"	       }	       else	       {		 d.setTime(d.getTime()+(s*1000));		 tempdate = new Date();		 tempdate.setDate(tempdate.getDate()+1)		 if(now.toLocaleDateString() == d.toLocaleDateString() )		 {		    endTime="Today @ "+d.formatDate(\'H:i:s\');		 }		 else if(tempdate.toLocaleDateString() == d.toLocaleDateString())		 {		    endTime="Tomorrow @ "+d.formatDate(\'H:i:s\');		 }		 else		 {		    endTime=d.formatDate(\'D jS M @ H:i:s\');		 }	       }	       elem.innerHTML = "<b><span id=\'time"+n+"\' title=\'"+ s +"\'>-</span></b><br><nobr><span id=\'done"+n+"\' style=\'font-size: xx-small; color: "+getAgeCol(s)+"\'>" + endTime + "</span></nobr>"	    }	  }};  // formatDate :// a PHP date like function, for formatting date strings// authored by Svend Tofte <www.svendtofte.com>// the code is in the public domain//// see http://www.svendtofte.com/javascript/javascript-date-string-formatting/// and http://www.php.net/date//// thanks to//  - Daniel Berlin <mail@daniel-berlin.de>,//    major overhaul and improvements//  - Matt Bannon,//    correcting some stupid bugs in my days-in-the-months list!//  - levon ghazaryan. pointing out an error in z switch.//  - Andy Pemberton. pointing out error in c switch//// input : format string// time : epoch time (seconds, and optional)//// if time is not passed, formatting is based on// the current "this" date object\'s set time.//// supported switches are// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L),// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z//// unsupported (as compared to date in PHP 5.1.3)// T, e, oDate.prototype.formatDate = function (input,time) {    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday",                       "Thursday", "Friday", "Saturday"];    var daysShort =   ["Sun", "Mon", "Tue", "Wed",                       "Thu", "Fri", "Sat"];    var monthsShort = ["Jan", "Feb", "Mar", "Apr",                       "May", "Jun", "Jul", "Aug", "Sep",                       "Oct", "Nov", "Dec"];    var monthsLong =  ["January", "February", "March", "April",                       "May", "June", "July", "August", "September",                       "October", "November", "December"];    var switches = { // switches object        a : function () {            // Lowercase Ante meridiem and Post meridiem            return date.getHours() > 11? "pm" : "am";        },        A : function () {            // Uppercase Ante meridiem and Post meridiem            return (this.a().toUpperCase ());        },        B : function (){            // Swatch internet time. code simply grabbed from ppk,            // since I was feeling lazy:            // http://www.xs4all.nl/~ppk/js/beat.html            var off = (date.getTimezoneOffset() + 60)*60;            var theSeconds = (date.getHours() * 3600) +                             (date.getMinutes() * 60) +                              date.getSeconds() + off;            var beat = Math.floor(theSeconds/86.4);            if (beat > 1000) beat -= 1000;            if (beat < 0) beat += 1000;            if ((String(beat)).length == 1) beat = "00"+beat;            if ((String(beat)).length == 2) beat = "0"+beat;            return beat;        },        c : function () {            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" +                    this.H() + ":" + this.i() + ":" + this.s() + this.P());        },        d : function () {            // Day of the month, 2 digits with leading zeros            var j = String(this.j());            return (j.length == 1 ? "0"+j : j);        },        D : function () {            // A textual representation of a day, three letters            return daysShort[date.getDay()];        },        F : function () {            // A full textual representation of a month            return monthsLong[date.getMonth()];        },        g : function () {           // 12-hour format of an hour without leading zeros, 1 through 12!           if (date.getHours() == 0) {               return 12;           } else {               return date.getHours()>12 ? date.getHours()-12 : date.getHours();           }       },        G : function () {            // 24-hour format of an hour without leading zeros            return date.getHours();        },        h : function () {            // 12-hour format of an hour with leading zeros            var g = String(this.g());            return (g.length == 1 ? "0"+g : g);        },        H : function () {            // 24-hour format of an hour with leading zeros            var G = String(this.G());            return (G.length == 1 ? "0"+G : G);        },        i : function () {            // Minutes with leading zeros            var min = String (date.getMinutes ());            return (min.length == 1 ? "0" + min : min);        },        I : function () {            // Whether or not the date is in daylight saving time (DST)            // note that this has no bearing in actual DST mechanics,            // and is just a pure guess. buyer beware.            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");            return (noDST.getTimezoneOffset () ==                    date.getTimezoneOffset () ? 0 : 1);        },        j : function () {            // Day of the month without leading zeros            return date.getDate();        },        l : function () {            // A full textual representation of the day of the week            return daysLong[date.getDay()];        },        L : function () {            // leap year or not. 1 if leap year, 0 if not.            // the logic should match iso\'s 8601 standard.            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html            var Y = this.Y();            if (                (Y % 4 == 0 && Y % 100 != 0) ||                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)                ) {                return 1;            } else {                return 0;            }        },        m : function () {            // Numeric representation of a month, with leading zeros            var n = String(this.n());            return (n.length == 1 ? "0"+n : n);        },        M : function () {            // A short textual representation of a month, three letters            return monthsShort[date.getMonth()];        },        n : function () {            // Numeric representation of a month, without leading zeros            return date.getMonth()+1;        },        N : function () {            // ISO-8601 numeric representation of the day of the week            var w = this.w();            return (w == 0 ? 7 : w);        },        O : function () {            // Difference to Greenwich time (GMT) in hours            var os = Math.abs(date.getTimezoneOffset());            var h = String(Math.floor(os/60));            var m = String(os%60);            h.length == 1? h = "0"+h:1;            m.length == 1? m = "0"+m:1;            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;        },        P : function () {            // Difference to GMT, with colon between hours and minutes            var O = this.O();            return (O.substr(0, 3) + ":" + O.substr(3, 2));        },        r : function () {            // RFC 822 formatted date            var r; // result            //  Thu         ,     21               Dec              2000            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +            //    16          :    01          :    07               0200            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();            return r;        },        s : function () {            // Seconds, with leading zeros            var sec = String (date.getSeconds ());            return (sec.length == 1 ? "0" + sec : sec);        },        S : function () {            // English ordinal suffix for the day of the month, 2 characters            switch (date.getDate ()) {                case  1: return ("st");                case  2: return ("nd");                case  3: return ("rd");                case 21: return ("st");                case 22: return ("nd");                case 23: return ("rd");                case 31: return ("st");                default: return ("th");            }        },        t : function () {            // thanks to Matt Bannon for some much needed code-fixes here!            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];            if (this.L()==1 && this.n()==2) return 29; // ~leap day            return daysinmonths[this.n()];        },        U : function () {            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)            return Math.round(date.getTime()/1000);        },        w : function () {            // Numeric representation of the day of the week            return date.getDay();        },        W : function () {            // Weeknumber, as per ISO specification:            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            var DoW = this.N ();            var DoY = this.z ();            // If the day is 3 days before New Year\'s Eve and is Thursday or earlier,            // it\'s week 1 of next year.            var daysToNY = 364 + this.L () - DoY;            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {                return 1;            }            // If the day is within 3 days after New Year\'s Eve and is Friday or later,            // it belongs to the old year.            if (DoY <= 2 && DoW >= 5) {                return new Date (this.Y () - 1, 11, 31).formatDate ("W");            }            var nyDoW = new Date (this.Y (), 0, 1).getDay ();            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier                return (1 + Math.floor ((DoY + nyDoW) / 7));            } else {  // First day of the year is a Friday or later                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));            }        },        y : function () {            // A two-digit representation of a year            var y = String(this.Y());            return y.substring(y.length-2,y.length);        },        Y : function () {            // A full numeric representation of a year, 4 digits            // we first check, if getFullYear is supported. if it            // is, we just use that. ppks code is nice, but wont            // work with dates outside 1900-2038, or something like that            if (date.getFullYear) {                var newDate = new Date("January 1 2001 00:00:00 +0000");                var x = newDate .getFullYear();                if (x == 2001) {                    // i trust the method now                    return date.getFullYear();                }            }            // else, do this:            // codes thanks to ppk:            // http://www.xs4all.nl/~ppk/js/introdate.html            var x = date.getYear();            var y = x % 100;            y += (y < 38) ? 2000 : 1900;            return y;        },        z : function () {            // The day of the year, zero indexed! 0 through 366            var s = "January 1 " + this.Y() + " 00:00:00 GMT" + this.O();            var t = new Date(s);            var diff = date.getTime() - t.getTime();            return Math.floor(diff/1000/60/60/24);        },        Z : function () {            // Timezone offset in seconds            return (date.getTimezoneOffset () * -60);        }    }    function getSwitch(str) {        if (switches[str] != undefined) {            return switches[str]();        } else {            return str;        }    }    var date;    if (time) {        var date = new Date (time);    } else {        var date = this;    }    var formatString = input.split("");    var i = 0;    while (i < formatString.length) {        if (formatString[i] == "%") {            // this is our way of allowing users to escape stuff            formatString.splice(i,1);        } else {            formatString[i] = getSwitch(formatString[i]);        }        i++;    }    return formatString.join("");}// Some (not all) predefined format strings from PHP 5.1.1, which// offer standard date representations.// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants//// Atom      "2005-08-15T15:52:01+00:00"Date.DATE_ATOM    = "Y-m-d%TH:i:sP";// ISO-8601  "2005-08-15T15:52:01+0000"Date.DATE_ISO8601 = "Y-m-d%TH:i:sO";// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"Date.DATE_RFC2822 = "D, d M Y H:i:s O";// W3C       "2005-08-15 15:52:01+00:00"Date.DATE_W3C     = "Y-m-d%TH:i:sP";function getAgeCol(age) {		var col = \'#461B7E\'; // 72 hours +		if (age <= 3600)			col = \'#FFFFFF\'; // 1 hour		else if (age <=10800)			col = \'#FFFFFF\'; // 3 hours		else if (age <=21600)			col = \'#9E7BFF\'; // 6 hours		else if (age <=43200)			col = \'#9172EC\'; // 12 hours		else if (age <=86400)			col = \'#8467D7\'; // 24 hours		else if (age <=172800)			col = \'#7A5DC7\'; // 48 hours		else if (age <=259200)			col = \'#461B7E\'; // 72 hours		return col;}function debrisShow(){	spanArray = document.getElementsByTagName("span")	for(i=0; i<spanArray.length; i++){		if(spanArray[i].getAttribute("class") == "gray"){		spanArray[i].innerHTML = spanArray[i].title		}	}}function formatVariousNumbers(){	var debrisElement = document.evaluate(    "//center[contains(text(),\'Debris\')]",    document,    null,    XPathResult.FIRST_ORDERED_NODE_TYPE,    null).singleNodeValue;    if(debrisElement !=null)    {        var debrisMessage = debrisElement.textContent;        console.log(debrisMessage);        var indexOfText = debrisMessage.indexOf(" credits");        var valueText = debrisMessage.substring(0,indexOfText);        var value = commaFormat(parseInt(valueText));        //console.log(valueText+" new value:" +value.toString());        //console.log(debrisElement.textContent + " -< " + debrisElement.textContent.replace(valueText,value.toString()));        debrisElement.textContent = debrisElement.textContent.replace(valueText,value.toString());    }}function scannerFormat(){	baseArray=document.getElementsByTagName("a")	bases = GM_getValue(server+"Bases")	for(i=0; i<baseArray.length; i++){		if(baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){			basecoord=baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)			if(bases.match(basecoord)){			baseArray[i].setAttribute("style", "color: red; font-weight: normal;")			}		}	}}var galaxyInfoArrays = new Array();function getGalaxyInfoArray(galaxy){	if(galaxyInfoArrays[galaxy]==undefined)	{		var newArray = new Array(20);		for(var i = 0; i < 20;i++)		{			newArray[i] = 0;		}		galaxyInfoArrays[galaxy] = new Array(galaxy,0,newArray,0,0);//[galaxy number],[mobile fleet count],[mobilefleetarray],[total fighting fleet],[total fleet],	}	return galaxyInfoArrays[galaxy];}function isBase(base){	bases = GM_getValue(server+"Bases")    if(bases==null)    return false;    if(bases.match(base)){        return true;    }else{    return false;	}}function insertTotalsRow(node,sums,mobileSums,fleetCount,mobileFleetCount,overallFleetTotal,overallFightingFleetTotal,overallMobileFleetTotal,overallMobileFightingFleetTotal){    	//GALAXY ROWS	for(var i = 0;i<galaxyInfoArrays.length;i++)	{		var galaxyInfoArray = galaxyInfoArrays[i];		if(galaxyInfoArray==undefined || galaxyInfoArray[1] == 0)			continue;				var sumRow = document.createElement("tr");	    sumRow.setAttribute(\'align\',\'center\');	    	    var element = sumRow.insertCell(0);	    element.textContent = "Mobile Fleets ("+i+")";	    element = sumRow.insertCell(1);	    element.textContent = galaxyInfoArray[1];	    		var galaxyFleetSums = galaxyInfoArray[2];		for(var k = 0; k < 20; k++)	    {	        //console.log(sums[k]);	        var cell = document.createElement("td");	        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	        if(galaxyFleetSums[k] > 0)				cell.innerHTML = "<small>"+galaxyFleetSums[k]+"</small>";	        //console.log(element);	        sumRow.insertBefore(cell,null);	    }	    //Add totals cell	    var cell = document.createElement("td");	    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	    cell.innerHTML =galaxyInfoArray[3] +" / "+ galaxyInfoArray[4];	    //console.log(element);	    sumRow.insertBefore(cell,null);	    node.insertBefore(sumRow,null);	}	//MOBILE ROW	var sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    var element = sumRow.insertCell(0);    element.textContent = "Total Mobile Fleets";    element = sumRow.insertCell(1);    element.textContent = mobileFleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(mobileSums[k] > 0)			cell.innerHTML = "<small>"+mobileSums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallMobileFightingFleetTotal +" / "+ overallMobileFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);    //TOTAL ROW    sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    element = sumRow.insertCell(0);    element.textContent = "Total Fleets";    element = sumRow.insertCell(1);    element.textContent = fleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(sums[k] > 0)			cell.innerHTML = "<small>"+sums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallFightingFleetTotal +" / "+ overallFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);}function node(opt) {  function attr(name) {    var value = opt[name];    delete opt[name];    return value;  }  var expandos = { id: 1, className: 1, title: 1, type: 1, checked: 1 };  var id = opt.id;  var n = document.getElementById(id);  if (!n) {    var tag = attr("tag") || "div";    if ("string" == typeof tag)      n = document.createElement(tag);    else {      var t = document.createElement("div");      t.innerHTML = tag.toXMLString();      var ids = {};      for each (var n in $x(\'.//*[@id]\', t))        ids[n.id] = 1;      if (!n) ids = null;      var r = document.createRange();      r.selectNodeContents(t);      n = r.extractContents();      if (n.childNodes.length == 1)        n = n.firstChild;    }    var after = attr("after");    var before = opt.prepend ? opt.prepend.firstChild : attr("before");    var parent = attr("prepend") || attr("append") ||                   (before || after || {}).parentNode;    if (parent) {      if (before)        parent.insertBefore(n, before);      else if (after)        parent.insertBefore(n, after.nextSibling);      else        parent.appendChild(n);    }    if (id) n.id = id;  }  var html = attr("html");  if ("undefined" != typeof html) n.innerHTML = html;  var text = attr("text");  if ("undefined" != typeof text) n.textContent = text;  var style = attr("style");  if (style)    for (var prop in style)      n.style[prop] = style[prop];  for (prop in opt)    if (expandos[prop])      n[prop] = opt[prop];    else      n.setAttribute(prop, opt[prop]+"");  if (ids)    for (var id in ids)      ids[id] = document.getElementById(id);  return ids || n;}function enhanceConstructionPage() {  urbanAdjust = 0;  solarAdjust = 0;  gasAdjust = 0;  fusionAdjust = 0;  antimatterAdjust = 0;  researchAdjust = 0;  metalAdjust = 0;  crystalAdjust = 0;  roboticsAdjust = 0;  shipyardsAdjust = 0;  osAdjust = 0;  spaceportsAdjust = 0;  ccAdjust = 0;  naniteAdjust = 0;  androidAdjust = 0;  economicAdjust = 0;  terraformAdjust = 0;  mlpAdjust = 0;  orbitalbaseAdjust = 0;  jgAdjust = 0;  biosphereAdjust = 0;  capitalAdjust = 0;  barrackAdjust = 0;  laserAdjust = 0;  missileAdjust = 0;  plasmabaseAdjust = 0;  ionAdjust = 0;  photonAdjust = 0;  disruptorAdjust = 0;  deflectionAdjust = 0;  pshieldAdjust = 0;  pringAdjust = 0;  tableArray = document.getElementsByTagName("table")  for(i=0; i<tableArray.length; i++){  if(tableArray[i].innerHTML.match(/<th colspan=.2.>Construction Queue<.th>/)){  for(a=1; a<tableArray[i].childNodes[0].childNodes.length; a++){  if(!tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/<select name=.add_stack.>/)){  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Urban Structures/))  urbanAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Solar Plants/))  solarAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Gas Plants/))  gasAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Fusion Plants/))  fusionAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Antimatter Plants/))  antimatterAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Research Labs/))  researchAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Metal Refineries/))  metalAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Crystal Mines/))  crystalAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Robotic Factories/))  roboticsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Shipyards/) && !tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  shipyardsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  osAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Spaceports/))  spaceportsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Command Centers/))  ccAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Nanite Factories/))  naniteAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Androids Factories/))  androidAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Economic Centers/))  economicAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Terraform/))  terraformAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Multi-Level Platforms/))  mlpAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Base/))  orbitalbaseAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Jump Gate/))  jgAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Biosphere Modification/))  biosphereAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Capital/))  capitalAdjust++;}  }  }  }	table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;	var i_lastcolumn = 5;	var forms = document.getElementsByTagName(\'form\');	if (!table.innerHTML.match(/The research of this base is linked to/)){	if (table && table.childNodes.length > 4) {		table.childNodes[0].style.display=\'none\';		table.childNodes[2].style.display=\'none\';		for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {			if(!table.childNodes[nrow].innerHTML.match(/Research Labs linked to this base research./)){			table.childNodes[nrow+1].style.display=\'none\';			}		}	}	techmultipliers=GM_getValue(server+"techData", "0").split(",")	var energytechmultiplier = (techmultipliers[0]*0.05)+1;	var averageroute = GM_getValue(server+"averageRoute", "31");	var fertility = 0;	var uspopcost = 0;	var obpopcost = 0;	var obcostparentnode = 0;	var popcost = 0;	var areacost = 0;	var energycost = 0;	var econcost = 0;	var prodcost = 0;	var constcost = 0;	var flag = 0;	var bestAreaSignifier = node({tag: \'span\', html: \' <br /> (Best Area)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEconSignifier = node({tag: \'span\', html: \' <br /> (Best Econ)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestProdSignifier = node({tag: \'span\', html: \' <br /> (Best Prod)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestConstSignifier = node({tag: \'span\', html: \' <br /> (Best Const)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestPopSignifier = node({tag: \'span\', html: \' <br /> (Best Pop)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEnergySignifier = node({tag: \'span\', html: \' <br /> (Best Energy)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {		if(!table.childNodes[nrow].innerHTML.match(/linked to this base research./)){		var cname = table.childNodes[nrow].childNodes[1].firstChild.firstChild.firstChild.firstChild.nodeValue + table.childNodes[nrow].childNodes[1].firstChild.firstChild.childNodes[1].nodeValue;		if (location.search.indexOf(\'view=structures\')!=-1) {			table.childNodes[nrow].title = cname;			var td1help_res = table.childNodes[nrow+1].innerHTML.match(/(fertility|metal resource|crystals resource).\\((.+?)\\)/)			if (td1help_res) {			if (flag == 0){				if(td1help_res[1]=="fertility"){				var td1help = "&nbsp;(Fert "+td1help_res[2]+")"				}else if(td1help_res[1]=="metal resource"){				var td1help = "&nbsp;(Metal "+td1help_res[2]+")"				}else if(td1help_res[1]=="crystals resource"){				var td1help = "&nbsp;(Crystal "+td1help_res[2]+")"				}				var d = table.childNodes[nrow].childNodes[1].innerHTML + td1help;				table.childNodes[nrow].childNodes[1].innerHTML = d				}			}				if (cname==\'Terraform\') {				makeAdjustments(nrow, terraformAdjust)				terracost = parseInt(itemcost) / 5;					if(areacost == 0 || areacost > terracost){					areacost = terracost					table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Multi-Level Platforms\') {				adjust = mlpAdjust				makeAdjustments(nrow, mlpAdjust)					var cost = parseInt(itemcost) / 10;					if (cost < areacost) {						areacost = cost;						bestAreaSignifier.parentNode.removeChild(bestAreaSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Urban Structures\') {				makeAdjustments(nrow, urbanAdjust)          USLevel = table.childNodes[nrow].childNodes[1].innerHTML.match(/\\(Level [0-9]{1,}/);          USLevel = parseInt(USLevel[0].replace(/\\(Level /, ""));					fertility = parseInt(td1help_res[2]);					uspopcost = parseInt(itemcost);					uspopcost = (uspopcost+areacost) / fertility;					if (popcost == 0 || popcost > uspopcost){					popcost = uspopcost;					table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);					}				}				if (cname==\'Orbital Base\') {				makeAdjustments(nrow, orbitalbaseAdjust)					obpopcost = parseInt(itemcost) / 10;					obcostparentnode = table.childNodes[nrow].childNodes[2];					if (obpopcost && obpopcost < popcost) {						popcost = obpopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);								}				}								if (cname==\'Solar Plants\' || cname==\'Gas Plants\' || cname==\'Fusion Plants\' || cname==\'Antimatter Plants\') {				if(cname==\'Solar Plants\'){				adjust = solarAdjust				}else if(cname==\'Gas Plants\'){				adjust = gasAdjust				}else if(cname==\'Fusion Plants\'){				adjust = fusionAdjust				}else if(cname==\'Antimatter Plants\'){				adjust = antimatterAdjust				}makeAdjustments(nrow, adjust)					var c = parseInt(itemcost);					var e = parseInt(table.childNodes[nrow].childNodes[3].firstChild.nodeValue.slice(1));					c = (c + popcost + areacost) / (energytechmultiplier*e);					if (e>2){					if (!energycost)						energycost = c;					if (c <= energycost) {						energycost = c;						if (bestEnergySignifier.parentNode)							bestEnergySignifier.parentNode.removeChild(bestEnergySignifier);							table.childNodes[nrow].childNodes[2].appendChild(bestEnergySignifier);					}					}				}				if (cname == "Biosphere Modification"){makeAdjustments(nrow, biosphereAdjust)          var biopopcost = parseInt(itemcost);					biopopcost = (biopopcost+(24*energycost)+areacost)/USLevel										if (biopopcost < popcost) {						popcost = biopopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);																	}				}				if (cname == "Metal Refineries"){				makeAdjustments(nrow, metalAdjust)				var metal = parseInt(td1help_res[2]);				var metalcost = parseInt(itemcost);				metalprodcost = (metalcost + energycost + areacost + popcost)/ metal				metalconstcost = (metalcost + energycost + areacost + popcost)/ metal				metaleconcost = (metalcost + energycost + areacost + popcost)          	if(econcost == 0 || econcost > metaleconcost){          	econcost = metaleconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost == 0 || prodcost > metalprodcost){          	prodcost = metalprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost == 0 || constcost > metalconstcost){          	constcost = metalconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Crystals Mines"){				makeAdjustments(nrow, crystalAdjust)				var crystals = parseInt(td1help_res[2]);				var crystalcost = parseInt(itemcost);				crystalcost = (crystalcost + energycost + areacost)/ crystals          	if(econcost > crystalcost){          	econcost = crystalcost;													table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}			}				if (cname == "Robotic Factories"){				makeAdjustments(nrow, roboticsAdjust)				var robscost = parseInt(itemcost);				robsprodcost = (robscost + energycost + areacost + popcost)/ 2				robsconstcost = (robscost + energycost + areacost + popcost)/ 2				robseconcost = (robscost + energycost + areacost + popcost)          	if(econcost > robseconcost){          	econcost = robseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > robsprodcost){          	prodcost = robsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > robsconstcost){          	constcost = robsconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Shipyards"){				makeAdjustments(nrow, shipyardsAdjust)				var shipscost = parseInt(itemcost);				shipsprodcost = (shipscost + energycost + areacost + popcost)/ 2        shipseconcost = (shipscost + energycost + areacost + popcost)          	if(econcost > shipseconcost){          	econcost = shipseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > shipsprodcost){          	prodcost = shipsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Orbital Shipyards"){				makeAdjustments(nrow, osAdjust)				var oscost = parseInt(itemcost);				osprodcost = (oscost + (energycost*12) + popcost)/8        oseconcost = (oscost + (energycost*12) + popcost)/2          	if(econcost > oseconcost){          	econcost = oseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > osprodcost){          	prodcost = osprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Spaceports"){				makeAdjustments(nrow, spaceportsAdjust)				var Spcost = parseInt(itemcost);				Spcost = (Spcost + energycost + areacost)/ 2          	if(econcost > Spcost){          	econcost = Spcost;							table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}				if (cname == "Nanite Factories"){				makeAdjustments(nrow, naniteAdjust)				var nanicost = parseInt(itemcost);				naniprodcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				naniconstcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				nanieconcost = (nanicost + (energycost*2) + areacost + popcost) /2          	if(econcost > nanieconcost){          	econcost = nanieconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > naniprodcost){          	prodcost = naniprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > naniconstcost){          	constcost = naniconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Androids Factories"){				makeAdjustments(nrow, androidAdjust)				var andrcost = parseInt(itemcost);				andrprodcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andrconstcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andreconcost = (andrcost + (energycost*4) + areacost + popcost) /2          	if(econcost > andreconcost){          	econcost = andreconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > andrprodcost){          	prodcost = andrprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > andrconstcost){          	constcost = andrconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}								if (cname == "Economic Centers"){				makeAdjustments(nrow, economicAdjust)				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*2) + areacost + popcost) /3          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}        if (cname == "Capital"){        makeAdjustments(nrow, capitalAdjust)				basesArray = GM_getValue(server+"Bases")				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*12) + areacost + popcost) / (10+basesArray.length)          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}				        if (cname == "Research Labs"){        makeAdjustments(nrow, researchAdjust)				}					        if (cname == "Command Centers"){        makeAdjustments(nrow, ccAdjust)				}		if (flag == 0){				    	getOptionValue(cname);		if (v==1) {		buttontext=document.createElement("a")		buttontext.href="javascript:document.getElementsByName(\'add_stack\')[0].selectedIndex="+a+"; document.getElementsByTagName(\'form\')[1].submit()"		buttontext.innerHTML = "Queue"			if (buttontext) {			if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){			colnum=3			}else{			colnum=5			}				table.childNodes[nrow].childNodes[colnum].style.whiteSpace=\'nowrap\';				table.childNodes[nrow].childNodes[colnum].appendChild(buttontext);			}	}	if (flag == 0 && nrow==table.childNodes.length-1){						flag =1;						nrow = 1;						}		}}}}}function buttonToSelect(option, text, fallback_text) {}function makeAdjustments(nrow, adjustvar){adjust = adjustvar				if(table.childNodes[nrow].childNodes[6].innerHTML.match(/<span id="time/)){				adjust++ 				}				if(adjust>0){				basecost = parseInt(table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, ""))				time = getSeconds(table.childNodes[nrow].childNodes[5].firstChild.nodeValue)/basecost				time = secsToHMS(time*(Math.round(basecost*Math.pow(1.5, adjust))))				table.childNodes[nrow].childNodes[5].innerHTML = table.childNodes[nrow].childNodes[5].innerHTML + "<br />("+time+") "        table.childNodes[nrow].childNodes[1].innerHTML = table.childNodes[nrow].childNodes[1].innerHTML + " (+"+adjust+")"        table.childNodes[nrow].childNodes[2].firstChild.nodeValue = table.childNodes[nrow].childNodes[2].firstChild.nodeValue + " ("+Math.round((basecost*Math.pow(1.5, adjust)))+")"        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        itemcost = itemcost.replace(/[0-9]+\\(/,"")        itemcost = itemcost.replace(/\\)/, "")        }else{        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        }        }function secsToHMS(seconds){        secVar0 = Math.round(seconds);                            // The initial data, in seconds        minVar = Math.floor(secVar0/60);  // The minutes           hourVar = Math.floor(minVar/60);  // The minutes        minVar = minVar % 60;        secVar = secVar0 % 60;              // The balance of seconds        if(hourVar != 0){        return hourVar+"h "+(minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else if(minVar != 0){        return (minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else{        return (secVar<10?\'0\'+secVar:secVar)+"s"        }                }function getOptionValue(obj){v=0x = document.getElementsByName("add_stack")if(x[0]){x = x[0]for (i=0;i<x.length;i++)    {    if(x.options[i].text == obj){    v=1;	a=i    i = x.length    }    }    }    }/*function insertTimeTextBoxes(){    var inputs = document.forms[1].elements;    for(var i = 0; i < inputs.length; i++)    {        if(inputs[i].className == \'quant\')        {            var row = inputs[i].parentNode.parentNode;            //console.log(row);            var cell = document.createElement("td");            cell.setAttribute("align","center");            cell.innerHTML = \'<input type="text" value="" maxlength="5" size="5" name="\'+inputs[i].name+\' - Time" id="\'+inputs[i].name+\' - Time" class="quant" onchange="update(\\\'\'+inputs[i].name+\'\\\')"/>\';            row.appendChild(cell);            cell.addEventListener(\'keyup\',getConvertTimeToQuantityClosure(row),true);			//cell.addEventListener(\'blur\',onProductionTextBoxChanged,true);        }    }        var tbody = inputs[0].parentNode.parentNode.parentNode;    //console.log(tbody.childNodes[0].firstChild);    //Adjust colspan for top row and third row    tbody.childNodes[0].firstChild.setAttribute("colspan",7);    tbody.childNodes[2].firstChild.setAttribute("colspan",7);    //console.log(tbody.childNodes[1].firstChild);    //Insert column title    var titleCell = document.createElement("th");    titleCell.setAttribute("width","10%");    titleCell.textContent = "Time (h)"    tbody.childNodes[1].appendChild(titleCell);		titleCell.previousSibling.setAttribute("width","10%");    //adjust colspan for all help rows    var helpCells = document.evaluate(    "//td[@class=\'help\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(helpCells.snapshotLength);    for(var i=0;i<helpCells.snapshotLength;i++)    {        helpCells.snapshotItem(i).setAttribute("colspan",6);    }    //adjust colspan for all red rows    var redCells = document.evaluate(    "//td[@class=\'red\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(redCells.snapshotLength);    for(var i=0;i<redCells.snapshotLength;i++)    {        redCells.snapshotItem(i).setAttribute("colspan",2);    }    //adjust colspan for last two rows    document.getElementById("fast").addEventListener("click", function(){var inputs = document.forms[1].elements; for(var i = 0; i < inputs.length; i++){if(inputs[i].className == \'quant\'){if(inputs[i].value == ""){}else{var row = inputs[i].parentNode.parentNode; convertTimeToQuantity(row); unsafeWindow.update(inputs[i].name);}}}}, false)    tbody.childNodes[tbody.childNodes.length-1].firstChild.setAttribute("colspan",7);}*/function getConvertTimeToQuantityClosure(row){    function func(){        convertTimeToQuantity(row);    }    ;    return func;}function convertTimeToQuantity(row){	//console.log(row);    var credits = row.childNodes[2].textContent;    var time = row.childNodes[4].textContent;    var qtyInput = row.childNodes[5].firstChild;    var enteredTime;    try{        enteredTime = parseFloat(row.childNodes[6].firstChild.value);    }    catch(Exception)    {        return;    }    if(isNaN(enteredTime)){    enteredTime = 0    }else{    //console.log("Credits: "+credits+" Time: "+time+" qtyInput: "+ qtyInput.value);    //console.log("entered time: "+isNaN(enteredTime));    var totalSeconds = getSeconds(time);    if(totalSeconds != -1)    {        //console.log("Time " +getTimeDisplay(totalSeconds));        var enteredTimeInSeconds = enteredTime*60*60;        //console.log(enteredTimeInSeconds+" / " +totalSeconds);        if(enteredTimeInSeconds < totalSeconds){			qtyInput.value = "";		}else{			if(document.getElementById("fast").checked == true){			qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)*2			}else{				qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)			}		}    }    onProductionTextBoxKeyUp();    }}function getSeconds(timeString){    var regex = /((\\d|,| |\\.)*h)?\\W?((\\d|,| |\\.)*m)?\\W?((\\d|,| |\\.)*s)?/;    var result = regex.exec(timeString);    if(result)    {        //console.log(result);        var h = 0;var m=0;var s=0;        if(result[1] != null)        h = result[1].substring(0,result[1].indexOf("h"));        if(result[3] != null)        m = result[3].substring(0,result[3].indexOf("m"));        if(result[5] != null)        s = result[5].substring(0,result[5].indexOf("s"));        return h*60*60 + m*60 + s*1;    }    else return -1;}function getTimeDisplay(seconds){    var h = Math.floor(seconds/3600);    var m = Math.floor((seconds % 3600)/60);    var s = Math.floor((seconds % 3600) % 60);    var string = s+"s";    if(m>0 || h>0)		string = m+"m "+string;    if(h>0)		string = h+"h "+string;    return string;}var PRESET_KEYS = new Array("Fighters","Bombers","Heavy Bombers","Ion Bombers","Corvette","Recycler","Destroyer","Frigate","Ion Frigate","Scout Ship", "Outpost Ship","Cruiser","Carrier","Heavy Cruiser","Battleship","Fleet Carrier","Dreadnought","Titan","Leviathan","Death Star","Goods");function onProductionTextBoxKeyUp(){    var shipName;    var count=0,cost=0;    var productionCost = 0;    var totalTime = 0;    for(var i = 0;i <PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.log("Failed to find textBox for "+shipName+".");            continue;        }				if(textBox.value != "")        {            var row = textBox.parentNode.parentNode;            var time = row.childNodes[4].textContent;            //console.log(textBox.value);            count = parseInt(textBox.value);            cost = parseInt(textBox.parentNode.previousSibling.previousSibling.previousSibling.innerHTML.replace(/(,| |\\.)/g, ""));            totalTime+= getSeconds(time) * count;            //console.log(count + " " + shipName + "s @ " + cost);            productionCost += (cost * count);			//textBox.parentNode.nextSibling.value = "";        }    }    //console.log("total Time: "+getTimeDisplay(totalTime));    var fastProduction = document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.checked;    //console.info(fastProduction);    if(fastProduction)	{		productionCost *= 2;		totalTime /= 2;	}    //console.log("Text changed. Total production cost: " +productionCost);    var submitButton = document.evaluate(	    "//input[@type=\'submit\']",	    document,	    null,	    XPathResult.FIRST_ORDERED_NODE_TYPE,	    null).singleNodeValue;    if(productionCost > 0)		submitButton.value = "Submit";    else		submitButton.value = "Submit";}function registerTextBoxEventListeners(){    for(var i = 0;i < PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.info("Failed to find textBox for "+shipName+".");            continue;        }        textBox.addEventListener(\'keyup\',onProductionTextBoxKeyUp,false);		//textBox.addEventListener(\'blur\',onProductionTextBoxChanged,true);    }    document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'change\',onProductionTextBoxKeyUp,false);    //document.evaluate("//input[@type=\'reset\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'click\',onProductionTextBoxKeyUp,true);    document.evaluate("//form[@method=\'post\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'reset\',onProductionTextBoxKeyUp,false);}function productionHelperOnClick(num, box) {	num=num.replace("+", "")	num=num.replace(" ","")	num=num.replace("k","000")		document.getElementById(box).value = parseInt(document.getElementById(box).value) + parseInt(num);     calculateTotals();}function prodHelperEvent(e) {  if (e.shiftKey && (e.name == \'fast\')) {    for (i=0; i<empireLinks.length; i++) {    document.getElementById("fast_"+empireLinks[i]).checked = e.checked;    }  } else if (e.shiftKey && (e.name == \'unit\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("unit_"+empireLinks[i]).selectedIndex = e.selectedIndex;    }  } else if (e.shiftKey && (e.name == \'quant\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("quant_"+empireLinks[i]).value = e.value;    }  }  if ((e.name == \'fast\')||(e.name == \'unit\')||(e.name == \'quant\'))    calculateTotals();}function calculateTotals() {	var pcost = 0;  for (i=0; i<empireLinks.length; i++) {    n = (document.getElementById("fast_"+empireLinks[i]).checked) ? 2 : 1;    pcost += parseInt(ProductionGetCost[document.getElementById("unit_"+empireLinks[i]).selectedIndex] * document.getElementById("quant_"+empireLinks[i]).value * n);	}	document.getElementById(\'cost_all\').innerHTML = pcost+\' credits\';	var credits_left = parseInt(numcredits) - pcost;	document.getElementById(\'cost_all\').style.color = (credits_left < 0) ? \'red\' : \'\';}function resetForm() {  for (i=0; i<empireLinks.length; i++) {    document.getElementById("unit_"+empireLinks[i]).selectedIndex = 0;    document.getElementById("fast_"+empireLinks[i]).checked = false;    document.getElementById("quant_"+empireLinks[i]).value = 0;    returnto = i    calculateTotals();    i=returnto;  }}function startSubmitQueue() {  submitQueue(0);}function submitQueue(i) {    if (document.getElementById("quant_"+empireLinks[i]).value != 0) {      var postData = document.getElementById("unit_"+empireLinks[i]).value+"="+document.getElementById("quant_"+empireLinks[i]).value+"&post_back=true";      if (document.getElementById("fast_"+empireLinks[i]).checked)        postData += "&fast=true";      document.getElementById("quant_"+empireLinks[i]).value = \'ok\';      document.getElementById("quant_"+empireLinks[i]).style.backgroundColor = \'red\';      GM_xmlhttpRequest({        method: "POST",        url: serverurl+"base.aspx?base="+empireLinks[i]+"&view=production",        data: encodeURI(postData),        headers:{\'Content-type\':\'application/x-www-form-urlencoded\'},     		onreadystatechange: function(xhr) {if (xhr.readyState == "4") {endSubmitQueue(i, "1");}}      });    } else {      endSubmitQueue(i, "0");    }}function endSubmitQueue(i, value) {time=1000+Math.floor(Math.random()*1001)  if (i == empireLinks.length-1)    window.setTimeout(function(){ location.reload(true)}, time);  else  if(value == 0){  submitQueue(i+1)  }else{    window.setTimeout(function(){ submitQueue(i+1)}, time);    }}function productionHelper() {  var btn_details = [];  btn_details.push([1,\'+1 \']);  btn_details.push([5,\'+5 \']);  btn_details.push([10,\'+10 \']);  btn_details.push([25,\'+25 \']);  btn_details.push([100,\'+100 \']);  btn_details.push([250,\'+250 \']);  btn_details.push([1000,\'+1k \']);  table.rows[1].childNodes[4].innerHTML = \'Fast Prod\';  table.rows[1].childNodes[5].innerHTML = \'Unit Type\';  table.rows[1].childNodes[6].innerHTML = \'Quantity\';  table.rows[1].childNodes[3].innerHTML = \'Current Queue\';  a=0;  table.firstChild.style.display=\'none\';  for (i=2; i<table.rows.length; i=i+2) {    var currentRow = table.rows[i];		var res = /\\?base=((\\d|,| |\\.)+)/.exec(table.rows[i].childNodes[0].firstChild.href);	  table.rows[i+1].style.display = \'none\';	  empireLinks[a] = res[1];	  a++;	  currentRow.childNodes[3].innerHTML = currentRow.childNodes[5].innerHTML + "<br />" + table.rows[i+1].childNodes[3].innerHTML    currentRow.childNodes[4].innerHTML = "<input type=\'checkbox\' name=\'fast\' class=\'check\' id=\'fast_"+res[1]+"\' onfocus=\\"selectedBox=\'fast_"+res[1]+"\'\\" />";    currentRow.childNodes[6].innerHTML = "<input type=\'text\' name=\'quant\' class=\'quant\' id=\'quant_"+res[1]+"\' size=\'5\' maxlength=\'5\' value=\'0\' onfocus=\\"selectedBox=\'quant_"+res[1]+"\'\\" />";    var html = "<select name=\'unit\' id=\'unit_"+res[1]+"\' onfocus=\\"selectedBox=\'unit_"+res[1]+"\'\\"><option value=\'Fighters\'>Fighters</option><option value=\'Bombers\'>Bombers</option>";    html += "<option value=\'Heavy Bombers\'>Heavy Bombers</option><option value=\'Ion Bombers\'>Ion Bombers</option><option value=\'Corvette\'>Corvette</option>";    html += "<option value=\'Recycler\'>Recycler</option><option value=\'Destroyer\'>Destroyer</option><option value=\'Frigate\'>Frigate</option>"    html += "<option value=\'Ion Frigate\'>Ion Frigate</option><option value=\'Scout Ship\'>Scout Ship</option><option value=\'Outpost Ship\'>Outpost Ship</option>";    html += "<option value=\'Cruiser\'>Cruiser</option><option value=\'Carrier\'>Carrier</option><option value=\'Heavy Cruiser\'>Heavy Cruiser</option>";    html += "<option value=\'Battleship\'>Battleship</option><option value=\'Fleet Carrier\'>Fleet Carrier</option><option value=\'Dreadnought\'>Dreadnought</option>";    html += "<option value=\'Titan\'>Titan</option><option value=\'Leviathan\'>Leviathan</option><option value=\'Death Star\'>Death Star</option></select>";    currentRow.childNodes[5].innerHTML = html;    document.getElementById("unit_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("quant_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("fast_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    for(c=0; c<7; c++) {      var num = btn_details[c][0];      l = document.createElement("a");		l.href = "javascript:void(1);";		l.id= i + btn_details[c][1];		l.innerHTML = btn_details[c][1];            l.name = "quant_"+res[1];      currentRow.childNodes[6].appendChild(l);      document.getElementById(i + btn_details[c][1]).addEventListener(\'click\', function(){ productionHelperOnClick(this.innerHTML, this.name );}, true);    }  }  l = document.createElement("tr");  l.id="extrarow1";  table.appendChild(l);  l = document.createElement("td");		l.innerHTML = "0 credits";      l.className = \'help\';      l.align = "right";      l.id="cost_all"      document.getElementById("extrarow1").appendChild(l);      document.getElementById("cost_all").colSpan="7";      l = document.createElement("tr");      l.id="extrarow2";      table.appendChild(l);      l = document.createElement("td");      l.className = \'help\';      l.align = "right";          l.id="prodHelperButtons"      document.getElementById("extrarow2").appendChild(l);      document.getElementById("prodHelperButtons").colSpan="7";      l = document.createElement("input");      l.type = "reset";      l.id = "resetButton";      l.value = "Reset";      document.getElementById("prodHelperButtons").appendChild(l);      l = document.createElement("input");      l.type = "submit";      l.id = "submitButton";      l.value = "submit";      document.getElementById("prodHelperButtons").appendChild(l);   document.getElementById("submitButton").addEventListener(\'click\', function(){ startSubmitQueue();}, true);  document.getElementById("resetButton").addEventListener(\'click\', function(){ resetForm();}, true);}function productionHelperButton() {		table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;		var prodTitle = table.childNodes[1].childNodes[5];		scoutButton = document.createElement("a");		scoutButton.href = "javascript:void(1);";		scoutButton.id= "prodHelperButton";		scoutButton.innerHTML=" [&#177;]";		scoutButton.title = "Production Helper"		prodTitle.appendChild(scoutButton)		document.getElementById(\'prodHelperButton\').addEventListener(\'click\', function() {productionHelper();}, true);	}function saveTechData(){    //console.log("Saving tech data");    var techData = new Array();    var rows = document.evaluate(    "//tr[@align=\'center\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log("Tech rows: "+ rows.snapshotLength);    for (var i = 0; i < rows.snapshotLength; i++)    {        var techNameCell = document.evaluate(        "th[1]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        var techValueCell = document.evaluate(        "td[4]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        if(techNameCell.snapshotLength > 0)        {            var techValue = parseInt(techValueCell.snapshotItem(0).innerHTML.replace(/(,| |\\.)/g, ""));            var techName = techNameCell.snapshotItem(0).innerHTML;            //console.log(techName +": "+techValue);            techData[i] = techValue;        }    }    GM_setValue(server+"techData",techData.join());}/* function scannerGrab(){tableArray = document.getElementsByTagName("table")for(i=0; i<tableArray.length; i++){if(tableArray[i].innerHTML.match(/<th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=fleet">Fleet<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=player">Player<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=destination">Destination<\\/a><\\/th><th width="20%"><a href="empire.aspx\\?view=scanners&amp;order=arrival">Arrival<\\/a><\\/th><th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=size">Size<\\/a><\\/th>/)){table = tableArray[i]fleetId = []fleetName = []fleetOwner = []ownerId = []fleetDest = []fleetArrive = []fleetSize = []for(a=1; a<table.rows.length; a++){fleetId[a-1] = table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=/, "") fleetId[a-1] = fleetId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetName[a-1]=table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetName[a-1]=fleetName[a-1].replace(/<\\/a>/, "");fleetOwner[a-1]=table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=[0-9]{1,}">/, "")fleetOwner[a-1]=fleetOwner[a-1].replace(/<\\/a>/, "");ownerId[a-1] =table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=/, "")ownerId[a-1] = ownerId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetDest[a-1]=table.rows[a].childNodes[2].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)fleetArrive[a-1]=parseInt(table.rows[a].childNodes[3].title)+Math.round(new Date().getTime()/1000.0)fleetSize[a-1]=table.rows[a].childNodes[4].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetSize[a-1]=fleetSize[a-1].replace(/<\\/a>(.*?)/, "");fleetSize[a-1]=fleetSize[a-1].replace(/(,| |.)/, "");}sendData = "&fleetId="+fleetId+"&fleetName="+fleetName+"&fleetOwner="+fleetOwner+"&ownerId="+ownerId+"&fleetDest="+fleetDest+"&fleetArrive="+fleetArrive+"&fleetSize="+fleetSize+"&seenBy="+document.getElementById(\'account\').parentNode.childNodes[1].innerHTML.replace(/[A-Za-z]./, \'\')if(GIAServers.inArray(server)){sendtoserver(sendData, "scanners.php")}}}}*/// If NS -- that is, !IE -- then set up for mouse capturedocument.captureEvents(Event.MOUSEMOVE)// Set-up to use getMouseXY function onMouseMovedocument.addEventListener("mousemove", function(e) {getMouseXY(e)}, true);// Temporary variables to hold mouse x-y pos.svar tempX = 0var tempY = 0// Main function to retrieve mouse x-y pos.sfunction getMouseXY(e) {// grab the x-y pos.s if browser is NS    tempX = e.pageX    tempY = e.pageY  // catch possible negative values in NS4  if (tempX < 0){tempX = 0}  if (tempY < 0){tempY = 0}  // show the position values in the form named Show  // in the text fields named MouseX and MouseY  return true}function linkEventListeners(){if(GIAServers.inArray(server)){linkArray=document.getElementsByTagName("a")for(i=0; i<linkArray.length; i++){if(linkArray[i].href.match(/map.aspx\\?(.*?)loc=E[0-9]{2}:[0-9]{2}:[0-9]{2}/)){linkArray[i].addEventListener("mouseover", function(e) {showBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""), tempX, tempY)}, true);linkArray[i].addEventListener("mouseout", function() {hideBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""))}, true);}}}}function linkChange(){	linkArray=document.getElementsByTagName(\'a\')	for(i=0; i < linkArray.length; i++){		linkArray[i].target = "_blank"	}}  ////////////////////////////////////////// /// Execution //////////////////////////////////////////////////////////////////////if(document.location.href.match(/astroempires.com/)){replaceTime();if(document.location.href.match(/loc=[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){	if(document.body.innerHTML.match(/<th colspan=.4.>Base<\\/th>/)){	if(GIAServers.inArray(server)){	centerArray=document.getElementsByTagName(\'center\')	for(i=0; i<centerArray.length; i++){	if(centerArray[i].innerHTML.match(/Astro Type:/)){	baseLink = document.body.innerHTML.match(/base.aspx\\?base=[0-9]{1,}/)[0]	sourceDiv = document.createElement("div")	sourceDiv.id="baseDiv";	sourceDiv.innerHTML="Visit the <a href=\\""+baseLink+"\\">base page</a> to add this base to GIA.<br /><br />";	centerArray[i].appendChild(sourceDiv)	}	}	}	}}else if(document.location.href.match(/[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}/)){	debrisShow()}else if(document.location.href.match(/http:\\/\\/(.+?)\\.astroempires\\.com\\/base\\.aspx\\?base=[0-9]{1,}$/)){	if(window.parent.document.location.href != document.location.href){	baseDetails();	}}else if(document.location.href.match(/empire.aspx$/) || document.location.href.match(/empire.aspx\\?view=bases_events$/)){	productionHelperButton();}else if(document.location.href.match(/view=scanners/)){	scannerFormat();}else if(window.location.href.match(/empire.aspx\\?view=fleets/)){        sumShips();}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=structures/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=defenses/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){	if(!document.location.href.match(/&info=/)){enhanceConstructionPage();}}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=production/)){insertTimeTextBoxes()}if(window.location.href.indexOf(\'view=move\')==-1 && window.location.href.indexOf(\'view=fleets\')==-1 &&		window.location.href.indexOf(\'view=production\')==-1 && window.location.href.indexOf(\'view=structures\')==-1 &&		window.location.href.indexOf(\'view=trade\')==-1 && window.location.href.indexOf(\'view=research\')==-1){		formatVariousNumbers();	}	}',
                                                           'auto_upgrade' => 1,
                                                           'max_memory_size' => 262144
                                                         }, 'Mojo::Asset::Memory' ),
                                       'events' => {
                                                     'read' => [
                                                                 sub { "DUMMY" }
                                                               ]
                                                   },
                                       'buffer' => '',
                                       'headers' => bless( {
                                                             'headers' => {
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ],
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'content-length' => [
                                                                                                  '63681'
                                                                                                ]
                                                                          },
                                                             'normalcase' => {
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT'
                                                                             }
                                                           }, 'Mojo::Headers' ),
                                       'real_size' => 63681,
                                       'size' => 63681,
                                       'auto_upgrade' => 1,
                                       'read' => $VAR1->{'content'}{'events'}{'read'}[0],
                                       'raw_size' => 63681,
                                       'body' => 2,
                                       'state' => 'finished'
                                     }, 'Mojo::Content::Single' ),
                 'method' => 'POST',
                 'url' => bless( {
                                   'base' => bless( {
                                                      'host' => 'localhost',
                                                      'scheme' => 'HTTP',
                                                      'port' => '',
                                                      'path' => bless( {
                                                                         'trailing_slash' => '',
                                                                         'charset' => 'UTF-8',
                                                                         'parts' => [],
                                                                         'leading_slash' => ''
                                                                       }, 'Mojo::Path' )
                                                    }, 'Mojo::URL' ),
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia'
                                                    }, 'Mojo::Path' )
                                 }, 'Mojo::URL' ),
                 'max_message_size' => 10485760,
                 'env' => {
                            'SERVER_PORT' => 5000,
                            'psgi.run_once' => '',
                            'psgix.io' => bless( \*Symbol::GEN2, 'IO::Socket::INET' ),
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'SCRIPT_NAME' => '',
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'psgi.streaming' => 1,
                            'REMOTE_ADDR' => '127.0.0.1',
                            'psgix.harakiri' => 1,
                            'psgi.input' => bless( \*{'Stream::Buffered::PerlIO::$io'}, 'FileHandle' ),
                            'REMOTE_PORT' => 54479,
                            'psgi.url_scheme' => 'http',
                            'REQUEST_URI' => '/ae/gia',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'psgix.input.buffered' => 1,
                            'QUERY_STRING' => '',
                            'HTTP_ACCEPT' => '*/*',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'CONTENT_LENGTH' => '63681',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'HTTP_HOST' => 'localhost',
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'SERVER_NAME' => 0,
                            'REQUEST_METHOD' => 'POST',
                            'PATH_INFO' => '/ae/gia',
                            'psgi.multithread' => '',
                            'psgi.nonblocking' => '',
                            'psgi.errors' => *::STDERR,
                            'psgi.multiprocess' => '',
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'HTTP_CONNECTION' => 'close'
                          },
                 'version' => '1.0',
                 'events' => {},
                 'buffer' => ''
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:49:43 2014] [debug] 200 OK (0.103790s, 9.635/s).
[Wed Oct 22 13:50:25 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:50:25 2014] [debug] wtf
[Wed Oct 22 13:50:25 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:50:30 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:50:30 2014] [debug] POST "/ae/gia".
[Wed Oct 22 13:50:30 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 13:50:30 2014] [debug] $VAR1 = bless( {
                 'raw_size' => 0,
                 'state' => 'finished',
                 'finished' => 1,
                 'url' => bless( {
                                   'base' => bless( {
                                                      'host' => 'localhost',
                                                      'port' => '',
                                                      'scheme' => 'HTTP',
                                                      'path' => bless( {
                                                                         'leading_slash' => '',
                                                                         'parts' => [],
                                                                         'charset' => 'UTF-8',
                                                                         'trailing_slash' => ''
                                                                       }, 'Mojo::Path' )
                                                    }, 'Mojo::URL' ),
                                   'path' => bless( {
                                                      'path' => '/ae/gia',
                                                      'charset' => 'UTF-8'
                                                    }, 'Mojo::Path' )
                                 }, 'Mojo::URL' ),
                 'method' => 'POST',
                 'content' => bless( {
                                       'raw_size' => 63681,
                                       'state' => 'finished',
                                       'body' => 2,
                                       'read' => sub { "DUMMY" },
                                       'headers' => bless( {
                                                             'normalcase' => {
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-real-ip' => 'X-REAL-IP'
                                                                             },
                                                             'headers' => {
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'content-length' => [
                                                                                                  '63681'
                                                                                                ],
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ]
                                                                          }
                                                           }, 'Mojo::Headers' ),
                                       'real_size' => 63681,
                                       'size' => 63681,
                                       'auto_upgrade' => 1,
                                       'buffer' => '',
                                       'events' => {
                                                     'read' => [
                                                                 $VAR1->{'content'}{'read'}
                                                               ]
                                                   },
                                       'asset' => bless( {
                                                           'content' => '// ==UserScript==// @name           GIA Script (Modified)// @author          Luke Bonaccorsi AKA SpeedySurfer// @namespace       http://gears.speedysurfer.co.uk// @description     Scouts for bases in the current region// @license         Creative Commons Attribution License// @include        http://*.astroempires.com/*// @exclude        http://*.astroempires.com/login.aspx// @exclude        http://*.astroempires.com/home.aspx// ==/UserScript==/* * This file is a Greasemonkey user script. To install it, you need  * the Firefox plugin "Greasemonkey" (URL: http://greasemonkey.mozdev.org/) * After you installed the extension, restart Firefox and revisit  * this script. Now you will see a new menu item "Install User Script" * in your tools menu. *  * To uninstall this script, go to your "Tools" menu and select  * "Manage User Scripts", then select this script from the list * and click uninstall :-) * * Creative Commons Attribution License (--> or Public Domain) * http://creativecommons.org/licenses/by/2.5/*/  ////////////////////////////////////////// /// Variables //////////////////////////////////////////////////////////////////////if (document.location.href.match(/(.+?)astroempires.com/)){var server=document.location.href.match(/\\/(.+?).astroempires.com/)[1]server = server.replace(/\\//, "")var serverurl= "http://"+server+".astroempires.com/"}if(document.location.href.match(/astroempires.com/)){var empireLinks = []; var ProductionGetCost = [5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000]; var numcredits = document.evaluate(    "/html/body/table/tbody/tr/th/table/tbody/tr[2]/th[2]",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    numcredits = numcredits.snapshotItem(0).innerHTML;var FT_INDEX = 0;var BO_INDEX = 1;var HB_INDEX = 2;var IB_INDEX = 3;var CV_INDEX = 4;var RC_INDEX = 5;var DE_INDEX = 6;var FR_INDEX = 7;var IF_INDEX = 8;var SS_INDEX = 9;var OS_INDEX = 10;var CR_INDEX = 11;var CA_INDEX = 12;var HC_INDEX = 13;var BC_INDEX = 14;var FC_INDEX = 15;var DN_INDEX = 16;var TI_INDEX = 17;var LE_INDEX = 18;var DS_INDEX = 19;var BARRACKS_INDEX = 20;var LASER_TURRETS_INDEX = 21;var MISSLE_TURRETS_INDEX = 22;var PLASMA_TURRENTS_INDEX = 23;var ION_TURRETS_INDEX = 24;var PHOTON_TURRETS_INDEX = 25;var DISRUPTOR_TURRETS_INDEX = 26;var DEFLECTION_SHIELDS_INDEX = 27;var PLANETARY_SHIELD_INDEX = 28;var PLANETARY_RING_INDEX = 29;var fightingShips = "11111011100101101111";var shipValues = new Array(5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000);var shipHangarValues = new Array(0,0,0,0,0,0,0,4,4,0,0,4,60,8,40,400,200,1000,4000,10000);var GIAServers = new Array("bravo");}  ////////////////////////////////////////// /// Misc /////////////////////////////////////////////////////////////////////////Array.prototype.inArray = function (value)// Returns true if the passed value is found in the// array. Returns false if it is not.{var i;for (i=0; i < this.length; i++) {// Matches identical (===), not just similar (==).if (this[i] === value) {return true;}}return false;};function replaceTime(){	  for(n=1;n<=500;n++)	  {		elem=document.getElementById(\'time\'+n);	    if (!elem)	    {	       break;	    }	    elem.id = \'blah\'+n;	    s=elem.title;	    var newElement, endTime;	    var d = new Date();	    var now = new Date();	    if (elem)	    {	       if(s<=0)	       {		 endTime="-"	       }	       else	       {		 d.setTime(d.getTime()+(s*1000));		 tempdate = new Date();		 tempdate.setDate(tempdate.getDate()+1)		 if(now.toLocaleDateString() == d.toLocaleDateString() )		 {		    endTime="Today @ "+d.formatDate(\'H:i:s\');		 }		 else if(tempdate.toLocaleDateString() == d.toLocaleDateString())		 {		    endTime="Tomorrow @ "+d.formatDate(\'H:i:s\');		 }		 else		 {		    endTime=d.formatDate(\'D jS M @ H:i:s\');		 }	       }	       elem.innerHTML = "<b><span id=\'time"+n+"\' title=\'"+ s +"\'>-</span></b><br><nobr><span id=\'done"+n+"\' style=\'font-size: xx-small; color: "+getAgeCol(s)+"\'>" + endTime + "</span></nobr>"	    }	  }};  // formatDate :// a PHP date like function, for formatting date strings// authored by Svend Tofte <www.svendtofte.com>// the code is in the public domain//// see http://www.svendtofte.com/javascript/javascript-date-string-formatting/// and http://www.php.net/date//// thanks to//  - Daniel Berlin <mail@daniel-berlin.de>,//    major overhaul and improvements//  - Matt Bannon,//    correcting some stupid bugs in my days-in-the-months list!//  - levon ghazaryan. pointing out an error in z switch.//  - Andy Pemberton. pointing out error in c switch//// input : format string// time : epoch time (seconds, and optional)//// if time is not passed, formatting is based on// the current "this" date object\'s set time.//// supported switches are// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L),// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z//// unsupported (as compared to date in PHP 5.1.3)// T, e, oDate.prototype.formatDate = function (input,time) {    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday",                       "Thursday", "Friday", "Saturday"];    var daysShort =   ["Sun", "Mon", "Tue", "Wed",                       "Thu", "Fri", "Sat"];    var monthsShort = ["Jan", "Feb", "Mar", "Apr",                       "May", "Jun", "Jul", "Aug", "Sep",                       "Oct", "Nov", "Dec"];    var monthsLong =  ["January", "February", "March", "April",                       "May", "June", "July", "August", "September",                       "October", "November", "December"];    var switches = { // switches object        a : function () {            // Lowercase Ante meridiem and Post meridiem            return date.getHours() > 11? "pm" : "am";        },        A : function () {            // Uppercase Ante meridiem and Post meridiem            return (this.a().toUpperCase ());        },        B : function (){            // Swatch internet time. code simply grabbed from ppk,            // since I was feeling lazy:            // http://www.xs4all.nl/~ppk/js/beat.html            var off = (date.getTimezoneOffset() + 60)*60;            var theSeconds = (date.getHours() * 3600) +                             (date.getMinutes() * 60) +                              date.getSeconds() + off;            var beat = Math.floor(theSeconds/86.4);            if (beat > 1000) beat -= 1000;            if (beat < 0) beat += 1000;            if ((String(beat)).length == 1) beat = "00"+beat;            if ((String(beat)).length == 2) beat = "0"+beat;            return beat;        },        c : function () {            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" +                    this.H() + ":" + this.i() + ":" + this.s() + this.P());        },        d : function () {            // Day of the month, 2 digits with leading zeros            var j = String(this.j());            return (j.length == 1 ? "0"+j : j);        },        D : function () {            // A textual representation of a day, three letters            return daysShort[date.getDay()];        },        F : function () {            // A full textual representation of a month            return monthsLong[date.getMonth()];        },        g : function () {           // 12-hour format of an hour without leading zeros, 1 through 12!           if (date.getHours() == 0) {               return 12;           } else {               return date.getHours()>12 ? date.getHours()-12 : date.getHours();           }       },        G : function () {            // 24-hour format of an hour without leading zeros            return date.getHours();        },        h : function () {            // 12-hour format of an hour with leading zeros            var g = String(this.g());            return (g.length == 1 ? "0"+g : g);        },        H : function () {            // 24-hour format of an hour with leading zeros            var G = String(this.G());            return (G.length == 1 ? "0"+G : G);        },        i : function () {            // Minutes with leading zeros            var min = String (date.getMinutes ());            return (min.length == 1 ? "0" + min : min);        },        I : function () {            // Whether or not the date is in daylight saving time (DST)            // note that this has no bearing in actual DST mechanics,            // and is just a pure guess. buyer beware.            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");            return (noDST.getTimezoneOffset () ==                    date.getTimezoneOffset () ? 0 : 1);        },        j : function () {            // Day of the month without leading zeros            return date.getDate();        },        l : function () {            // A full textual representation of the day of the week            return daysLong[date.getDay()];        },        L : function () {            // leap year or not. 1 if leap year, 0 if not.            // the logic should match iso\'s 8601 standard.            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html            var Y = this.Y();            if (                (Y % 4 == 0 && Y % 100 != 0) ||                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)                ) {                return 1;            } else {                return 0;            }        },        m : function () {            // Numeric representation of a month, with leading zeros            var n = String(this.n());            return (n.length == 1 ? "0"+n : n);        },        M : function () {            // A short textual representation of a month, three letters            return monthsShort[date.getMonth()];        },        n : function () {            // Numeric representation of a month, without leading zeros            return date.getMonth()+1;        },        N : function () {            // ISO-8601 numeric representation of the day of the week            var w = this.w();            return (w == 0 ? 7 : w);        },        O : function () {            // Difference to Greenwich time (GMT) in hours            var os = Math.abs(date.getTimezoneOffset());            var h = String(Math.floor(os/60));            var m = String(os%60);            h.length == 1? h = "0"+h:1;            m.length == 1? m = "0"+m:1;            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;        },        P : function () {            // Difference to GMT, with colon between hours and minutes            var O = this.O();            return (O.substr(0, 3) + ":" + O.substr(3, 2));        },        r : function () {            // RFC 822 formatted date            var r; // result            //  Thu         ,     21               Dec              2000            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +            //    16          :    01          :    07               0200            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();            return r;        },        s : function () {            // Seconds, with leading zeros            var sec = String (date.getSeconds ());            return (sec.length == 1 ? "0" + sec : sec);        },        S : function () {            // English ordinal suffix for the day of the month, 2 characters            switch (date.getDate ()) {                case  1: return ("st");                case  2: return ("nd");                case  3: return ("rd");                case 21: return ("st");                case 22: return ("nd");                case 23: return ("rd");                case 31: return ("st");                default: return ("th");            }        },        t : function () {            // thanks to Matt Bannon for some much needed code-fixes here!            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];            if (this.L()==1 && this.n()==2) return 29; // ~leap day            return daysinmonths[this.n()];        },        U : function () {            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)            return Math.round(date.getTime()/1000);        },        w : function () {            // Numeric representation of the day of the week            return date.getDay();        },        W : function () {            // Weeknumber, as per ISO specification:            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            var DoW = this.N ();            var DoY = this.z ();            // If the day is 3 days before New Year\'s Eve and is Thursday or earlier,            // it\'s week 1 of next year.            var daysToNY = 364 + this.L () - DoY;            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {                return 1;            }            // If the day is within 3 days after New Year\'s Eve and is Friday or later,            // it belongs to the old year.            if (DoY <= 2 && DoW >= 5) {                return new Date (this.Y () - 1, 11, 31).formatDate ("W");            }            var nyDoW = new Date (this.Y (), 0, 1).getDay ();            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier                return (1 + Math.floor ((DoY + nyDoW) / 7));            } else {  // First day of the year is a Friday or later                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));            }        },        y : function () {            // A two-digit representation of a year            var y = String(this.Y());            return y.substring(y.length-2,y.length);        },        Y : function () {            // A full numeric representation of a year, 4 digits            // we first check, if getFullYear is supported. if it            // is, we just use that. ppks code is nice, but wont            // work with dates outside 1900-2038, or something like that            if (date.getFullYear) {                var newDate = new Date("January 1 2001 00:00:00 +0000");                var x = newDate .getFullYear();                if (x == 2001) {                    // i trust the method now                    return date.getFullYear();                }            }            // else, do this:            // codes thanks to ppk:            // http://www.xs4all.nl/~ppk/js/introdate.html            var x = date.getYear();            var y = x % 100;            y += (y < 38) ? 2000 : 1900;            return y;        },        z : function () {            // The day of the year, zero indexed! 0 through 366            var s = "January 1 " + this.Y() + " 00:00:00 GMT" + this.O();            var t = new Date(s);            var diff = date.getTime() - t.getTime();            return Math.floor(diff/1000/60/60/24);        },        Z : function () {            // Timezone offset in seconds            return (date.getTimezoneOffset () * -60);        }    }    function getSwitch(str) {        if (switches[str] != undefined) {            return switches[str]();        } else {            return str;        }    }    var date;    if (time) {        var date = new Date (time);    } else {        var date = this;    }    var formatString = input.split("");    var i = 0;    while (i < formatString.length) {        if (formatString[i] == "%") {            // this is our way of allowing users to escape stuff            formatString.splice(i,1);        } else {            formatString[i] = getSwitch(formatString[i]);        }        i++;    }    return formatString.join("");}// Some (not all) predefined format strings from PHP 5.1.1, which// offer standard date representations.// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants//// Atom      "2005-08-15T15:52:01+00:00"Date.DATE_ATOM    = "Y-m-d%TH:i:sP";// ISO-8601  "2005-08-15T15:52:01+0000"Date.DATE_ISO8601 = "Y-m-d%TH:i:sO";// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"Date.DATE_RFC2822 = "D, d M Y H:i:s O";// W3C       "2005-08-15 15:52:01+00:00"Date.DATE_W3C     = "Y-m-d%TH:i:sP";function getAgeCol(age) {		var col = \'#461B7E\'; // 72 hours +		if (age <= 3600)			col = \'#FFFFFF\'; // 1 hour		else if (age <=10800)			col = \'#FFFFFF\'; // 3 hours		else if (age <=21600)			col = \'#9E7BFF\'; // 6 hours		else if (age <=43200)			col = \'#9172EC\'; // 12 hours		else if (age <=86400)			col = \'#8467D7\'; // 24 hours		else if (age <=172800)			col = \'#7A5DC7\'; // 48 hours		else if (age <=259200)			col = \'#461B7E\'; // 72 hours		return col;}function debrisShow(){	spanArray = document.getElementsByTagName("span")	for(i=0; i<spanArray.length; i++){		if(spanArray[i].getAttribute("class") == "gray"){		spanArray[i].innerHTML = spanArray[i].title		}	}}function formatVariousNumbers(){	var debrisElement = document.evaluate(    "//center[contains(text(),\'Debris\')]",    document,    null,    XPathResult.FIRST_ORDERED_NODE_TYPE,    null).singleNodeValue;    if(debrisElement !=null)    {        var debrisMessage = debrisElement.textContent;        console.log(debrisMessage);        var indexOfText = debrisMessage.indexOf(" credits");        var valueText = debrisMessage.substring(0,indexOfText);        var value = commaFormat(parseInt(valueText));        //console.log(valueText+" new value:" +value.toString());        //console.log(debrisElement.textContent + " -< " + debrisElement.textContent.replace(valueText,value.toString()));        debrisElement.textContent = debrisElement.textContent.replace(valueText,value.toString());    }}function scannerFormat(){	baseArray=document.getElementsByTagName("a")	bases = GM_getValue(server+"Bases")	for(i=0; i<baseArray.length; i++){		if(baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){			basecoord=baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)			if(bases.match(basecoord)){			baseArray[i].setAttribute("style", "color: red; font-weight: normal;")			}		}	}}var galaxyInfoArrays = new Array();function getGalaxyInfoArray(galaxy){	if(galaxyInfoArrays[galaxy]==undefined)	{		var newArray = new Array(20);		for(var i = 0; i < 20;i++)		{			newArray[i] = 0;		}		galaxyInfoArrays[galaxy] = new Array(galaxy,0,newArray,0,0);//[galaxy number],[mobile fleet count],[mobilefleetarray],[total fighting fleet],[total fleet],	}	return galaxyInfoArrays[galaxy];}function isBase(base){	bases = GM_getValue(server+"Bases")    if(bases==null)    return false;    if(bases.match(base)){        return true;    }else{    return false;	}}function insertTotalsRow(node,sums,mobileSums,fleetCount,mobileFleetCount,overallFleetTotal,overallFightingFleetTotal,overallMobileFleetTotal,overallMobileFightingFleetTotal){    	//GALAXY ROWS	for(var i = 0;i<galaxyInfoArrays.length;i++)	{		var galaxyInfoArray = galaxyInfoArrays[i];		if(galaxyInfoArray==undefined || galaxyInfoArray[1] == 0)			continue;				var sumRow = document.createElement("tr");	    sumRow.setAttribute(\'align\',\'center\');	    	    var element = sumRow.insertCell(0);	    element.textContent = "Mobile Fleets ("+i+")";	    element = sumRow.insertCell(1);	    element.textContent = galaxyInfoArray[1];	    		var galaxyFleetSums = galaxyInfoArray[2];		for(var k = 0; k < 20; k++)	    {	        //console.log(sums[k]);	        var cell = document.createElement("td");	        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	        if(galaxyFleetSums[k] > 0)				cell.innerHTML = "<small>"+galaxyFleetSums[k]+"</small>";	        //console.log(element);	        sumRow.insertBefore(cell,null);	    }	    //Add totals cell	    var cell = document.createElement("td");	    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	    cell.innerHTML =galaxyInfoArray[3] +" / "+ galaxyInfoArray[4];	    //console.log(element);	    sumRow.insertBefore(cell,null);	    node.insertBefore(sumRow,null);	}	//MOBILE ROW	var sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    var element = sumRow.insertCell(0);    element.textContent = "Total Mobile Fleets";    element = sumRow.insertCell(1);    element.textContent = mobileFleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(mobileSums[k] > 0)			cell.innerHTML = "<small>"+mobileSums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallMobileFightingFleetTotal +" / "+ overallMobileFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);    //TOTAL ROW    sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    element = sumRow.insertCell(0);    element.textContent = "Total Fleets";    element = sumRow.insertCell(1);    element.textContent = fleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(sums[k] > 0)			cell.innerHTML = "<small>"+sums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallFightingFleetTotal +" / "+ overallFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);}function node(opt) {  function attr(name) {    var value = opt[name];    delete opt[name];    return value;  }  var expandos = { id: 1, className: 1, title: 1, type: 1, checked: 1 };  var id = opt.id;  var n = document.getElementById(id);  if (!n) {    var tag = attr("tag") || "div";    if ("string" == typeof tag)      n = document.createElement(tag);    else {      var t = document.createElement("div");      t.innerHTML = tag.toXMLString();      var ids = {};      for each (var n in $x(\'.//*[@id]\', t))        ids[n.id] = 1;      if (!n) ids = null;      var r = document.createRange();      r.selectNodeContents(t);      n = r.extractContents();      if (n.childNodes.length == 1)        n = n.firstChild;    }    var after = attr("after");    var before = opt.prepend ? opt.prepend.firstChild : attr("before");    var parent = attr("prepend") || attr("append") ||                   (before || after || {}).parentNode;    if (parent) {      if (before)        parent.insertBefore(n, before);      else if (after)        parent.insertBefore(n, after.nextSibling);      else        parent.appendChild(n);    }    if (id) n.id = id;  }  var html = attr("html");  if ("undefined" != typeof html) n.innerHTML = html;  var text = attr("text");  if ("undefined" != typeof text) n.textContent = text;  var style = attr("style");  if (style)    for (var prop in style)      n.style[prop] = style[prop];  for (prop in opt)    if (expandos[prop])      n[prop] = opt[prop];    else      n.setAttribute(prop, opt[prop]+"");  if (ids)    for (var id in ids)      ids[id] = document.getElementById(id);  return ids || n;}function enhanceConstructionPage() {  urbanAdjust = 0;  solarAdjust = 0;  gasAdjust = 0;  fusionAdjust = 0;  antimatterAdjust = 0;  researchAdjust = 0;  metalAdjust = 0;  crystalAdjust = 0;  roboticsAdjust = 0;  shipyardsAdjust = 0;  osAdjust = 0;  spaceportsAdjust = 0;  ccAdjust = 0;  naniteAdjust = 0;  androidAdjust = 0;  economicAdjust = 0;  terraformAdjust = 0;  mlpAdjust = 0;  orbitalbaseAdjust = 0;  jgAdjust = 0;  biosphereAdjust = 0;  capitalAdjust = 0;  barrackAdjust = 0;  laserAdjust = 0;  missileAdjust = 0;  plasmabaseAdjust = 0;  ionAdjust = 0;  photonAdjust = 0;  disruptorAdjust = 0;  deflectionAdjust = 0;  pshieldAdjust = 0;  pringAdjust = 0;  tableArray = document.getElementsByTagName("table")  for(i=0; i<tableArray.length; i++){  if(tableArray[i].innerHTML.match(/<th colspan=.2.>Construction Queue<.th>/)){  for(a=1; a<tableArray[i].childNodes[0].childNodes.length; a++){  if(!tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/<select name=.add_stack.>/)){  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Urban Structures/))  urbanAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Solar Plants/))  solarAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Gas Plants/))  gasAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Fusion Plants/))  fusionAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Antimatter Plants/))  antimatterAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Research Labs/))  researchAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Metal Refineries/))  metalAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Crystal Mines/))  crystalAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Robotic Factories/))  roboticsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Shipyards/) && !tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  shipyardsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  osAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Spaceports/))  spaceportsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Command Centers/))  ccAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Nanite Factories/))  naniteAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Androids Factories/))  androidAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Economic Centers/))  economicAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Terraform/))  terraformAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Multi-Level Platforms/))  mlpAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Base/))  orbitalbaseAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Jump Gate/))  jgAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Biosphere Modification/))  biosphereAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Capital/))  capitalAdjust++;}  }  }  }	table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;	var i_lastcolumn = 5;	var forms = document.getElementsByTagName(\'form\');	if (!table.innerHTML.match(/The research of this base is linked to/)){	if (table && table.childNodes.length > 4) {		table.childNodes[0].style.display=\'none\';		table.childNodes[2].style.display=\'none\';		for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {			if(!table.childNodes[nrow].innerHTML.match(/Research Labs linked to this base research./)){			table.childNodes[nrow+1].style.display=\'none\';			}		}	}	techmultipliers=GM_getValue(server+"techData", "0").split(",")	var energytechmultiplier = (techmultipliers[0]*0.05)+1;	var averageroute = GM_getValue(server+"averageRoute", "31");	var fertility = 0;	var uspopcost = 0;	var obpopcost = 0;	var obcostparentnode = 0;	var popcost = 0;	var areacost = 0;	var energycost = 0;	var econcost = 0;	var prodcost = 0;	var constcost = 0;	var flag = 0;	var bestAreaSignifier = node({tag: \'span\', html: \' <br /> (Best Area)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEconSignifier = node({tag: \'span\', html: \' <br /> (Best Econ)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestProdSignifier = node({tag: \'span\', html: \' <br /> (Best Prod)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestConstSignifier = node({tag: \'span\', html: \' <br /> (Best Const)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestPopSignifier = node({tag: \'span\', html: \' <br /> (Best Pop)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEnergySignifier = node({tag: \'span\', html: \' <br /> (Best Energy)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {		if(!table.childNodes[nrow].innerHTML.match(/linked to this base research./)){		var cname = table.childNodes[nrow].childNodes[1].firstChild.firstChild.firstChild.firstChild.nodeValue + table.childNodes[nrow].childNodes[1].firstChild.firstChild.childNodes[1].nodeValue;		if (location.search.indexOf(\'view=structures\')!=-1) {			table.childNodes[nrow].title = cname;			var td1help_res = table.childNodes[nrow+1].innerHTML.match(/(fertility|metal resource|crystals resource).\\((.+?)\\)/)			if (td1help_res) {			if (flag == 0){				if(td1help_res[1]=="fertility"){				var td1help = "&nbsp;(Fert "+td1help_res[2]+")"				}else if(td1help_res[1]=="metal resource"){				var td1help = "&nbsp;(Metal "+td1help_res[2]+")"				}else if(td1help_res[1]=="crystals resource"){				var td1help = "&nbsp;(Crystal "+td1help_res[2]+")"				}				var d = table.childNodes[nrow].childNodes[1].innerHTML + td1help;				table.childNodes[nrow].childNodes[1].innerHTML = d				}			}				if (cname==\'Terraform\') {				makeAdjustments(nrow, terraformAdjust)				terracost = parseInt(itemcost) / 5;					if(areacost == 0 || areacost > terracost){					areacost = terracost					table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Multi-Level Platforms\') {				adjust = mlpAdjust				makeAdjustments(nrow, mlpAdjust)					var cost = parseInt(itemcost) / 10;					if (cost < areacost) {						areacost = cost;						bestAreaSignifier.parentNode.removeChild(bestAreaSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Urban Structures\') {				makeAdjustments(nrow, urbanAdjust)          USLevel = table.childNodes[nrow].childNodes[1].innerHTML.match(/\\(Level [0-9]{1,}/);          USLevel = parseInt(USLevel[0].replace(/\\(Level /, ""));					fertility = parseInt(td1help_res[2]);					uspopcost = parseInt(itemcost);					uspopcost = (uspopcost+areacost) / fertility;					if (popcost == 0 || popcost > uspopcost){					popcost = uspopcost;					table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);					}				}				if (cname==\'Orbital Base\') {				makeAdjustments(nrow, orbitalbaseAdjust)					obpopcost = parseInt(itemcost) / 10;					obcostparentnode = table.childNodes[nrow].childNodes[2];					if (obpopcost && obpopcost < popcost) {						popcost = obpopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);								}				}								if (cname==\'Solar Plants\' || cname==\'Gas Plants\' || cname==\'Fusion Plants\' || cname==\'Antimatter Plants\') {				if(cname==\'Solar Plants\'){				adjust = solarAdjust				}else if(cname==\'Gas Plants\'){				adjust = gasAdjust				}else if(cname==\'Fusion Plants\'){				adjust = fusionAdjust				}else if(cname==\'Antimatter Plants\'){				adjust = antimatterAdjust				}makeAdjustments(nrow, adjust)					var c = parseInt(itemcost);					var e = parseInt(table.childNodes[nrow].childNodes[3].firstChild.nodeValue.slice(1));					c = (c + popcost + areacost) / (energytechmultiplier*e);					if (e>2){					if (!energycost)						energycost = c;					if (c <= energycost) {						energycost = c;						if (bestEnergySignifier.parentNode)							bestEnergySignifier.parentNode.removeChild(bestEnergySignifier);							table.childNodes[nrow].childNodes[2].appendChild(bestEnergySignifier);					}					}				}				if (cname == "Biosphere Modification"){makeAdjustments(nrow, biosphereAdjust)          var biopopcost = parseInt(itemcost);					biopopcost = (biopopcost+(24*energycost)+areacost)/USLevel										if (biopopcost < popcost) {						popcost = biopopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);																	}				}				if (cname == "Metal Refineries"){				makeAdjustments(nrow, metalAdjust)				var metal = parseInt(td1help_res[2]);				var metalcost = parseInt(itemcost);				metalprodcost = (metalcost + energycost + areacost + popcost)/ metal				metalconstcost = (metalcost + energycost + areacost + popcost)/ metal				metaleconcost = (metalcost + energycost + areacost + popcost)          	if(econcost == 0 || econcost > metaleconcost){          	econcost = metaleconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost == 0 || prodcost > metalprodcost){          	prodcost = metalprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost == 0 || constcost > metalconstcost){          	constcost = metalconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Crystals Mines"){				makeAdjustments(nrow, crystalAdjust)				var crystals = parseInt(td1help_res[2]);				var crystalcost = parseInt(itemcost);				crystalcost = (crystalcost + energycost + areacost)/ crystals          	if(econcost > crystalcost){          	econcost = crystalcost;													table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}			}				if (cname == "Robotic Factories"){				makeAdjustments(nrow, roboticsAdjust)				var robscost = parseInt(itemcost);				robsprodcost = (robscost + energycost + areacost + popcost)/ 2				robsconstcost = (robscost + energycost + areacost + popcost)/ 2				robseconcost = (robscost + energycost + areacost + popcost)          	if(econcost > robseconcost){          	econcost = robseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > robsprodcost){          	prodcost = robsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > robsconstcost){          	constcost = robsconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Shipyards"){				makeAdjustments(nrow, shipyardsAdjust)				var shipscost = parseInt(itemcost);				shipsprodcost = (shipscost + energycost + areacost + popcost)/ 2        shipseconcost = (shipscost + energycost + areacost + popcost)          	if(econcost > shipseconcost){          	econcost = shipseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > shipsprodcost){          	prodcost = shipsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Orbital Shipyards"){				makeAdjustments(nrow, osAdjust)				var oscost = parseInt(itemcost);				osprodcost = (oscost + (energycost*12) + popcost)/8        oseconcost = (oscost + (energycost*12) + popcost)/2          	if(econcost > oseconcost){          	econcost = oseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > osprodcost){          	prodcost = osprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Spaceports"){				makeAdjustments(nrow, spaceportsAdjust)				var Spcost = parseInt(itemcost);				Spcost = (Spcost + energycost + areacost)/ 2          	if(econcost > Spcost){          	econcost = Spcost;							table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}				if (cname == "Nanite Factories"){				makeAdjustments(nrow, naniteAdjust)				var nanicost = parseInt(itemcost);				naniprodcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				naniconstcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				nanieconcost = (nanicost + (energycost*2) + areacost + popcost) /2          	if(econcost > nanieconcost){          	econcost = nanieconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > naniprodcost){          	prodcost = naniprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > naniconstcost){          	constcost = naniconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Androids Factories"){				makeAdjustments(nrow, androidAdjust)				var andrcost = parseInt(itemcost);				andrprodcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andrconstcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andreconcost = (andrcost + (energycost*4) + areacost + popcost) /2          	if(econcost > andreconcost){          	econcost = andreconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > andrprodcost){          	prodcost = andrprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > andrconstcost){          	constcost = andrconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}								if (cname == "Economic Centers"){				makeAdjustments(nrow, economicAdjust)				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*2) + areacost + popcost) /3          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}        if (cname == "Capital"){        makeAdjustments(nrow, capitalAdjust)				basesArray = GM_getValue(server+"Bases")				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*12) + areacost + popcost) / (10+basesArray.length)          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}				        if (cname == "Research Labs"){        makeAdjustments(nrow, researchAdjust)				}					        if (cname == "Command Centers"){        makeAdjustments(nrow, ccAdjust)				}		if (flag == 0){				    	getOptionValue(cname);		if (v==1) {		buttontext=document.createElement("a")		buttontext.href="javascript:document.getElementsByName(\'add_stack\')[0].selectedIndex="+a+"; document.getElementsByTagName(\'form\')[1].submit()"		buttontext.innerHTML = "Queue"			if (buttontext) {			if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){			colnum=3			}else{			colnum=5			}				table.childNodes[nrow].childNodes[colnum].style.whiteSpace=\'nowrap\';				table.childNodes[nrow].childNodes[colnum].appendChild(buttontext);			}	}	if (flag == 0 && nrow==table.childNodes.length-1){						flag =1;						nrow = 1;						}		}}}}}function buttonToSelect(option, text, fallback_text) {}function makeAdjustments(nrow, adjustvar){adjust = adjustvar				if(table.childNodes[nrow].childNodes[6].innerHTML.match(/<span id="time/)){				adjust++ 				}				if(adjust>0){				basecost = parseInt(table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, ""))				time = getSeconds(table.childNodes[nrow].childNodes[5].firstChild.nodeValue)/basecost				time = secsToHMS(time*(Math.round(basecost*Math.pow(1.5, adjust))))				table.childNodes[nrow].childNodes[5].innerHTML = table.childNodes[nrow].childNodes[5].innerHTML + "<br />("+time+") "        table.childNodes[nrow].childNodes[1].innerHTML = table.childNodes[nrow].childNodes[1].innerHTML + " (+"+adjust+")"        table.childNodes[nrow].childNodes[2].firstChild.nodeValue = table.childNodes[nrow].childNodes[2].firstChild.nodeValue + " ("+Math.round((basecost*Math.pow(1.5, adjust)))+")"        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        itemcost = itemcost.replace(/[0-9]+\\(/,"")        itemcost = itemcost.replace(/\\)/, "")        }else{        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        }        }function secsToHMS(seconds){        secVar0 = Math.round(seconds);                            // The initial data, in seconds        minVar = Math.floor(secVar0/60);  // The minutes           hourVar = Math.floor(minVar/60);  // The minutes        minVar = minVar % 60;        secVar = secVar0 % 60;              // The balance of seconds        if(hourVar != 0){        return hourVar+"h "+(minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else if(minVar != 0){        return (minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else{        return (secVar<10?\'0\'+secVar:secVar)+"s"        }                }function getOptionValue(obj){v=0x = document.getElementsByName("add_stack")if(x[0]){x = x[0]for (i=0;i<x.length;i++)    {    if(x.options[i].text == obj){    v=1;	a=i    i = x.length    }    }    }    }/*function insertTimeTextBoxes(){    var inputs = document.forms[1].elements;    for(var i = 0; i < inputs.length; i++)    {        if(inputs[i].className == \'quant\')        {            var row = inputs[i].parentNode.parentNode;            //console.log(row);            var cell = document.createElement("td");            cell.setAttribute("align","center");            cell.innerHTML = \'<input type="text" value="" maxlength="5" size="5" name="\'+inputs[i].name+\' - Time" id="\'+inputs[i].name+\' - Time" class="quant" onchange="update(\\\'\'+inputs[i].name+\'\\\')"/>\';            row.appendChild(cell);            cell.addEventListener(\'keyup\',getConvertTimeToQuantityClosure(row),true);			//cell.addEventListener(\'blur\',onProductionTextBoxChanged,true);        }    }        var tbody = inputs[0].parentNode.parentNode.parentNode;    //console.log(tbody.childNodes[0].firstChild);    //Adjust colspan for top row and third row    tbody.childNodes[0].firstChild.setAttribute("colspan",7);    tbody.childNodes[2].firstChild.setAttribute("colspan",7);    //console.log(tbody.childNodes[1].firstChild);    //Insert column title    var titleCell = document.createElement("th");    titleCell.setAttribute("width","10%");    titleCell.textContent = "Time (h)"    tbody.childNodes[1].appendChild(titleCell);		titleCell.previousSibling.setAttribute("width","10%");    //adjust colspan for all help rows    var helpCells = document.evaluate(    "//td[@class=\'help\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(helpCells.snapshotLength);    for(var i=0;i<helpCells.snapshotLength;i++)    {        helpCells.snapshotItem(i).setAttribute("colspan",6);    }    //adjust colspan for all red rows    var redCells = document.evaluate(    "//td[@class=\'red\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(redCells.snapshotLength);    for(var i=0;i<redCells.snapshotLength;i++)    {        redCells.snapshotItem(i).setAttribute("colspan",2);    }    //adjust colspan for last two rows    document.getElementById("fast").addEventListener("click", function(){var inputs = document.forms[1].elements; for(var i = 0; i < inputs.length; i++){if(inputs[i].className == \'quant\'){if(inputs[i].value == ""){}else{var row = inputs[i].parentNode.parentNode; convertTimeToQuantity(row); unsafeWindow.update(inputs[i].name);}}}}, false)    tbody.childNodes[tbody.childNodes.length-1].firstChild.setAttribute("colspan",7);}*/function getConvertTimeToQuantityClosure(row){    function func(){        convertTimeToQuantity(row);    }    ;    return func;}function convertTimeToQuantity(row){	//console.log(row);    var credits = row.childNodes[2].textContent;    var time = row.childNodes[4].textContent;    var qtyInput = row.childNodes[5].firstChild;    var enteredTime;    try{        enteredTime = parseFloat(row.childNodes[6].firstChild.value);    }    catch(Exception)    {        return;    }    if(isNaN(enteredTime)){    enteredTime = 0    }else{    //console.log("Credits: "+credits+" Time: "+time+" qtyInput: "+ qtyInput.value);    //console.log("entered time: "+isNaN(enteredTime));    var totalSeconds = getSeconds(time);    if(totalSeconds != -1)    {        //console.log("Time " +getTimeDisplay(totalSeconds));        var enteredTimeInSeconds = enteredTime*60*60;        //console.log(enteredTimeInSeconds+" / " +totalSeconds);        if(enteredTimeInSeconds < totalSeconds){			qtyInput.value = "";		}else{			if(document.getElementById("fast").checked == true){			qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)*2			}else{				qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)			}		}    }    onProductionTextBoxKeyUp();    }}function getSeconds(timeString){    var regex = /((\\d|,| |\\.)*h)?\\W?((\\d|,| |\\.)*m)?\\W?((\\d|,| |\\.)*s)?/;    var result = regex.exec(timeString);    if(result)    {        //console.log(result);        var h = 0;var m=0;var s=0;        if(result[1] != null)        h = result[1].substring(0,result[1].indexOf("h"));        if(result[3] != null)        m = result[3].substring(0,result[3].indexOf("m"));        if(result[5] != null)        s = result[5].substring(0,result[5].indexOf("s"));        return h*60*60 + m*60 + s*1;    }    else return -1;}function getTimeDisplay(seconds){    var h = Math.floor(seconds/3600);    var m = Math.floor((seconds % 3600)/60);    var s = Math.floor((seconds % 3600) % 60);    var string = s+"s";    if(m>0 || h>0)		string = m+"m "+string;    if(h>0)		string = h+"h "+string;    return string;}var PRESET_KEYS = new Array("Fighters","Bombers","Heavy Bombers","Ion Bombers","Corvette","Recycler","Destroyer","Frigate","Ion Frigate","Scout Ship", "Outpost Ship","Cruiser","Carrier","Heavy Cruiser","Battleship","Fleet Carrier","Dreadnought","Titan","Leviathan","Death Star","Goods");function onProductionTextBoxKeyUp(){    var shipName;    var count=0,cost=0;    var productionCost = 0;    var totalTime = 0;    for(var i = 0;i <PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.log("Failed to find textBox for "+shipName+".");            continue;        }				if(textBox.value != "")        {            var row = textBox.parentNode.parentNode;            var time = row.childNodes[4].textContent;            //console.log(textBox.value);            count = parseInt(textBox.value);            cost = parseInt(textBox.parentNode.previousSibling.previousSibling.previousSibling.innerHTML.replace(/(,| |\\.)/g, ""));            totalTime+= getSeconds(time) * count;            //console.log(count + " " + shipName + "s @ " + cost);            productionCost += (cost * count);			//textBox.parentNode.nextSibling.value = "";        }    }    //console.log("total Time: "+getTimeDisplay(totalTime));    var fastProduction = document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.checked;    //console.info(fastProduction);    if(fastProduction)	{		productionCost *= 2;		totalTime /= 2;	}    //console.log("Text changed. Total production cost: " +productionCost);    var submitButton = document.evaluate(	    "//input[@type=\'submit\']",	    document,	    null,	    XPathResult.FIRST_ORDERED_NODE_TYPE,	    null).singleNodeValue;    if(productionCost > 0)		submitButton.value = "Submit";    else		submitButton.value = "Submit";}function registerTextBoxEventListeners(){    for(var i = 0;i < PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.info("Failed to find textBox for "+shipName+".");            continue;        }        textBox.addEventListener(\'keyup\',onProductionTextBoxKeyUp,false);		//textBox.addEventListener(\'blur\',onProductionTextBoxChanged,true);    }    document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'change\',onProductionTextBoxKeyUp,false);    //document.evaluate("//input[@type=\'reset\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'click\',onProductionTextBoxKeyUp,true);    document.evaluate("//form[@method=\'post\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'reset\',onProductionTextBoxKeyUp,false);}function productionHelperOnClick(num, box) {	num=num.replace("+", "")	num=num.replace(" ","")	num=num.replace("k","000")		document.getElementById(box).value = parseInt(document.getElementById(box).value) + parseInt(num);     calculateTotals();}function prodHelperEvent(e) {  if (e.shiftKey && (e.name == \'fast\')) {    for (i=0; i<empireLinks.length; i++) {    document.getElementById("fast_"+empireLinks[i]).checked = e.checked;    }  } else if (e.shiftKey && (e.name == \'unit\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("unit_"+empireLinks[i]).selectedIndex = e.selectedIndex;    }  } else if (e.shiftKey && (e.name == \'quant\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("quant_"+empireLinks[i]).value = e.value;    }  }  if ((e.name == \'fast\')||(e.name == \'unit\')||(e.name == \'quant\'))    calculateTotals();}function calculateTotals() {	var pcost = 0;  for (i=0; i<empireLinks.length; i++) {    n = (document.getElementById("fast_"+empireLinks[i]).checked) ? 2 : 1;    pcost += parseInt(ProductionGetCost[document.getElementById("unit_"+empireLinks[i]).selectedIndex] * document.getElementById("quant_"+empireLinks[i]).value * n);	}	document.getElementById(\'cost_all\').innerHTML = pcost+\' credits\';	var credits_left = parseInt(numcredits) - pcost;	document.getElementById(\'cost_all\').style.color = (credits_left < 0) ? \'red\' : \'\';}function resetForm() {  for (i=0; i<empireLinks.length; i++) {    document.getElementById("unit_"+empireLinks[i]).selectedIndex = 0;    document.getElementById("fast_"+empireLinks[i]).checked = false;    document.getElementById("quant_"+empireLinks[i]).value = 0;    returnto = i    calculateTotals();    i=returnto;  }}function startSubmitQueue() {  submitQueue(0);}function submitQueue(i) {    if (document.getElementById("quant_"+empireLinks[i]).value != 0) {      var postData = document.getElementById("unit_"+empireLinks[i]).value+"="+document.getElementById("quant_"+empireLinks[i]).value+"&post_back=true";      if (document.getElementById("fast_"+empireLinks[i]).checked)        postData += "&fast=true";      document.getElementById("quant_"+empireLinks[i]).value = \'ok\';      document.getElementById("quant_"+empireLinks[i]).style.backgroundColor = \'red\';      GM_xmlhttpRequest({        method: "POST",        url: serverurl+"base.aspx?base="+empireLinks[i]+"&view=production",        data: encodeURI(postData),        headers:{\'Content-type\':\'application/x-www-form-urlencoded\'},     		onreadystatechange: function(xhr) {if (xhr.readyState == "4") {endSubmitQueue(i, "1");}}      });    } else {      endSubmitQueue(i, "0");    }}function endSubmitQueue(i, value) {time=1000+Math.floor(Math.random()*1001)  if (i == empireLinks.length-1)    window.setTimeout(function(){ location.reload(true)}, time);  else  if(value == 0){  submitQueue(i+1)  }else{    window.setTimeout(function(){ submitQueue(i+1)}, time);    }}function productionHelper() {  var btn_details = [];  btn_details.push([1,\'+1 \']);  btn_details.push([5,\'+5 \']);  btn_details.push([10,\'+10 \']);  btn_details.push([25,\'+25 \']);  btn_details.push([100,\'+100 \']);  btn_details.push([250,\'+250 \']);  btn_details.push([1000,\'+1k \']);  table.rows[1].childNodes[4].innerHTML = \'Fast Prod\';  table.rows[1].childNodes[5].innerHTML = \'Unit Type\';  table.rows[1].childNodes[6].innerHTML = \'Quantity\';  table.rows[1].childNodes[3].innerHTML = \'Current Queue\';  a=0;  table.firstChild.style.display=\'none\';  for (i=2; i<table.rows.length; i=i+2) {    var currentRow = table.rows[i];		var res = /\\?base=((\\d|,| |\\.)+)/.exec(table.rows[i].childNodes[0].firstChild.href);	  table.rows[i+1].style.display = \'none\';	  empireLinks[a] = res[1];	  a++;	  currentRow.childNodes[3].innerHTML = currentRow.childNodes[5].innerHTML + "<br />" + table.rows[i+1].childNodes[3].innerHTML    currentRow.childNodes[4].innerHTML = "<input type=\'checkbox\' name=\'fast\' class=\'check\' id=\'fast_"+res[1]+"\' onfocus=\\"selectedBox=\'fast_"+res[1]+"\'\\" />";    currentRow.childNodes[6].innerHTML = "<input type=\'text\' name=\'quant\' class=\'quant\' id=\'quant_"+res[1]+"\' size=\'5\' maxlength=\'5\' value=\'0\' onfocus=\\"selectedBox=\'quant_"+res[1]+"\'\\" />";    var html = "<select name=\'unit\' id=\'unit_"+res[1]+"\' onfocus=\\"selectedBox=\'unit_"+res[1]+"\'\\"><option value=\'Fighters\'>Fighters</option><option value=\'Bombers\'>Bombers</option>";    html += "<option value=\'Heavy Bombers\'>Heavy Bombers</option><option value=\'Ion Bombers\'>Ion Bombers</option><option value=\'Corvette\'>Corvette</option>";    html += "<option value=\'Recycler\'>Recycler</option><option value=\'Destroyer\'>Destroyer</option><option value=\'Frigate\'>Frigate</option>"    html += "<option value=\'Ion Frigate\'>Ion Frigate</option><option value=\'Scout Ship\'>Scout Ship</option><option value=\'Outpost Ship\'>Outpost Ship</option>";    html += "<option value=\'Cruiser\'>Cruiser</option><option value=\'Carrier\'>Carrier</option><option value=\'Heavy Cruiser\'>Heavy Cruiser</option>";    html += "<option value=\'Battleship\'>Battleship</option><option value=\'Fleet Carrier\'>Fleet Carrier</option><option value=\'Dreadnought\'>Dreadnought</option>";    html += "<option value=\'Titan\'>Titan</option><option value=\'Leviathan\'>Leviathan</option><option value=\'Death Star\'>Death Star</option></select>";    currentRow.childNodes[5].innerHTML = html;    document.getElementById("unit_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("quant_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("fast_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    for(c=0; c<7; c++) {      var num = btn_details[c][0];      l = document.createElement("a");		l.href = "javascript:void(1);";		l.id= i + btn_details[c][1];		l.innerHTML = btn_details[c][1];            l.name = "quant_"+res[1];      currentRow.childNodes[6].appendChild(l);      document.getElementById(i + btn_details[c][1]).addEventListener(\'click\', function(){ productionHelperOnClick(this.innerHTML, this.name );}, true);    }  }  l = document.createElement("tr");  l.id="extrarow1";  table.appendChild(l);  l = document.createElement("td");		l.innerHTML = "0 credits";      l.className = \'help\';      l.align = "right";      l.id="cost_all"      document.getElementById("extrarow1").appendChild(l);      document.getElementById("cost_all").colSpan="7";      l = document.createElement("tr");      l.id="extrarow2";      table.appendChild(l);      l = document.createElement("td");      l.className = \'help\';      l.align = "right";          l.id="prodHelperButtons"      document.getElementById("extrarow2").appendChild(l);      document.getElementById("prodHelperButtons").colSpan="7";      l = document.createElement("input");      l.type = "reset";      l.id = "resetButton";      l.value = "Reset";      document.getElementById("prodHelperButtons").appendChild(l);      l = document.createElement("input");      l.type = "submit";      l.id = "submitButton";      l.value = "submit";      document.getElementById("prodHelperButtons").appendChild(l);   document.getElementById("submitButton").addEventListener(\'click\', function(){ startSubmitQueue();}, true);  document.getElementById("resetButton").addEventListener(\'click\', function(){ resetForm();}, true);}function productionHelperButton() {		table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;		var prodTitle = table.childNodes[1].childNodes[5];		scoutButton = document.createElement("a");		scoutButton.href = "javascript:void(1);";		scoutButton.id= "prodHelperButton";		scoutButton.innerHTML=" [&#177;]";		scoutButton.title = "Production Helper"		prodTitle.appendChild(scoutButton)		document.getElementById(\'prodHelperButton\').addEventListener(\'click\', function() {productionHelper();}, true);	}function saveTechData(){    //console.log("Saving tech data");    var techData = new Array();    var rows = document.evaluate(    "//tr[@align=\'center\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log("Tech rows: "+ rows.snapshotLength);    for (var i = 0; i < rows.snapshotLength; i++)    {        var techNameCell = document.evaluate(        "th[1]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        var techValueCell = document.evaluate(        "td[4]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        if(techNameCell.snapshotLength > 0)        {            var techValue = parseInt(techValueCell.snapshotItem(0).innerHTML.replace(/(,| |\\.)/g, ""));            var techName = techNameCell.snapshotItem(0).innerHTML;            //console.log(techName +": "+techValue);            techData[i] = techValue;        }    }    GM_setValue(server+"techData",techData.join());}/* function scannerGrab(){tableArray = document.getElementsByTagName("table")for(i=0; i<tableArray.length; i++){if(tableArray[i].innerHTML.match(/<th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=fleet">Fleet<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=player">Player<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=destination">Destination<\\/a><\\/th><th width="20%"><a href="empire.aspx\\?view=scanners&amp;order=arrival">Arrival<\\/a><\\/th><th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=size">Size<\\/a><\\/th>/)){table = tableArray[i]fleetId = []fleetName = []fleetOwner = []ownerId = []fleetDest = []fleetArrive = []fleetSize = []for(a=1; a<table.rows.length; a++){fleetId[a-1] = table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=/, "") fleetId[a-1] = fleetId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetName[a-1]=table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetName[a-1]=fleetName[a-1].replace(/<\\/a>/, "");fleetOwner[a-1]=table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=[0-9]{1,}">/, "")fleetOwner[a-1]=fleetOwner[a-1].replace(/<\\/a>/, "");ownerId[a-1] =table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=/, "")ownerId[a-1] = ownerId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetDest[a-1]=table.rows[a].childNodes[2].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)fleetArrive[a-1]=parseInt(table.rows[a].childNodes[3].title)+Math.round(new Date().getTime()/1000.0)fleetSize[a-1]=table.rows[a].childNodes[4].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetSize[a-1]=fleetSize[a-1].replace(/<\\/a>(.*?)/, "");fleetSize[a-1]=fleetSize[a-1].replace(/(,| |.)/, "");}sendData = "&fleetId="+fleetId+"&fleetName="+fleetName+"&fleetOwner="+fleetOwner+"&ownerId="+ownerId+"&fleetDest="+fleetDest+"&fleetArrive="+fleetArrive+"&fleetSize="+fleetSize+"&seenBy="+document.getElementById(\'account\').parentNode.childNodes[1].innerHTML.replace(/[A-Za-z]./, \'\')if(GIAServers.inArray(server)){sendtoserver(sendData, "scanners.php")}}}}*/// If NS -- that is, !IE -- then set up for mouse capturedocument.captureEvents(Event.MOUSEMOVE)// Set-up to use getMouseXY function onMouseMovedocument.addEventListener("mousemove", function(e) {getMouseXY(e)}, true);// Temporary variables to hold mouse x-y pos.svar tempX = 0var tempY = 0// Main function to retrieve mouse x-y pos.sfunction getMouseXY(e) {// grab the x-y pos.s if browser is NS    tempX = e.pageX    tempY = e.pageY  // catch possible negative values in NS4  if (tempX < 0){tempX = 0}  if (tempY < 0){tempY = 0}  // show the position values in the form named Show  // in the text fields named MouseX and MouseY  return true}function linkEventListeners(){if(GIAServers.inArray(server)){linkArray=document.getElementsByTagName("a")for(i=0; i<linkArray.length; i++){if(linkArray[i].href.match(/map.aspx\\?(.*?)loc=E[0-9]{2}:[0-9]{2}:[0-9]{2}/)){linkArray[i].addEventListener("mouseover", function(e) {showBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""), tempX, tempY)}, true);linkArray[i].addEventListener("mouseout", function() {hideBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""))}, true);}}}}function linkChange(){	linkArray=document.getElementsByTagName(\'a\')	for(i=0; i < linkArray.length; i++){		linkArray[i].target = "_blank"	}}  ////////////////////////////////////////// /// Execution //////////////////////////////////////////////////////////////////////if(document.location.href.match(/astroempires.com/)){replaceTime();if(document.location.href.match(/loc=[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){	if(document.body.innerHTML.match(/<th colspan=.4.>Base<\\/th>/)){	if(GIAServers.inArray(server)){	centerArray=document.getElementsByTagName(\'center\')	for(i=0; i<centerArray.length; i++){	if(centerArray[i].innerHTML.match(/Astro Type:/)){	baseLink = document.body.innerHTML.match(/base.aspx\\?base=[0-9]{1,}/)[0]	sourceDiv = document.createElement("div")	sourceDiv.id="baseDiv";	sourceDiv.innerHTML="Visit the <a href=\\""+baseLink+"\\">base page</a> to add this base to GIA.<br /><br />";	centerArray[i].appendChild(sourceDiv)	}	}	}	}}else if(document.location.href.match(/[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}/)){	debrisShow()}else if(document.location.href.match(/http:\\/\\/(.+?)\\.astroempires\\.com\\/base\\.aspx\\?base=[0-9]{1,}$/)){	if(window.parent.document.location.href != document.location.href){	baseDetails();	}}else if(document.location.href.match(/empire.aspx$/) || document.location.href.match(/empire.aspx\\?view=bases_events$/)){	productionHelperButton();}else if(document.location.href.match(/view=scanners/)){	scannerFormat();}else if(window.location.href.match(/empire.aspx\\?view=fleets/)){        sumShips();}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=structures/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=defenses/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){	if(!document.location.href.match(/&info=/)){enhanceConstructionPage();}}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=production/)){insertTimeTextBoxes()}if(window.location.href.indexOf(\'view=move\')==-1 && window.location.href.indexOf(\'view=fleets\')==-1 &&		window.location.href.indexOf(\'view=production\')==-1 && window.location.href.indexOf(\'view=structures\')==-1 &&		window.location.href.indexOf(\'view=trade\')==-1 && window.location.href.indexOf(\'view=research\')==-1){		formatVariousNumbers();	}	}',
                                                           'auto_upgrade' => 1,
                                                           'max_memory_size' => 262144
                                                         }, 'Mojo::Asset::Memory' ),
                                       'pre_buffer' => ''
                                     }, 'Mojo::Content::Single' ),
                 'max_message_size' => 10485760,
                 'version' => '1.0',
                 'events' => {},
                 'buffer' => '',
                 'env' => {
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'psgi.streaming' => 1,
                            'SCRIPT_NAME' => '',
                            'psgi.run_once' => '',
                            'SERVER_PORT' => 5000,
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'psgix.io' => bless( \*Symbol::GEN1, 'IO::Socket::INET' ),
                            'psgi.url_scheme' => 'http',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'REQUEST_URI' => '/ae/gia',
                            'psgix.harakiri' => 1,
                            'REMOTE_ADDR' => '127.0.0.1',
                            'REMOTE_PORT' => 54481,
                            'psgi.input' => bless( \*{'Stream::Buffered::PerlIO::$io'}, 'FileHandle' ),
                            'REQUEST_METHOD' => 'POST',
                            'SERVER_NAME' => 0,
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'psgi.multithread' => '',
                            'PATH_INFO' => '/ae/gia',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'HTTP_ACCEPT' => '*/*',
                            'psgix.input.buffered' => 1,
                            'QUERY_STRING' => '',
                            'HTTP_HOST' => 'localhost',
                            'CONTENT_LENGTH' => '63681',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'HTTP_CONNECTION' => 'close',
                            'psgi.errors' => *::STDERR,
                            'psgi.nonblocking' => '',
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'psgi.multiprocess' => ''
                          }
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:50:30 2014] [debug] 200 OK (0.101630s, 9.840/s).
[Wed Oct 22 13:50:31 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:50:31 2014] [debug] POST "/ae/gia".
[Wed Oct 22 13:50:31 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 13:50:31 2014] [debug] $VAR1 = bless( {
                 'max_message_size' => 10485760,
                 'events' => {},
                 'buffer' => '',
                 'version' => '1.0',
                 'env' => {
                            'HTTP_CONNECTION' => 'close',
                            'psgi.multiprocess' => '',
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'psgi.nonblocking' => '',
                            'psgi.errors' => *::STDERR,
                            'psgi.multithread' => '',
                            'PATH_INFO' => '/ae/gia',
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'REQUEST_METHOD' => 'POST',
                            'SERVER_NAME' => 0,
                            'HTTP_HOST' => 'localhost',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'CONTENT_LENGTH' => '63681',
                            'HTTP_ACCEPT' => '*/*',
                            'QUERY_STRING' => '',
                            'psgix.input.buffered' => 1,
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'REQUEST_URI' => '/ae/gia',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'psgi.url_scheme' => 'http',
                            'psgi.input' => bless( \*{'Stream::Buffered::PerlIO::$io'}, 'FileHandle' ),
                            'REMOTE_PORT' => 54483,
                            'REMOTE_ADDR' => '127.0.0.1',
                            'psgix.harakiri' => 1,
                            'SCRIPT_NAME' => '',
                            'psgi.streaming' => 1,
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'psgix.io' => bless( \*Symbol::GEN2, 'IO::Socket::INET' ),
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'SERVER_PORT' => 5000,
                            'psgi.run_once' => ''
                          },
                 'state' => 'finished',
                 'raw_size' => 0,
                 'finished' => 1,
                 'url' => bless( {
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia'
                                                    }, 'Mojo::Path' ),
                                   'base' => bless( {
                                                      'host' => 'localhost',
                                                      'path' => bless( {
                                                                         'trailing_slash' => '',
                                                                         'charset' => 'UTF-8',
                                                                         'parts' => [],
                                                                         'leading_slash' => ''
                                                                       }, 'Mojo::Path' ),
                                                      'port' => '',
                                                      'scheme' => 'HTTP'
                                                    }, 'Mojo::URL' )
                                 }, 'Mojo::URL' ),
                 'method' => 'POST',
                 'content' => bless( {
                                       'auto_upgrade' => 1,
                                       'size' => 63681,
                                       'real_size' => 63681,
                                       'headers' => bless( {
                                                             'normalcase' => {
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-real-ip' => 'X-REAL-IP'
                                                                             },
                                                             'headers' => {
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ],
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'content-length' => [
                                                                                                  '63681'
                                                                                                ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ]
                                                                          }
                                                           }, 'Mojo::Headers' ),
                                       'pre_buffer' => '',
                                       'asset' => bless( {
                                                           'max_memory_size' => 262144,
                                                           'auto_upgrade' => 1,
                                                           'content' => '// ==UserScript==// @name           GIA Script (Modified)// @author          Luke Bonaccorsi AKA SpeedySurfer// @namespace       http://gears.speedysurfer.co.uk// @description     Scouts for bases in the current region// @license         Creative Commons Attribution License// @include        http://*.astroempires.com/*// @exclude        http://*.astroempires.com/login.aspx// @exclude        http://*.astroempires.com/home.aspx// ==/UserScript==/* * This file is a Greasemonkey user script. To install it, you need  * the Firefox plugin "Greasemonkey" (URL: http://greasemonkey.mozdev.org/) * After you installed the extension, restart Firefox and revisit  * this script. Now you will see a new menu item "Install User Script" * in your tools menu. *  * To uninstall this script, go to your "Tools" menu and select  * "Manage User Scripts", then select this script from the list * and click uninstall :-) * * Creative Commons Attribution License (--> or Public Domain) * http://creativecommons.org/licenses/by/2.5/*/  ////////////////////////////////////////// /// Variables //////////////////////////////////////////////////////////////////////if (document.location.href.match(/(.+?)astroempires.com/)){var server=document.location.href.match(/\\/(.+?).astroempires.com/)[1]server = server.replace(/\\//, "")var serverurl= "http://"+server+".astroempires.com/"}if(document.location.href.match(/astroempires.com/)){var empireLinks = []; var ProductionGetCost = [5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000]; var numcredits = document.evaluate(    "/html/body/table/tbody/tr/th/table/tbody/tr[2]/th[2]",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    numcredits = numcredits.snapshotItem(0).innerHTML;var FT_INDEX = 0;var BO_INDEX = 1;var HB_INDEX = 2;var IB_INDEX = 3;var CV_INDEX = 4;var RC_INDEX = 5;var DE_INDEX = 6;var FR_INDEX = 7;var IF_INDEX = 8;var SS_INDEX = 9;var OS_INDEX = 10;var CR_INDEX = 11;var CA_INDEX = 12;var HC_INDEX = 13;var BC_INDEX = 14;var FC_INDEX = 15;var DN_INDEX = 16;var TI_INDEX = 17;var LE_INDEX = 18;var DS_INDEX = 19;var BARRACKS_INDEX = 20;var LASER_TURRETS_INDEX = 21;var MISSLE_TURRETS_INDEX = 22;var PLASMA_TURRENTS_INDEX = 23;var ION_TURRETS_INDEX = 24;var PHOTON_TURRETS_INDEX = 25;var DISRUPTOR_TURRETS_INDEX = 26;var DEFLECTION_SHIELDS_INDEX = 27;var PLANETARY_SHIELD_INDEX = 28;var PLANETARY_RING_INDEX = 29;var fightingShips = "11111011100101101111";var shipValues = new Array(5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000);var shipHangarValues = new Array(0,0,0,0,0,0,0,4,4,0,0,4,60,8,40,400,200,1000,4000,10000);var GIAServers = new Array("bravo");}  ////////////////////////////////////////// /// Misc /////////////////////////////////////////////////////////////////////////Array.prototype.inArray = function (value)// Returns true if the passed value is found in the// array. Returns false if it is not.{var i;for (i=0; i < this.length; i++) {// Matches identical (===), not just similar (==).if (this[i] === value) {return true;}}return false;};function replaceTime(){	  for(n=1;n<=500;n++)	  {		elem=document.getElementById(\'time\'+n);	    if (!elem)	    {	       break;	    }	    elem.id = \'blah\'+n;	    s=elem.title;	    var newElement, endTime;	    var d = new Date();	    var now = new Date();	    if (elem)	    {	       if(s<=0)	       {		 endTime="-"	       }	       else	       {		 d.setTime(d.getTime()+(s*1000));		 tempdate = new Date();		 tempdate.setDate(tempdate.getDate()+1)		 if(now.toLocaleDateString() == d.toLocaleDateString() )		 {		    endTime="Today @ "+d.formatDate(\'H:i:s\');		 }		 else if(tempdate.toLocaleDateString() == d.toLocaleDateString())		 {		    endTime="Tomorrow @ "+d.formatDate(\'H:i:s\');		 }		 else		 {		    endTime=d.formatDate(\'D jS M @ H:i:s\');		 }	       }	       elem.innerHTML = "<b><span id=\'time"+n+"\' title=\'"+ s +"\'>-</span></b><br><nobr><span id=\'done"+n+"\' style=\'font-size: xx-small; color: "+getAgeCol(s)+"\'>" + endTime + "</span></nobr>"	    }	  }};  // formatDate :// a PHP date like function, for formatting date strings// authored by Svend Tofte <www.svendtofte.com>// the code is in the public domain//// see http://www.svendtofte.com/javascript/javascript-date-string-formatting/// and http://www.php.net/date//// thanks to//  - Daniel Berlin <mail@daniel-berlin.de>,//    major overhaul and improvements//  - Matt Bannon,//    correcting some stupid bugs in my days-in-the-months list!//  - levon ghazaryan. pointing out an error in z switch.//  - Andy Pemberton. pointing out error in c switch//// input : format string// time : epoch time (seconds, and optional)//// if time is not passed, formatting is based on// the current "this" date object\'s set time.//// supported switches are// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L),// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z//// unsupported (as compared to date in PHP 5.1.3)// T, e, oDate.prototype.formatDate = function (input,time) {    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday",                       "Thursday", "Friday", "Saturday"];    var daysShort =   ["Sun", "Mon", "Tue", "Wed",                       "Thu", "Fri", "Sat"];    var monthsShort = ["Jan", "Feb", "Mar", "Apr",                       "May", "Jun", "Jul", "Aug", "Sep",                       "Oct", "Nov", "Dec"];    var monthsLong =  ["January", "February", "March", "April",                       "May", "June", "July", "August", "September",                       "October", "November", "December"];    var switches = { // switches object        a : function () {            // Lowercase Ante meridiem and Post meridiem            return date.getHours() > 11? "pm" : "am";        },        A : function () {            // Uppercase Ante meridiem and Post meridiem            return (this.a().toUpperCase ());        },        B : function (){            // Swatch internet time. code simply grabbed from ppk,            // since I was feeling lazy:            // http://www.xs4all.nl/~ppk/js/beat.html            var off = (date.getTimezoneOffset() + 60)*60;            var theSeconds = (date.getHours() * 3600) +                             (date.getMinutes() * 60) +                              date.getSeconds() + off;            var beat = Math.floor(theSeconds/86.4);            if (beat > 1000) beat -= 1000;            if (beat < 0) beat += 1000;            if ((String(beat)).length == 1) beat = "00"+beat;            if ((String(beat)).length == 2) beat = "0"+beat;            return beat;        },        c : function () {            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" +                    this.H() + ":" + this.i() + ":" + this.s() + this.P());        },        d : function () {            // Day of the month, 2 digits with leading zeros            var j = String(this.j());            return (j.length == 1 ? "0"+j : j);        },        D : function () {            // A textual representation of a day, three letters            return daysShort[date.getDay()];        },        F : function () {            // A full textual representation of a month            return monthsLong[date.getMonth()];        },        g : function () {           // 12-hour format of an hour without leading zeros, 1 through 12!           if (date.getHours() == 0) {               return 12;           } else {               return date.getHours()>12 ? date.getHours()-12 : date.getHours();           }       },        G : function () {            // 24-hour format of an hour without leading zeros            return date.getHours();        },        h : function () {            // 12-hour format of an hour with leading zeros            var g = String(this.g());            return (g.length == 1 ? "0"+g : g);        },        H : function () {            // 24-hour format of an hour with leading zeros            var G = String(this.G());            return (G.length == 1 ? "0"+G : G);        },        i : function () {            // Minutes with leading zeros            var min = String (date.getMinutes ());            return (min.length == 1 ? "0" + min : min);        },        I : function () {            // Whether or not the date is in daylight saving time (DST)            // note that this has no bearing in actual DST mechanics,            // and is just a pure guess. buyer beware.            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");            return (noDST.getTimezoneOffset () ==                    date.getTimezoneOffset () ? 0 : 1);        },        j : function () {            // Day of the month without leading zeros            return date.getDate();        },        l : function () {            // A full textual representation of the day of the week            return daysLong[date.getDay()];        },        L : function () {            // leap year or not. 1 if leap year, 0 if not.            // the logic should match iso\'s 8601 standard.            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html            var Y = this.Y();            if (                (Y % 4 == 0 && Y % 100 != 0) ||                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)                ) {                return 1;            } else {                return 0;            }        },        m : function () {            // Numeric representation of a month, with leading zeros            var n = String(this.n());            return (n.length == 1 ? "0"+n : n);        },        M : function () {            // A short textual representation of a month, three letters            return monthsShort[date.getMonth()];        },        n : function () {            // Numeric representation of a month, without leading zeros            return date.getMonth()+1;        },        N : function () {            // ISO-8601 numeric representation of the day of the week            var w = this.w();            return (w == 0 ? 7 : w);        },        O : function () {            // Difference to Greenwich time (GMT) in hours            var os = Math.abs(date.getTimezoneOffset());            var h = String(Math.floor(os/60));            var m = String(os%60);            h.length == 1? h = "0"+h:1;            m.length == 1? m = "0"+m:1;            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;        },        P : function () {            // Difference to GMT, with colon between hours and minutes            var O = this.O();            return (O.substr(0, 3) + ":" + O.substr(3, 2));        },        r : function () {            // RFC 822 formatted date            var r; // result            //  Thu         ,     21               Dec              2000            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +            //    16          :    01          :    07               0200            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();            return r;        },        s : function () {            // Seconds, with leading zeros            var sec = String (date.getSeconds ());            return (sec.length == 1 ? "0" + sec : sec);        },        S : function () {            // English ordinal suffix for the day of the month, 2 characters            switch (date.getDate ()) {                case  1: return ("st");                case  2: return ("nd");                case  3: return ("rd");                case 21: return ("st");                case 22: return ("nd");                case 23: return ("rd");                case 31: return ("st");                default: return ("th");            }        },        t : function () {            // thanks to Matt Bannon for some much needed code-fixes here!            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];            if (this.L()==1 && this.n()==2) return 29; // ~leap day            return daysinmonths[this.n()];        },        U : function () {            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)            return Math.round(date.getTime()/1000);        },        w : function () {            // Numeric representation of the day of the week            return date.getDay();        },        W : function () {            // Weeknumber, as per ISO specification:            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            var DoW = this.N ();            var DoY = this.z ();            // If the day is 3 days before New Year\'s Eve and is Thursday or earlier,            // it\'s week 1 of next year.            var daysToNY = 364 + this.L () - DoY;            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {                return 1;            }            // If the day is within 3 days after New Year\'s Eve and is Friday or later,            // it belongs to the old year.            if (DoY <= 2 && DoW >= 5) {                return new Date (this.Y () - 1, 11, 31).formatDate ("W");            }            var nyDoW = new Date (this.Y (), 0, 1).getDay ();            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier                return (1 + Math.floor ((DoY + nyDoW) / 7));            } else {  // First day of the year is a Friday or later                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));            }        },        y : function () {            // A two-digit representation of a year            var y = String(this.Y());            return y.substring(y.length-2,y.length);        },        Y : function () {            // A full numeric representation of a year, 4 digits            // we first check, if getFullYear is supported. if it            // is, we just use that. ppks code is nice, but wont            // work with dates outside 1900-2038, or something like that            if (date.getFullYear) {                var newDate = new Date("January 1 2001 00:00:00 +0000");                var x = newDate .getFullYear();                if (x == 2001) {                    // i trust the method now                    return date.getFullYear();                }            }            // else, do this:            // codes thanks to ppk:            // http://www.xs4all.nl/~ppk/js/introdate.html            var x = date.getYear();            var y = x % 100;            y += (y < 38) ? 2000 : 1900;            return y;        },        z : function () {            // The day of the year, zero indexed! 0 through 366            var s = "January 1 " + this.Y() + " 00:00:00 GMT" + this.O();            var t = new Date(s);            var diff = date.getTime() - t.getTime();            return Math.floor(diff/1000/60/60/24);        },        Z : function () {            // Timezone offset in seconds            return (date.getTimezoneOffset () * -60);        }    }    function getSwitch(str) {        if (switches[str] != undefined) {            return switches[str]();        } else {            return str;        }    }    var date;    if (time) {        var date = new Date (time);    } else {        var date = this;    }    var formatString = input.split("");    var i = 0;    while (i < formatString.length) {        if (formatString[i] == "%") {            // this is our way of allowing users to escape stuff            formatString.splice(i,1);        } else {            formatString[i] = getSwitch(formatString[i]);        }        i++;    }    return formatString.join("");}// Some (not all) predefined format strings from PHP 5.1.1, which// offer standard date representations.// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants//// Atom      "2005-08-15T15:52:01+00:00"Date.DATE_ATOM    = "Y-m-d%TH:i:sP";// ISO-8601  "2005-08-15T15:52:01+0000"Date.DATE_ISO8601 = "Y-m-d%TH:i:sO";// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"Date.DATE_RFC2822 = "D, d M Y H:i:s O";// W3C       "2005-08-15 15:52:01+00:00"Date.DATE_W3C     = "Y-m-d%TH:i:sP";function getAgeCol(age) {		var col = \'#461B7E\'; // 72 hours +		if (age <= 3600)			col = \'#FFFFFF\'; // 1 hour		else if (age <=10800)			col = \'#FFFFFF\'; // 3 hours		else if (age <=21600)			col = \'#9E7BFF\'; // 6 hours		else if (age <=43200)			col = \'#9172EC\'; // 12 hours		else if (age <=86400)			col = \'#8467D7\'; // 24 hours		else if (age <=172800)			col = \'#7A5DC7\'; // 48 hours		else if (age <=259200)			col = \'#461B7E\'; // 72 hours		return col;}function debrisShow(){	spanArray = document.getElementsByTagName("span")	for(i=0; i<spanArray.length; i++){		if(spanArray[i].getAttribute("class") == "gray"){		spanArray[i].innerHTML = spanArray[i].title		}	}}function formatVariousNumbers(){	var debrisElement = document.evaluate(    "//center[contains(text(),\'Debris\')]",    document,    null,    XPathResult.FIRST_ORDERED_NODE_TYPE,    null).singleNodeValue;    if(debrisElement !=null)    {        var debrisMessage = debrisElement.textContent;        console.log(debrisMessage);        var indexOfText = debrisMessage.indexOf(" credits");        var valueText = debrisMessage.substring(0,indexOfText);        var value = commaFormat(parseInt(valueText));        //console.log(valueText+" new value:" +value.toString());        //console.log(debrisElement.textContent + " -< " + debrisElement.textContent.replace(valueText,value.toString()));        debrisElement.textContent = debrisElement.textContent.replace(valueText,value.toString());    }}function scannerFormat(){	baseArray=document.getElementsByTagName("a")	bases = GM_getValue(server+"Bases")	for(i=0; i<baseArray.length; i++){		if(baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){			basecoord=baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)			if(bases.match(basecoord)){			baseArray[i].setAttribute("style", "color: red; font-weight: normal;")			}		}	}}var galaxyInfoArrays = new Array();function getGalaxyInfoArray(galaxy){	if(galaxyInfoArrays[galaxy]==undefined)	{		var newArray = new Array(20);		for(var i = 0; i < 20;i++)		{			newArray[i] = 0;		}		galaxyInfoArrays[galaxy] = new Array(galaxy,0,newArray,0,0);//[galaxy number],[mobile fleet count],[mobilefleetarray],[total fighting fleet],[total fleet],	}	return galaxyInfoArrays[galaxy];}function isBase(base){	bases = GM_getValue(server+"Bases")    if(bases==null)    return false;    if(bases.match(base)){        return true;    }else{    return false;	}}function insertTotalsRow(node,sums,mobileSums,fleetCount,mobileFleetCount,overallFleetTotal,overallFightingFleetTotal,overallMobileFleetTotal,overallMobileFightingFleetTotal){    	//GALAXY ROWS	for(var i = 0;i<galaxyInfoArrays.length;i++)	{		var galaxyInfoArray = galaxyInfoArrays[i];		if(galaxyInfoArray==undefined || galaxyInfoArray[1] == 0)			continue;				var sumRow = document.createElement("tr");	    sumRow.setAttribute(\'align\',\'center\');	    	    var element = sumRow.insertCell(0);	    element.textContent = "Mobile Fleets ("+i+")";	    element = sumRow.insertCell(1);	    element.textContent = galaxyInfoArray[1];	    		var galaxyFleetSums = galaxyInfoArray[2];		for(var k = 0; k < 20; k++)	    {	        //console.log(sums[k]);	        var cell = document.createElement("td");	        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	        if(galaxyFleetSums[k] > 0)				cell.innerHTML = "<small>"+galaxyFleetSums[k]+"</small>";	        //console.log(element);	        sumRow.insertBefore(cell,null);	    }	    //Add totals cell	    var cell = document.createElement("td");	    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	    cell.innerHTML =galaxyInfoArray[3] +" / "+ galaxyInfoArray[4];	    //console.log(element);	    sumRow.insertBefore(cell,null);	    node.insertBefore(sumRow,null);	}	//MOBILE ROW	var sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    var element = sumRow.insertCell(0);    element.textContent = "Total Mobile Fleets";    element = sumRow.insertCell(1);    element.textContent = mobileFleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(mobileSums[k] > 0)			cell.innerHTML = "<small>"+mobileSums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallMobileFightingFleetTotal +" / "+ overallMobileFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);    //TOTAL ROW    sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    element = sumRow.insertCell(0);    element.textContent = "Total Fleets";    element = sumRow.insertCell(1);    element.textContent = fleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(sums[k] > 0)			cell.innerHTML = "<small>"+sums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallFightingFleetTotal +" / "+ overallFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);}function node(opt) {  function attr(name) {    var value = opt[name];    delete opt[name];    return value;  }  var expandos = { id: 1, className: 1, title: 1, type: 1, checked: 1 };  var id = opt.id;  var n = document.getElementById(id);  if (!n) {    var tag = attr("tag") || "div";    if ("string" == typeof tag)      n = document.createElement(tag);    else {      var t = document.createElement("div");      t.innerHTML = tag.toXMLString();      var ids = {};      for each (var n in $x(\'.//*[@id]\', t))        ids[n.id] = 1;      if (!n) ids = null;      var r = document.createRange();      r.selectNodeContents(t);      n = r.extractContents();      if (n.childNodes.length == 1)        n = n.firstChild;    }    var after = attr("after");    var before = opt.prepend ? opt.prepend.firstChild : attr("before");    var parent = attr("prepend") || attr("append") ||                   (before || after || {}).parentNode;    if (parent) {      if (before)        parent.insertBefore(n, before);      else if (after)        parent.insertBefore(n, after.nextSibling);      else        parent.appendChild(n);    }    if (id) n.id = id;  }  var html = attr("html");  if ("undefined" != typeof html) n.innerHTML = html;  var text = attr("text");  if ("undefined" != typeof text) n.textContent = text;  var style = attr("style");  if (style)    for (var prop in style)      n.style[prop] = style[prop];  for (prop in opt)    if (expandos[prop])      n[prop] = opt[prop];    else      n.setAttribute(prop, opt[prop]+"");  if (ids)    for (var id in ids)      ids[id] = document.getElementById(id);  return ids || n;}function enhanceConstructionPage() {  urbanAdjust = 0;  solarAdjust = 0;  gasAdjust = 0;  fusionAdjust = 0;  antimatterAdjust = 0;  researchAdjust = 0;  metalAdjust = 0;  crystalAdjust = 0;  roboticsAdjust = 0;  shipyardsAdjust = 0;  osAdjust = 0;  spaceportsAdjust = 0;  ccAdjust = 0;  naniteAdjust = 0;  androidAdjust = 0;  economicAdjust = 0;  terraformAdjust = 0;  mlpAdjust = 0;  orbitalbaseAdjust = 0;  jgAdjust = 0;  biosphereAdjust = 0;  capitalAdjust = 0;  barrackAdjust = 0;  laserAdjust = 0;  missileAdjust = 0;  plasmabaseAdjust = 0;  ionAdjust = 0;  photonAdjust = 0;  disruptorAdjust = 0;  deflectionAdjust = 0;  pshieldAdjust = 0;  pringAdjust = 0;  tableArray = document.getElementsByTagName("table")  for(i=0; i<tableArray.length; i++){  if(tableArray[i].innerHTML.match(/<th colspan=.2.>Construction Queue<.th>/)){  for(a=1; a<tableArray[i].childNodes[0].childNodes.length; a++){  if(!tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/<select name=.add_stack.>/)){  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Urban Structures/))  urbanAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Solar Plants/))  solarAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Gas Plants/))  gasAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Fusion Plants/))  fusionAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Antimatter Plants/))  antimatterAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Research Labs/))  researchAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Metal Refineries/))  metalAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Crystal Mines/))  crystalAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Robotic Factories/))  roboticsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Shipyards/) && !tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  shipyardsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  osAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Spaceports/))  spaceportsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Command Centers/))  ccAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Nanite Factories/))  naniteAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Androids Factories/))  androidAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Economic Centers/))  economicAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Terraform/))  terraformAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Multi-Level Platforms/))  mlpAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Base/))  orbitalbaseAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Jump Gate/))  jgAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Biosphere Modification/))  biosphereAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Capital/))  capitalAdjust++;}  }  }  }	table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;	var i_lastcolumn = 5;	var forms = document.getElementsByTagName(\'form\');	if (!table.innerHTML.match(/The research of this base is linked to/)){	if (table && table.childNodes.length > 4) {		table.childNodes[0].style.display=\'none\';		table.childNodes[2].style.display=\'none\';		for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {			if(!table.childNodes[nrow].innerHTML.match(/Research Labs linked to this base research./)){			table.childNodes[nrow+1].style.display=\'none\';			}		}	}	techmultipliers=GM_getValue(server+"techData", "0").split(",")	var energytechmultiplier = (techmultipliers[0]*0.05)+1;	var averageroute = GM_getValue(server+"averageRoute", "31");	var fertility = 0;	var uspopcost = 0;	var obpopcost = 0;	var obcostparentnode = 0;	var popcost = 0;	var areacost = 0;	var energycost = 0;	var econcost = 0;	var prodcost = 0;	var constcost = 0;	var flag = 0;	var bestAreaSignifier = node({tag: \'span\', html: \' <br /> (Best Area)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEconSignifier = node({tag: \'span\', html: \' <br /> (Best Econ)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestProdSignifier = node({tag: \'span\', html: \' <br /> (Best Prod)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestConstSignifier = node({tag: \'span\', html: \' <br /> (Best Const)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestPopSignifier = node({tag: \'span\', html: \' <br /> (Best Pop)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEnergySignifier = node({tag: \'span\', html: \' <br /> (Best Energy)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {		if(!table.childNodes[nrow].innerHTML.match(/linked to this base research./)){		var cname = table.childNodes[nrow].childNodes[1].firstChild.firstChild.firstChild.firstChild.nodeValue + table.childNodes[nrow].childNodes[1].firstChild.firstChild.childNodes[1].nodeValue;		if (location.search.indexOf(\'view=structures\')!=-1) {			table.childNodes[nrow].title = cname;			var td1help_res = table.childNodes[nrow+1].innerHTML.match(/(fertility|metal resource|crystals resource).\\((.+?)\\)/)			if (td1help_res) {			if (flag == 0){				if(td1help_res[1]=="fertility"){				var td1help = "&nbsp;(Fert "+td1help_res[2]+")"				}else if(td1help_res[1]=="metal resource"){				var td1help = "&nbsp;(Metal "+td1help_res[2]+")"				}else if(td1help_res[1]=="crystals resource"){				var td1help = "&nbsp;(Crystal "+td1help_res[2]+")"				}				var d = table.childNodes[nrow].childNodes[1].innerHTML + td1help;				table.childNodes[nrow].childNodes[1].innerHTML = d				}			}				if (cname==\'Terraform\') {				makeAdjustments(nrow, terraformAdjust)				terracost = parseInt(itemcost) / 5;					if(areacost == 0 || areacost > terracost){					areacost = terracost					table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Multi-Level Platforms\') {				adjust = mlpAdjust				makeAdjustments(nrow, mlpAdjust)					var cost = parseInt(itemcost) / 10;					if (cost < areacost) {						areacost = cost;						bestAreaSignifier.parentNode.removeChild(bestAreaSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Urban Structures\') {				makeAdjustments(nrow, urbanAdjust)          USLevel = table.childNodes[nrow].childNodes[1].innerHTML.match(/\\(Level [0-9]{1,}/);          USLevel = parseInt(USLevel[0].replace(/\\(Level /, ""));					fertility = parseInt(td1help_res[2]);					uspopcost = parseInt(itemcost);					uspopcost = (uspopcost+areacost) / fertility;					if (popcost == 0 || popcost > uspopcost){					popcost = uspopcost;					table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);					}				}				if (cname==\'Orbital Base\') {				makeAdjustments(nrow, orbitalbaseAdjust)					obpopcost = parseInt(itemcost) / 10;					obcostparentnode = table.childNodes[nrow].childNodes[2];					if (obpopcost && obpopcost < popcost) {						popcost = obpopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);								}				}								if (cname==\'Solar Plants\' || cname==\'Gas Plants\' || cname==\'Fusion Plants\' || cname==\'Antimatter Plants\') {				if(cname==\'Solar Plants\'){				adjust = solarAdjust				}else if(cname==\'Gas Plants\'){				adjust = gasAdjust				}else if(cname==\'Fusion Plants\'){				adjust = fusionAdjust				}else if(cname==\'Antimatter Plants\'){				adjust = antimatterAdjust				}makeAdjustments(nrow, adjust)					var c = parseInt(itemcost);					var e = parseInt(table.childNodes[nrow].childNodes[3].firstChild.nodeValue.slice(1));					c = (c + popcost + areacost) / (energytechmultiplier*e);					if (e>2){					if (!energycost)						energycost = c;					if (c <= energycost) {						energycost = c;						if (bestEnergySignifier.parentNode)							bestEnergySignifier.parentNode.removeChild(bestEnergySignifier);							table.childNodes[nrow].childNodes[2].appendChild(bestEnergySignifier);					}					}				}				if (cname == "Biosphere Modification"){makeAdjustments(nrow, biosphereAdjust)          var biopopcost = parseInt(itemcost);					biopopcost = (biopopcost+(24*energycost)+areacost)/USLevel										if (biopopcost < popcost) {						popcost = biopopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);																	}				}				if (cname == "Metal Refineries"){				makeAdjustments(nrow, metalAdjust)				var metal = parseInt(td1help_res[2]);				var metalcost = parseInt(itemcost);				metalprodcost = (metalcost + energycost + areacost + popcost)/ metal				metalconstcost = (metalcost + energycost + areacost + popcost)/ metal				metaleconcost = (metalcost + energycost + areacost + popcost)          	if(econcost == 0 || econcost > metaleconcost){          	econcost = metaleconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost == 0 || prodcost > metalprodcost){          	prodcost = metalprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost == 0 || constcost > metalconstcost){          	constcost = metalconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Crystals Mines"){				makeAdjustments(nrow, crystalAdjust)				var crystals = parseInt(td1help_res[2]);				var crystalcost = parseInt(itemcost);				crystalcost = (crystalcost + energycost + areacost)/ crystals          	if(econcost > crystalcost){          	econcost = crystalcost;													table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}			}				if (cname == "Robotic Factories"){				makeAdjustments(nrow, roboticsAdjust)				var robscost = parseInt(itemcost);				robsprodcost = (robscost + energycost + areacost + popcost)/ 2				robsconstcost = (robscost + energycost + areacost + popcost)/ 2				robseconcost = (robscost + energycost + areacost + popcost)          	if(econcost > robseconcost){          	econcost = robseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > robsprodcost){          	prodcost = robsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > robsconstcost){          	constcost = robsconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Shipyards"){				makeAdjustments(nrow, shipyardsAdjust)				var shipscost = parseInt(itemcost);				shipsprodcost = (shipscost + energycost + areacost + popcost)/ 2        shipseconcost = (shipscost + energycost + areacost + popcost)          	if(econcost > shipseconcost){          	econcost = shipseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > shipsprodcost){          	prodcost = shipsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Orbital Shipyards"){				makeAdjustments(nrow, osAdjust)				var oscost = parseInt(itemcost);				osprodcost = (oscost + (energycost*12) + popcost)/8        oseconcost = (oscost + (energycost*12) + popcost)/2          	if(econcost > oseconcost){          	econcost = oseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > osprodcost){          	prodcost = osprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Spaceports"){				makeAdjustments(nrow, spaceportsAdjust)				var Spcost = parseInt(itemcost);				Spcost = (Spcost + energycost + areacost)/ 2          	if(econcost > Spcost){          	econcost = Spcost;							table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}				if (cname == "Nanite Factories"){				makeAdjustments(nrow, naniteAdjust)				var nanicost = parseInt(itemcost);				naniprodcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				naniconstcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				nanieconcost = (nanicost + (energycost*2) + areacost + popcost) /2          	if(econcost > nanieconcost){          	econcost = nanieconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > naniprodcost){          	prodcost = naniprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > naniconstcost){          	constcost = naniconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Androids Factories"){				makeAdjustments(nrow, androidAdjust)				var andrcost = parseInt(itemcost);				andrprodcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andrconstcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andreconcost = (andrcost + (energycost*4) + areacost + popcost) /2          	if(econcost > andreconcost){          	econcost = andreconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > andrprodcost){          	prodcost = andrprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > andrconstcost){          	constcost = andrconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}								if (cname == "Economic Centers"){				makeAdjustments(nrow, economicAdjust)				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*2) + areacost + popcost) /3          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}        if (cname == "Capital"){        makeAdjustments(nrow, capitalAdjust)				basesArray = GM_getValue(server+"Bases")				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*12) + areacost + popcost) / (10+basesArray.length)          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}				        if (cname == "Research Labs"){        makeAdjustments(nrow, researchAdjust)				}					        if (cname == "Command Centers"){        makeAdjustments(nrow, ccAdjust)				}		if (flag == 0){				    	getOptionValue(cname);		if (v==1) {		buttontext=document.createElement("a")		buttontext.href="javascript:document.getElementsByName(\'add_stack\')[0].selectedIndex="+a+"; document.getElementsByTagName(\'form\')[1].submit()"		buttontext.innerHTML = "Queue"			if (buttontext) {			if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){			colnum=3			}else{			colnum=5			}				table.childNodes[nrow].childNodes[colnum].style.whiteSpace=\'nowrap\';				table.childNodes[nrow].childNodes[colnum].appendChild(buttontext);			}	}	if (flag == 0 && nrow==table.childNodes.length-1){						flag =1;						nrow = 1;						}		}}}}}function buttonToSelect(option, text, fallback_text) {}function makeAdjustments(nrow, adjustvar){adjust = adjustvar				if(table.childNodes[nrow].childNodes[6].innerHTML.match(/<span id="time/)){				adjust++ 				}				if(adjust>0){				basecost = parseInt(table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, ""))				time = getSeconds(table.childNodes[nrow].childNodes[5].firstChild.nodeValue)/basecost				time = secsToHMS(time*(Math.round(basecost*Math.pow(1.5, adjust))))				table.childNodes[nrow].childNodes[5].innerHTML = table.childNodes[nrow].childNodes[5].innerHTML + "<br />("+time+") "        table.childNodes[nrow].childNodes[1].innerHTML = table.childNodes[nrow].childNodes[1].innerHTML + " (+"+adjust+")"        table.childNodes[nrow].childNodes[2].firstChild.nodeValue = table.childNodes[nrow].childNodes[2].firstChild.nodeValue + " ("+Math.round((basecost*Math.pow(1.5, adjust)))+")"        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        itemcost = itemcost.replace(/[0-9]+\\(/,"")        itemcost = itemcost.replace(/\\)/, "")        }else{        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        }        }function secsToHMS(seconds){        secVar0 = Math.round(seconds);                            // The initial data, in seconds        minVar = Math.floor(secVar0/60);  // The minutes           hourVar = Math.floor(minVar/60);  // The minutes        minVar = minVar % 60;        secVar = secVar0 % 60;              // The balance of seconds        if(hourVar != 0){        return hourVar+"h "+(minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else if(minVar != 0){        return (minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else{        return (secVar<10?\'0\'+secVar:secVar)+"s"        }                }function getOptionValue(obj){v=0x = document.getElementsByName("add_stack")if(x[0]){x = x[0]for (i=0;i<x.length;i++)    {    if(x.options[i].text == obj){    v=1;	a=i    i = x.length    }    }    }    }/*function insertTimeTextBoxes(){    var inputs = document.forms[1].elements;    for(var i = 0; i < inputs.length; i++)    {        if(inputs[i].className == \'quant\')        {            var row = inputs[i].parentNode.parentNode;            //console.log(row);            var cell = document.createElement("td");            cell.setAttribute("align","center");            cell.innerHTML = \'<input type="text" value="" maxlength="5" size="5" name="\'+inputs[i].name+\' - Time" id="\'+inputs[i].name+\' - Time" class="quant" onchange="update(\\\'\'+inputs[i].name+\'\\\')"/>\';            row.appendChild(cell);            cell.addEventListener(\'keyup\',getConvertTimeToQuantityClosure(row),true);			//cell.addEventListener(\'blur\',onProductionTextBoxChanged,true);        }    }        var tbody = inputs[0].parentNode.parentNode.parentNode;    //console.log(tbody.childNodes[0].firstChild);    //Adjust colspan for top row and third row    tbody.childNodes[0].firstChild.setAttribute("colspan",7);    tbody.childNodes[2].firstChild.setAttribute("colspan",7);    //console.log(tbody.childNodes[1].firstChild);    //Insert column title    var titleCell = document.createElement("th");    titleCell.setAttribute("width","10%");    titleCell.textContent = "Time (h)"    tbody.childNodes[1].appendChild(titleCell);		titleCell.previousSibling.setAttribute("width","10%");    //adjust colspan for all help rows    var helpCells = document.evaluate(    "//td[@class=\'help\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(helpCells.snapshotLength);    for(var i=0;i<helpCells.snapshotLength;i++)    {        helpCells.snapshotItem(i).setAttribute("colspan",6);    }    //adjust colspan for all red rows    var redCells = document.evaluate(    "//td[@class=\'red\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(redCells.snapshotLength);    for(var i=0;i<redCells.snapshotLength;i++)    {        redCells.snapshotItem(i).setAttribute("colspan",2);    }    //adjust colspan for last two rows    document.getElementById("fast").addEventListener("click", function(){var inputs = document.forms[1].elements; for(var i = 0; i < inputs.length; i++){if(inputs[i].className == \'quant\'){if(inputs[i].value == ""){}else{var row = inputs[i].parentNode.parentNode; convertTimeToQuantity(row); unsafeWindow.update(inputs[i].name);}}}}, false)    tbody.childNodes[tbody.childNodes.length-1].firstChild.setAttribute("colspan",7);}*/function getConvertTimeToQuantityClosure(row){    function func(){        convertTimeToQuantity(row);    }    ;    return func;}function convertTimeToQuantity(row){	//console.log(row);    var credits = row.childNodes[2].textContent;    var time = row.childNodes[4].textContent;    var qtyInput = row.childNodes[5].firstChild;    var enteredTime;    try{        enteredTime = parseFloat(row.childNodes[6].firstChild.value);    }    catch(Exception)    {        return;    }    if(isNaN(enteredTime)){    enteredTime = 0    }else{    //console.log("Credits: "+credits+" Time: "+time+" qtyInput: "+ qtyInput.value);    //console.log("entered time: "+isNaN(enteredTime));    var totalSeconds = getSeconds(time);    if(totalSeconds != -1)    {        //console.log("Time " +getTimeDisplay(totalSeconds));        var enteredTimeInSeconds = enteredTime*60*60;        //console.log(enteredTimeInSeconds+" / " +totalSeconds);        if(enteredTimeInSeconds < totalSeconds){			qtyInput.value = "";		}else{			if(document.getElementById("fast").checked == true){			qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)*2			}else{				qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)			}		}    }    onProductionTextBoxKeyUp();    }}function getSeconds(timeString){    var regex = /((\\d|,| |\\.)*h)?\\W?((\\d|,| |\\.)*m)?\\W?((\\d|,| |\\.)*s)?/;    var result = regex.exec(timeString);    if(result)    {        //console.log(result);        var h = 0;var m=0;var s=0;        if(result[1] != null)        h = result[1].substring(0,result[1].indexOf("h"));        if(result[3] != null)        m = result[3].substring(0,result[3].indexOf("m"));        if(result[5] != null)        s = result[5].substring(0,result[5].indexOf("s"));        return h*60*60 + m*60 + s*1;    }    else return -1;}function getTimeDisplay(seconds){    var h = Math.floor(seconds/3600);    var m = Math.floor((seconds % 3600)/60);    var s = Math.floor((seconds % 3600) % 60);    var string = s+"s";    if(m>0 || h>0)		string = m+"m "+string;    if(h>0)		string = h+"h "+string;    return string;}var PRESET_KEYS = new Array("Fighters","Bombers","Heavy Bombers","Ion Bombers","Corvette","Recycler","Destroyer","Frigate","Ion Frigate","Scout Ship", "Outpost Ship","Cruiser","Carrier","Heavy Cruiser","Battleship","Fleet Carrier","Dreadnought","Titan","Leviathan","Death Star","Goods");function onProductionTextBoxKeyUp(){    var shipName;    var count=0,cost=0;    var productionCost = 0;    var totalTime = 0;    for(var i = 0;i <PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.log("Failed to find textBox for "+shipName+".");            continue;        }				if(textBox.value != "")        {            var row = textBox.parentNode.parentNode;            var time = row.childNodes[4].textContent;            //console.log(textBox.value);            count = parseInt(textBox.value);            cost = parseInt(textBox.parentNode.previousSibling.previousSibling.previousSibling.innerHTML.replace(/(,| |\\.)/g, ""));            totalTime+= getSeconds(time) * count;            //console.log(count + " " + shipName + "s @ " + cost);            productionCost += (cost * count);			//textBox.parentNode.nextSibling.value = "";        }    }    //console.log("total Time: "+getTimeDisplay(totalTime));    var fastProduction = document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.checked;    //console.info(fastProduction);    if(fastProduction)	{		productionCost *= 2;		totalTime /= 2;	}    //console.log("Text changed. Total production cost: " +productionCost);    var submitButton = document.evaluate(	    "//input[@type=\'submit\']",	    document,	    null,	    XPathResult.FIRST_ORDERED_NODE_TYPE,	    null).singleNodeValue;    if(productionCost > 0)		submitButton.value = "Submit";    else		submitButton.value = "Submit";}function registerTextBoxEventListeners(){    for(var i = 0;i < PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.info("Failed to find textBox for "+shipName+".");            continue;        }        textBox.addEventListener(\'keyup\',onProductionTextBoxKeyUp,false);		//textBox.addEventListener(\'blur\',onProductionTextBoxChanged,true);    }    document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'change\',onProductionTextBoxKeyUp,false);    //document.evaluate("//input[@type=\'reset\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'click\',onProductionTextBoxKeyUp,true);    document.evaluate("//form[@method=\'post\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'reset\',onProductionTextBoxKeyUp,false);}function productionHelperOnClick(num, box) {	num=num.replace("+", "")	num=num.replace(" ","")	num=num.replace("k","000")		document.getElementById(box).value = parseInt(document.getElementById(box).value) + parseInt(num);     calculateTotals();}function prodHelperEvent(e) {  if (e.shiftKey && (e.name == \'fast\')) {    for (i=0; i<empireLinks.length; i++) {    document.getElementById("fast_"+empireLinks[i]).checked = e.checked;    }  } else if (e.shiftKey && (e.name == \'unit\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("unit_"+empireLinks[i]).selectedIndex = e.selectedIndex;    }  } else if (e.shiftKey && (e.name == \'quant\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("quant_"+empireLinks[i]).value = e.value;    }  }  if ((e.name == \'fast\')||(e.name == \'unit\')||(e.name == \'quant\'))    calculateTotals();}function calculateTotals() {	var pcost = 0;  for (i=0; i<empireLinks.length; i++) {    n = (document.getElementById("fast_"+empireLinks[i]).checked) ? 2 : 1;    pcost += parseInt(ProductionGetCost[document.getElementById("unit_"+empireLinks[i]).selectedIndex] * document.getElementById("quant_"+empireLinks[i]).value * n);	}	document.getElementById(\'cost_all\').innerHTML = pcost+\' credits\';	var credits_left = parseInt(numcredits) - pcost;	document.getElementById(\'cost_all\').style.color = (credits_left < 0) ? \'red\' : \'\';}function resetForm() {  for (i=0; i<empireLinks.length; i++) {    document.getElementById("unit_"+empireLinks[i]).selectedIndex = 0;    document.getElementById("fast_"+empireLinks[i]).checked = false;    document.getElementById("quant_"+empireLinks[i]).value = 0;    returnto = i    calculateTotals();    i=returnto;  }}function startSubmitQueue() {  submitQueue(0);}function submitQueue(i) {    if (document.getElementById("quant_"+empireLinks[i]).value != 0) {      var postData = document.getElementById("unit_"+empireLinks[i]).value+"="+document.getElementById("quant_"+empireLinks[i]).value+"&post_back=true";      if (document.getElementById("fast_"+empireLinks[i]).checked)        postData += "&fast=true";      document.getElementById("quant_"+empireLinks[i]).value = \'ok\';      document.getElementById("quant_"+empireLinks[i]).style.backgroundColor = \'red\';      GM_xmlhttpRequest({        method: "POST",        url: serverurl+"base.aspx?base="+empireLinks[i]+"&view=production",        data: encodeURI(postData),        headers:{\'Content-type\':\'application/x-www-form-urlencoded\'},     		onreadystatechange: function(xhr) {if (xhr.readyState == "4") {endSubmitQueue(i, "1");}}      });    } else {      endSubmitQueue(i, "0");    }}function endSubmitQueue(i, value) {time=1000+Math.floor(Math.random()*1001)  if (i == empireLinks.length-1)    window.setTimeout(function(){ location.reload(true)}, time);  else  if(value == 0){  submitQueue(i+1)  }else{    window.setTimeout(function(){ submitQueue(i+1)}, time);    }}function productionHelper() {  var btn_details = [];  btn_details.push([1,\'+1 \']);  btn_details.push([5,\'+5 \']);  btn_details.push([10,\'+10 \']);  btn_details.push([25,\'+25 \']);  btn_details.push([100,\'+100 \']);  btn_details.push([250,\'+250 \']);  btn_details.push([1000,\'+1k \']);  table.rows[1].childNodes[4].innerHTML = \'Fast Prod\';  table.rows[1].childNodes[5].innerHTML = \'Unit Type\';  table.rows[1].childNodes[6].innerHTML = \'Quantity\';  table.rows[1].childNodes[3].innerHTML = \'Current Queue\';  a=0;  table.firstChild.style.display=\'none\';  for (i=2; i<table.rows.length; i=i+2) {    var currentRow = table.rows[i];		var res = /\\?base=((\\d|,| |\\.)+)/.exec(table.rows[i].childNodes[0].firstChild.href);	  table.rows[i+1].style.display = \'none\';	  empireLinks[a] = res[1];	  a++;	  currentRow.childNodes[3].innerHTML = currentRow.childNodes[5].innerHTML + "<br />" + table.rows[i+1].childNodes[3].innerHTML    currentRow.childNodes[4].innerHTML = "<input type=\'checkbox\' name=\'fast\' class=\'check\' id=\'fast_"+res[1]+"\' onfocus=\\"selectedBox=\'fast_"+res[1]+"\'\\" />";    currentRow.childNodes[6].innerHTML = "<input type=\'text\' name=\'quant\' class=\'quant\' id=\'quant_"+res[1]+"\' size=\'5\' maxlength=\'5\' value=\'0\' onfocus=\\"selectedBox=\'quant_"+res[1]+"\'\\" />";    var html = "<select name=\'unit\' id=\'unit_"+res[1]+"\' onfocus=\\"selectedBox=\'unit_"+res[1]+"\'\\"><option value=\'Fighters\'>Fighters</option><option value=\'Bombers\'>Bombers</option>";    html += "<option value=\'Heavy Bombers\'>Heavy Bombers</option><option value=\'Ion Bombers\'>Ion Bombers</option><option value=\'Corvette\'>Corvette</option>";    html += "<option value=\'Recycler\'>Recycler</option><option value=\'Destroyer\'>Destroyer</option><option value=\'Frigate\'>Frigate</option>"    html += "<option value=\'Ion Frigate\'>Ion Frigate</option><option value=\'Scout Ship\'>Scout Ship</option><option value=\'Outpost Ship\'>Outpost Ship</option>";    html += "<option value=\'Cruiser\'>Cruiser</option><option value=\'Carrier\'>Carrier</option><option value=\'Heavy Cruiser\'>Heavy Cruiser</option>";    html += "<option value=\'Battleship\'>Battleship</option><option value=\'Fleet Carrier\'>Fleet Carrier</option><option value=\'Dreadnought\'>Dreadnought</option>";    html += "<option value=\'Titan\'>Titan</option><option value=\'Leviathan\'>Leviathan</option><option value=\'Death Star\'>Death Star</option></select>";    currentRow.childNodes[5].innerHTML = html;    document.getElementById("unit_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("quant_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("fast_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    for(c=0; c<7; c++) {      var num = btn_details[c][0];      l = document.createElement("a");		l.href = "javascript:void(1);";		l.id= i + btn_details[c][1];		l.innerHTML = btn_details[c][1];            l.name = "quant_"+res[1];      currentRow.childNodes[6].appendChild(l);      document.getElementById(i + btn_details[c][1]).addEventListener(\'click\', function(){ productionHelperOnClick(this.innerHTML, this.name );}, true);    }  }  l = document.createElement("tr");  l.id="extrarow1";  table.appendChild(l);  l = document.createElement("td");		l.innerHTML = "0 credits";      l.className = \'help\';      l.align = "right";      l.id="cost_all"      document.getElementById("extrarow1").appendChild(l);      document.getElementById("cost_all").colSpan="7";      l = document.createElement("tr");      l.id="extrarow2";      table.appendChild(l);      l = document.createElement("td");      l.className = \'help\';      l.align = "right";          l.id="prodHelperButtons"      document.getElementById("extrarow2").appendChild(l);      document.getElementById("prodHelperButtons").colSpan="7";      l = document.createElement("input");      l.type = "reset";      l.id = "resetButton";      l.value = "Reset";      document.getElementById("prodHelperButtons").appendChild(l);      l = document.createElement("input");      l.type = "submit";      l.id = "submitButton";      l.value = "submit";      document.getElementById("prodHelperButtons").appendChild(l);   document.getElementById("submitButton").addEventListener(\'click\', function(){ startSubmitQueue();}, true);  document.getElementById("resetButton").addEventListener(\'click\', function(){ resetForm();}, true);}function productionHelperButton() {		table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;		var prodTitle = table.childNodes[1].childNodes[5];		scoutButton = document.createElement("a");		scoutButton.href = "javascript:void(1);";		scoutButton.id= "prodHelperButton";		scoutButton.innerHTML=" [&#177;]";		scoutButton.title = "Production Helper"		prodTitle.appendChild(scoutButton)		document.getElementById(\'prodHelperButton\').addEventListener(\'click\', function() {productionHelper();}, true);	}function saveTechData(){    //console.log("Saving tech data");    var techData = new Array();    var rows = document.evaluate(    "//tr[@align=\'center\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log("Tech rows: "+ rows.snapshotLength);    for (var i = 0; i < rows.snapshotLength; i++)    {        var techNameCell = document.evaluate(        "th[1]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        var techValueCell = document.evaluate(        "td[4]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        if(techNameCell.snapshotLength > 0)        {            var techValue = parseInt(techValueCell.snapshotItem(0).innerHTML.replace(/(,| |\\.)/g, ""));            var techName = techNameCell.snapshotItem(0).innerHTML;            //console.log(techName +": "+techValue);            techData[i] = techValue;        }    }    GM_setValue(server+"techData",techData.join());}/* function scannerGrab(){tableArray = document.getElementsByTagName("table")for(i=0; i<tableArray.length; i++){if(tableArray[i].innerHTML.match(/<th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=fleet">Fleet<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=player">Player<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=destination">Destination<\\/a><\\/th><th width="20%"><a href="empire.aspx\\?view=scanners&amp;order=arrival">Arrival<\\/a><\\/th><th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=size">Size<\\/a><\\/th>/)){table = tableArray[i]fleetId = []fleetName = []fleetOwner = []ownerId = []fleetDest = []fleetArrive = []fleetSize = []for(a=1; a<table.rows.length; a++){fleetId[a-1] = table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=/, "") fleetId[a-1] = fleetId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetName[a-1]=table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetName[a-1]=fleetName[a-1].replace(/<\\/a>/, "");fleetOwner[a-1]=table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=[0-9]{1,}">/, "")fleetOwner[a-1]=fleetOwner[a-1].replace(/<\\/a>/, "");ownerId[a-1] =table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=/, "")ownerId[a-1] = ownerId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetDest[a-1]=table.rows[a].childNodes[2].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)fleetArrive[a-1]=parseInt(table.rows[a].childNodes[3].title)+Math.round(new Date().getTime()/1000.0)fleetSize[a-1]=table.rows[a].childNodes[4].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetSize[a-1]=fleetSize[a-1].replace(/<\\/a>(.*?)/, "");fleetSize[a-1]=fleetSize[a-1].replace(/(,| |.)/, "");}sendData = "&fleetId="+fleetId+"&fleetName="+fleetName+"&fleetOwner="+fleetOwner+"&ownerId="+ownerId+"&fleetDest="+fleetDest+"&fleetArrive="+fleetArrive+"&fleetSize="+fleetSize+"&seenBy="+document.getElementById(\'account\').parentNode.childNodes[1].innerHTML.replace(/[A-Za-z]./, \'\')if(GIAServers.inArray(server)){sendtoserver(sendData, "scanners.php")}}}}*/// If NS -- that is, !IE -- then set up for mouse capturedocument.captureEvents(Event.MOUSEMOVE)// Set-up to use getMouseXY function onMouseMovedocument.addEventListener("mousemove", function(e) {getMouseXY(e)}, true);// Temporary variables to hold mouse x-y pos.svar tempX = 0var tempY = 0// Main function to retrieve mouse x-y pos.sfunction getMouseXY(e) {// grab the x-y pos.s if browser is NS    tempX = e.pageX    tempY = e.pageY  // catch possible negative values in NS4  if (tempX < 0){tempX = 0}  if (tempY < 0){tempY = 0}  // show the position values in the form named Show  // in the text fields named MouseX and MouseY  return true}function linkEventListeners(){if(GIAServers.inArray(server)){linkArray=document.getElementsByTagName("a")for(i=0; i<linkArray.length; i++){if(linkArray[i].href.match(/map.aspx\\?(.*?)loc=E[0-9]{2}:[0-9]{2}:[0-9]{2}/)){linkArray[i].addEventListener("mouseover", function(e) {showBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""), tempX, tempY)}, true);linkArray[i].addEventListener("mouseout", function() {hideBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""))}, true);}}}}function linkChange(){	linkArray=document.getElementsByTagName(\'a\')	for(i=0; i < linkArray.length; i++){		linkArray[i].target = "_blank"	}}  ////////////////////////////////////////// /// Execution //////////////////////////////////////////////////////////////////////if(document.location.href.match(/astroempires.com/)){replaceTime();if(document.location.href.match(/loc=[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){	if(document.body.innerHTML.match(/<th colspan=.4.>Base<\\/th>/)){	if(GIAServers.inArray(server)){	centerArray=document.getElementsByTagName(\'center\')	for(i=0; i<centerArray.length; i++){	if(centerArray[i].innerHTML.match(/Astro Type:/)){	baseLink = document.body.innerHTML.match(/base.aspx\\?base=[0-9]{1,}/)[0]	sourceDiv = document.createElement("div")	sourceDiv.id="baseDiv";	sourceDiv.innerHTML="Visit the <a href=\\""+baseLink+"\\">base page</a> to add this base to GIA.<br /><br />";	centerArray[i].appendChild(sourceDiv)	}	}	}	}}else if(document.location.href.match(/[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}/)){	debrisShow()}else if(document.location.href.match(/http:\\/\\/(.+?)\\.astroempires\\.com\\/base\\.aspx\\?base=[0-9]{1,}$/)){	if(window.parent.document.location.href != document.location.href){	baseDetails();	}}else if(document.location.href.match(/empire.aspx$/) || document.location.href.match(/empire.aspx\\?view=bases_events$/)){	productionHelperButton();}else if(document.location.href.match(/view=scanners/)){	scannerFormat();}else if(window.location.href.match(/empire.aspx\\?view=fleets/)){        sumShips();}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=structures/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=defenses/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){	if(!document.location.href.match(/&info=/)){enhanceConstructionPage();}}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=production/)){insertTimeTextBoxes()}if(window.location.href.indexOf(\'view=move\')==-1 && window.location.href.indexOf(\'view=fleets\')==-1 &&		window.location.href.indexOf(\'view=production\')==-1 && window.location.href.indexOf(\'view=structures\')==-1 &&		window.location.href.indexOf(\'view=trade\')==-1 && window.location.href.indexOf(\'view=research\')==-1){		formatVariousNumbers();	}	}'
                                                         }, 'Mojo::Asset::Memory' ),
                                       'events' => {
                                                     'read' => [
                                                                 sub { "DUMMY" }
                                                               ]
                                                   },
                                       'buffer' => '',
                                       'read' => $VAR1->{'content'}{'events'}{'read'}[0],
                                       'state' => 'finished',
                                       'body' => 2,
                                       'raw_size' => 63681
                                     }, 'Mojo::Content::Single' )
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:50:31 2014] [debug] 200 OK (0.002655s, 376.648/s).
[Wed Oct 22 13:50:53 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:50:53 2014] [debug] wtf
[Wed Oct 22 13:50:53 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:50:55 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:50:55 2014] [debug] POST "/ae/gia".
[Wed Oct 22 13:50:55 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 13:50:55 2014] [debug] $VAR1 = bless( {
                 'content' => bless( {
                                       'asset' => bless( {
                                                           'content' => '// ==UserScript==// @name           GIA Script (Modified)// @author          Luke Bonaccorsi AKA SpeedySurfer// @namespace       http://gears.speedysurfer.co.uk// @description     Scouts for bases in the current region// @license         Creative Commons Attribution License// @include        http://*.astroempires.com/*// @exclude        http://*.astroempires.com/login.aspx// @exclude        http://*.astroempires.com/home.aspx// ==/UserScript==/* * This file is a Greasemonkey user script. To install it, you need  * the Firefox plugin "Greasemonkey" (URL: http://greasemonkey.mozdev.org/) * After you installed the extension, restart Firefox and revisit  * this script. Now you will see a new menu item "Install User Script" * in your tools menu. *  * To uninstall this script, go to your "Tools" menu and select  * "Manage User Scripts", then select this script from the list * and click uninstall :-) * * Creative Commons Attribution License (--> or Public Domain) * http://creativecommons.org/licenses/by/2.5/*/  ////////////////////////////////////////// /// Variables //////////////////////////////////////////////////////////////////////if (document.location.href.match(/(.+?)astroempires.com/)){var server=document.location.href.match(/\\/(.+?).astroempires.com/)[1]server = server.replace(/\\//, "")var serverurl= "http://"+server+".astroempires.com/"}if(document.location.href.match(/astroempires.com/)){var empireLinks = []; var ProductionGetCost = [5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000]; var numcredits = document.evaluate(    "/html/body/table/tbody/tr/th/table/tbody/tr[2]/th[2]",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    numcredits = numcredits.snapshotItem(0).innerHTML;var FT_INDEX = 0;var BO_INDEX = 1;var HB_INDEX = 2;var IB_INDEX = 3;var CV_INDEX = 4;var RC_INDEX = 5;var DE_INDEX = 6;var FR_INDEX = 7;var IF_INDEX = 8;var SS_INDEX = 9;var OS_INDEX = 10;var CR_INDEX = 11;var CA_INDEX = 12;var HC_INDEX = 13;var BC_INDEX = 14;var FC_INDEX = 15;var DN_INDEX = 16;var TI_INDEX = 17;var LE_INDEX = 18;var DS_INDEX = 19;var BARRACKS_INDEX = 20;var LASER_TURRETS_INDEX = 21;var MISSLE_TURRETS_INDEX = 22;var PLASMA_TURRENTS_INDEX = 23;var ION_TURRETS_INDEX = 24;var PHOTON_TURRETS_INDEX = 25;var DISRUPTOR_TURRETS_INDEX = 26;var DEFLECTION_SHIELDS_INDEX = 27;var PLANETARY_SHIELD_INDEX = 28;var PLANETARY_RING_INDEX = 29;var fightingShips = "11111011100101101111";var shipValues = new Array(5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000);var shipHangarValues = new Array(0,0,0,0,0,0,0,4,4,0,0,4,60,8,40,400,200,1000,4000,10000);var GIAServers = new Array("bravo");}  ////////////////////////////////////////// /// Misc /////////////////////////////////////////////////////////////////////////Array.prototype.inArray = function (value)// Returns true if the passed value is found in the// array. Returns false if it is not.{var i;for (i=0; i < this.length; i++) {// Matches identical (===), not just similar (==).if (this[i] === value) {return true;}}return false;};function replaceTime(){	  for(n=1;n<=500;n++)	  {		elem=document.getElementById(\'time\'+n);	    if (!elem)	    {	       break;	    }	    elem.id = \'blah\'+n;	    s=elem.title;	    var newElement, endTime;	    var d = new Date();	    var now = new Date();	    if (elem)	    {	       if(s<=0)	       {		 endTime="-"	       }	       else	       {		 d.setTime(d.getTime()+(s*1000));		 tempdate = new Date();		 tempdate.setDate(tempdate.getDate()+1)		 if(now.toLocaleDateString() == d.toLocaleDateString() )		 {		    endTime="Today @ "+d.formatDate(\'H:i:s\');		 }		 else if(tempdate.toLocaleDateString() == d.toLocaleDateString())		 {		    endTime="Tomorrow @ "+d.formatDate(\'H:i:s\');		 }		 else		 {		    endTime=d.formatDate(\'D jS M @ H:i:s\');		 }	       }	       elem.innerHTML = "<b><span id=\'time"+n+"\' title=\'"+ s +"\'>-</span></b><br><nobr><span id=\'done"+n+"\' style=\'font-size: xx-small; color: "+getAgeCol(s)+"\'>" + endTime + "</span></nobr>"	    }	  }};  // formatDate :// a PHP date like function, for formatting date strings// authored by Svend Tofte <www.svendtofte.com>// the code is in the public domain//// see http://www.svendtofte.com/javascript/javascript-date-string-formatting/// and http://www.php.net/date//// thanks to//  - Daniel Berlin <mail@daniel-berlin.de>,//    major overhaul and improvements//  - Matt Bannon,//    correcting some stupid bugs in my days-in-the-months list!//  - levon ghazaryan. pointing out an error in z switch.//  - Andy Pemberton. pointing out error in c switch//// input : format string// time : epoch time (seconds, and optional)//// if time is not passed, formatting is based on// the current "this" date object\'s set time.//// supported switches are// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L),// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z//// unsupported (as compared to date in PHP 5.1.3)// T, e, oDate.prototype.formatDate = function (input,time) {    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday",                       "Thursday", "Friday", "Saturday"];    var daysShort =   ["Sun", "Mon", "Tue", "Wed",                       "Thu", "Fri", "Sat"];    var monthsShort = ["Jan", "Feb", "Mar", "Apr",                       "May", "Jun", "Jul", "Aug", "Sep",                       "Oct", "Nov", "Dec"];    var monthsLong =  ["January", "February", "March", "April",                       "May", "June", "July", "August", "September",                       "October", "November", "December"];    var switches = { // switches object        a : function () {            // Lowercase Ante meridiem and Post meridiem            return date.getHours() > 11? "pm" : "am";        },        A : function () {            // Uppercase Ante meridiem and Post meridiem            return (this.a().toUpperCase ());        },        B : function (){            // Swatch internet time. code simply grabbed from ppk,            // since I was feeling lazy:            // http://www.xs4all.nl/~ppk/js/beat.html            var off = (date.getTimezoneOffset() + 60)*60;            var theSeconds = (date.getHours() * 3600) +                             (date.getMinutes() * 60) +                              date.getSeconds() + off;            var beat = Math.floor(theSeconds/86.4);            if (beat > 1000) beat -= 1000;            if (beat < 0) beat += 1000;            if ((String(beat)).length == 1) beat = "00"+beat;            if ((String(beat)).length == 2) beat = "0"+beat;            return beat;        },        c : function () {            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" +                    this.H() + ":" + this.i() + ":" + this.s() + this.P());        },        d : function () {            // Day of the month, 2 digits with leading zeros            var j = String(this.j());            return (j.length == 1 ? "0"+j : j);        },        D : function () {            // A textual representation of a day, three letters            return daysShort[date.getDay()];        },        F : function () {            // A full textual representation of a month            return monthsLong[date.getMonth()];        },        g : function () {           // 12-hour format of an hour without leading zeros, 1 through 12!           if (date.getHours() == 0) {               return 12;           } else {               return date.getHours()>12 ? date.getHours()-12 : date.getHours();           }       },        G : function () {            // 24-hour format of an hour without leading zeros            return date.getHours();        },        h : function () {            // 12-hour format of an hour with leading zeros            var g = String(this.g());            return (g.length == 1 ? "0"+g : g);        },        H : function () {            // 24-hour format of an hour with leading zeros            var G = String(this.G());            return (G.length == 1 ? "0"+G : G);        },        i : function () {            // Minutes with leading zeros            var min = String (date.getMinutes ());            return (min.length == 1 ? "0" + min : min);        },        I : function () {            // Whether or not the date is in daylight saving time (DST)            // note that this has no bearing in actual DST mechanics,            // and is just a pure guess. buyer beware.            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");            return (noDST.getTimezoneOffset () ==                    date.getTimezoneOffset () ? 0 : 1);        },        j : function () {            // Day of the month without leading zeros            return date.getDate();        },        l : function () {            // A full textual representation of the day of the week            return daysLong[date.getDay()];        },        L : function () {            // leap year or not. 1 if leap year, 0 if not.            // the logic should match iso\'s 8601 standard.            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html            var Y = this.Y();            if (                (Y % 4 == 0 && Y % 100 != 0) ||                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)                ) {                return 1;            } else {                return 0;            }        },        m : function () {            // Numeric representation of a month, with leading zeros            var n = String(this.n());            return (n.length == 1 ? "0"+n : n);        },        M : function () {            // A short textual representation of a month, three letters            return monthsShort[date.getMonth()];        },        n : function () {            // Numeric representation of a month, without leading zeros            return date.getMonth()+1;        },        N : function () {            // ISO-8601 numeric representation of the day of the week            var w = this.w();            return (w == 0 ? 7 : w);        },        O : function () {            // Difference to Greenwich time (GMT) in hours            var os = Math.abs(date.getTimezoneOffset());            var h = String(Math.floor(os/60));            var m = String(os%60);            h.length == 1? h = "0"+h:1;            m.length == 1? m = "0"+m:1;            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;        },        P : function () {            // Difference to GMT, with colon between hours and minutes            var O = this.O();            return (O.substr(0, 3) + ":" + O.substr(3, 2));        },        r : function () {            // RFC 822 formatted date            var r; // result            //  Thu         ,     21               Dec              2000            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +            //    16          :    01          :    07               0200            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();            return r;        },        s : function () {            // Seconds, with leading zeros            var sec = String (date.getSeconds ());            return (sec.length == 1 ? "0" + sec : sec);        },        S : function () {            // English ordinal suffix for the day of the month, 2 characters            switch (date.getDate ()) {                case  1: return ("st");                case  2: return ("nd");                case  3: return ("rd");                case 21: return ("st");                case 22: return ("nd");                case 23: return ("rd");                case 31: return ("st");                default: return ("th");            }        },        t : function () {            // thanks to Matt Bannon for some much needed code-fixes here!            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];            if (this.L()==1 && this.n()==2) return 29; // ~leap day            return daysinmonths[this.n()];        },        U : function () {            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)            return Math.round(date.getTime()/1000);        },        w : function () {            // Numeric representation of the day of the week            return date.getDay();        },        W : function () {            // Weeknumber, as per ISO specification:            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            var DoW = this.N ();            var DoY = this.z ();            // If the day is 3 days before New Year\'s Eve and is Thursday or earlier,            // it\'s week 1 of next year.            var daysToNY = 364 + this.L () - DoY;            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {                return 1;            }            // If the day is within 3 days after New Year\'s Eve and is Friday or later,            // it belongs to the old year.            if (DoY <= 2 && DoW >= 5) {                return new Date (this.Y () - 1, 11, 31).formatDate ("W");            }            var nyDoW = new Date (this.Y (), 0, 1).getDay ();            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier                return (1 + Math.floor ((DoY + nyDoW) / 7));            } else {  // First day of the year is a Friday or later                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));            }        },        y : function () {            // A two-digit representation of a year            var y = String(this.Y());            return y.substring(y.length-2,y.length);        },        Y : function () {            // A full numeric representation of a year, 4 digits            // we first check, if getFullYear is supported. if it            // is, we just use that. ppks code is nice, but wont            // work with dates outside 1900-2038, or something like that            if (date.getFullYear) {                var newDate = new Date("January 1 2001 00:00:00 +0000");                var x = newDate .getFullYear();                if (x == 2001) {                    // i trust the method now                    return date.getFullYear();                }            }            // else, do this:            // codes thanks to ppk:            // http://www.xs4all.nl/~ppk/js/introdate.html            var x = date.getYear();            var y = x % 100;            y += (y < 38) ? 2000 : 1900;            return y;        },        z : function () {            // The day of the year, zero indexed! 0 through 366            var s = "January 1 " + this.Y() + " 00:00:00 GMT" + this.O();            var t = new Date(s);            var diff = date.getTime() - t.getTime();            return Math.floor(diff/1000/60/60/24);        },        Z : function () {            // Timezone offset in seconds            return (date.getTimezoneOffset () * -60);        }    }    function getSwitch(str) {        if (switches[str] != undefined) {            return switches[str]();        } else {            return str;        }    }    var date;    if (time) {        var date = new Date (time);    } else {        var date = this;    }    var formatString = input.split("");    var i = 0;    while (i < formatString.length) {        if (formatString[i] == "%") {            // this is our way of allowing users to escape stuff            formatString.splice(i,1);        } else {            formatString[i] = getSwitch(formatString[i]);        }        i++;    }    return formatString.join("");}// Some (not all) predefined format strings from PHP 5.1.1, which// offer standard date representations.// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants//// Atom      "2005-08-15T15:52:01+00:00"Date.DATE_ATOM    = "Y-m-d%TH:i:sP";// ISO-8601  "2005-08-15T15:52:01+0000"Date.DATE_ISO8601 = "Y-m-d%TH:i:sO";// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"Date.DATE_RFC2822 = "D, d M Y H:i:s O";// W3C       "2005-08-15 15:52:01+00:00"Date.DATE_W3C     = "Y-m-d%TH:i:sP";function getAgeCol(age) {		var col = \'#461B7E\'; // 72 hours +		if (age <= 3600)			col = \'#FFFFFF\'; // 1 hour		else if (age <=10800)			col = \'#FFFFFF\'; // 3 hours		else if (age <=21600)			col = \'#9E7BFF\'; // 6 hours		else if (age <=43200)			col = \'#9172EC\'; // 12 hours		else if (age <=86400)			col = \'#8467D7\'; // 24 hours		else if (age <=172800)			col = \'#7A5DC7\'; // 48 hours		else if (age <=259200)			col = \'#461B7E\'; // 72 hours		return col;}function debrisShow(){	spanArray = document.getElementsByTagName("span")	for(i=0; i<spanArray.length; i++){		if(spanArray[i].getAttribute("class") == "gray"){		spanArray[i].innerHTML = spanArray[i].title		}	}}function formatVariousNumbers(){	var debrisElement = document.evaluate(    "//center[contains(text(),\'Debris\')]",    document,    null,    XPathResult.FIRST_ORDERED_NODE_TYPE,    null).singleNodeValue;    if(debrisElement !=null)    {        var debrisMessage = debrisElement.textContent;        console.log(debrisMessage);        var indexOfText = debrisMessage.indexOf(" credits");        var valueText = debrisMessage.substring(0,indexOfText);        var value = commaFormat(parseInt(valueText));        //console.log(valueText+" new value:" +value.toString());        //console.log(debrisElement.textContent + " -< " + debrisElement.textContent.replace(valueText,value.toString()));        debrisElement.textContent = debrisElement.textContent.replace(valueText,value.toString());    }}function scannerFormat(){	baseArray=document.getElementsByTagName("a")	bases = GM_getValue(server+"Bases")	for(i=0; i<baseArray.length; i++){		if(baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){			basecoord=baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)			if(bases.match(basecoord)){			baseArray[i].setAttribute("style", "color: red; font-weight: normal;")			}		}	}}var galaxyInfoArrays = new Array();function getGalaxyInfoArray(galaxy){	if(galaxyInfoArrays[galaxy]==undefined)	{		var newArray = new Array(20);		for(var i = 0; i < 20;i++)		{			newArray[i] = 0;		}		galaxyInfoArrays[galaxy] = new Array(galaxy,0,newArray,0,0);//[galaxy number],[mobile fleet count],[mobilefleetarray],[total fighting fleet],[total fleet],	}	return galaxyInfoArrays[galaxy];}function isBase(base){	bases = GM_getValue(server+"Bases")    if(bases==null)    return false;    if(bases.match(base)){        return true;    }else{    return false;	}}function insertTotalsRow(node,sums,mobileSums,fleetCount,mobileFleetCount,overallFleetTotal,overallFightingFleetTotal,overallMobileFleetTotal,overallMobileFightingFleetTotal){    	//GALAXY ROWS	for(var i = 0;i<galaxyInfoArrays.length;i++)	{		var galaxyInfoArray = galaxyInfoArrays[i];		if(galaxyInfoArray==undefined || galaxyInfoArray[1] == 0)			continue;				var sumRow = document.createElement("tr");	    sumRow.setAttribute(\'align\',\'center\');	    	    var element = sumRow.insertCell(0);	    element.textContent = "Mobile Fleets ("+i+")";	    element = sumRow.insertCell(1);	    element.textContent = galaxyInfoArray[1];	    		var galaxyFleetSums = galaxyInfoArray[2];		for(var k = 0; k < 20; k++)	    {	        //console.log(sums[k]);	        var cell = document.createElement("td");	        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	        if(galaxyFleetSums[k] > 0)				cell.innerHTML = "<small>"+galaxyFleetSums[k]+"</small>";	        //console.log(element);	        sumRow.insertBefore(cell,null);	    }	    //Add totals cell	    var cell = document.createElement("td");	    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	    cell.innerHTML =galaxyInfoArray[3] +" / "+ galaxyInfoArray[4];	    //console.log(element);	    sumRow.insertBefore(cell,null);	    node.insertBefore(sumRow,null);	}	//MOBILE ROW	var sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    var element = sumRow.insertCell(0);    element.textContent = "Total Mobile Fleets";    element = sumRow.insertCell(1);    element.textContent = mobileFleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(mobileSums[k] > 0)			cell.innerHTML = "<small>"+mobileSums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallMobileFightingFleetTotal +" / "+ overallMobileFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);    //TOTAL ROW    sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    element = sumRow.insertCell(0);    element.textContent = "Total Fleets";    element = sumRow.insertCell(1);    element.textContent = fleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(sums[k] > 0)			cell.innerHTML = "<small>"+sums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallFightingFleetTotal +" / "+ overallFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);}function node(opt) {  function attr(name) {    var value = opt[name];    delete opt[name];    return value;  }  var expandos = { id: 1, className: 1, title: 1, type: 1, checked: 1 };  var id = opt.id;  var n = document.getElementById(id);  if (!n) {    var tag = attr("tag") || "div";    if ("string" == typeof tag)      n = document.createElement(tag);    else {      var t = document.createElement("div");      t.innerHTML = tag.toXMLString();      var ids = {};      for each (var n in $x(\'.//*[@id]\', t))        ids[n.id] = 1;      if (!n) ids = null;      var r = document.createRange();      r.selectNodeContents(t);      n = r.extractContents();      if (n.childNodes.length == 1)        n = n.firstChild;    }    var after = attr("after");    var before = opt.prepend ? opt.prepend.firstChild : attr("before");    var parent = attr("prepend") || attr("append") ||                   (before || after || {}).parentNode;    if (parent) {      if (before)        parent.insertBefore(n, before);      else if (after)        parent.insertBefore(n, after.nextSibling);      else        parent.appendChild(n);    }    if (id) n.id = id;  }  var html = attr("html");  if ("undefined" != typeof html) n.innerHTML = html;  var text = attr("text");  if ("undefined" != typeof text) n.textContent = text;  var style = attr("style");  if (style)    for (var prop in style)      n.style[prop] = style[prop];  for (prop in opt)    if (expandos[prop])      n[prop] = opt[prop];    else      n.setAttribute(prop, opt[prop]+"");  if (ids)    for (var id in ids)      ids[id] = document.getElementById(id);  return ids || n;}function enhanceConstructionPage() {  urbanAdjust = 0;  solarAdjust = 0;  gasAdjust = 0;  fusionAdjust = 0;  antimatterAdjust = 0;  researchAdjust = 0;  metalAdjust = 0;  crystalAdjust = 0;  roboticsAdjust = 0;  shipyardsAdjust = 0;  osAdjust = 0;  spaceportsAdjust = 0;  ccAdjust = 0;  naniteAdjust = 0;  androidAdjust = 0;  economicAdjust = 0;  terraformAdjust = 0;  mlpAdjust = 0;  orbitalbaseAdjust = 0;  jgAdjust = 0;  biosphereAdjust = 0;  capitalAdjust = 0;  barrackAdjust = 0;  laserAdjust = 0;  missileAdjust = 0;  plasmabaseAdjust = 0;  ionAdjust = 0;  photonAdjust = 0;  disruptorAdjust = 0;  deflectionAdjust = 0;  pshieldAdjust = 0;  pringAdjust = 0;  tableArray = document.getElementsByTagName("table")  for(i=0; i<tableArray.length; i++){  if(tableArray[i].innerHTML.match(/<th colspan=.2.>Construction Queue<.th>/)){  for(a=1; a<tableArray[i].childNodes[0].childNodes.length; a++){  if(!tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/<select name=.add_stack.>/)){  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Urban Structures/))  urbanAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Solar Plants/))  solarAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Gas Plants/))  gasAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Fusion Plants/))  fusionAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Antimatter Plants/))  antimatterAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Research Labs/))  researchAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Metal Refineries/))  metalAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Crystal Mines/))  crystalAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Robotic Factories/))  roboticsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Shipyards/) && !tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  shipyardsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  osAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Spaceports/))  spaceportsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Command Centers/))  ccAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Nanite Factories/))  naniteAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Androids Factories/))  androidAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Economic Centers/))  economicAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Terraform/))  terraformAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Multi-Level Platforms/))  mlpAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Base/))  orbitalbaseAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Jump Gate/))  jgAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Biosphere Modification/))  biosphereAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Capital/))  capitalAdjust++;}  }  }  }	table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;	var i_lastcolumn = 5;	var forms = document.getElementsByTagName(\'form\');	if (!table.innerHTML.match(/The research of this base is linked to/)){	if (table && table.childNodes.length > 4) {		table.childNodes[0].style.display=\'none\';		table.childNodes[2].style.display=\'none\';		for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {			if(!table.childNodes[nrow].innerHTML.match(/Research Labs linked to this base research./)){			table.childNodes[nrow+1].style.display=\'none\';			}		}	}	techmultipliers=GM_getValue(server+"techData", "0").split(",")	var energytechmultiplier = (techmultipliers[0]*0.05)+1;	var averageroute = GM_getValue(server+"averageRoute", "31");	var fertility = 0;	var uspopcost = 0;	var obpopcost = 0;	var obcostparentnode = 0;	var popcost = 0;	var areacost = 0;	var energycost = 0;	var econcost = 0;	var prodcost = 0;	var constcost = 0;	var flag = 0;	var bestAreaSignifier = node({tag: \'span\', html: \' <br /> (Best Area)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEconSignifier = node({tag: \'span\', html: \' <br /> (Best Econ)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestProdSignifier = node({tag: \'span\', html: \' <br /> (Best Prod)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestConstSignifier = node({tag: \'span\', html: \' <br /> (Best Const)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestPopSignifier = node({tag: \'span\', html: \' <br /> (Best Pop)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEnergySignifier = node({tag: \'span\', html: \' <br /> (Best Energy)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {		if(!table.childNodes[nrow].innerHTML.match(/linked to this base research./)){		var cname = table.childNodes[nrow].childNodes[1].firstChild.firstChild.firstChild.firstChild.nodeValue + table.childNodes[nrow].childNodes[1].firstChild.firstChild.childNodes[1].nodeValue;		if (location.search.indexOf(\'view=structures\')!=-1) {			table.childNodes[nrow].title = cname;			var td1help_res = table.childNodes[nrow+1].innerHTML.match(/(fertility|metal resource|crystals resource).\\((.+?)\\)/)			if (td1help_res) {			if (flag == 0){				if(td1help_res[1]=="fertility"){				var td1help = "&nbsp;(Fert "+td1help_res[2]+")"				}else if(td1help_res[1]=="metal resource"){				var td1help = "&nbsp;(Metal "+td1help_res[2]+")"				}else if(td1help_res[1]=="crystals resource"){				var td1help = "&nbsp;(Crystal "+td1help_res[2]+")"				}				var d = table.childNodes[nrow].childNodes[1].innerHTML + td1help;				table.childNodes[nrow].childNodes[1].innerHTML = d				}			}				if (cname==\'Terraform\') {				makeAdjustments(nrow, terraformAdjust)				terracost = parseInt(itemcost) / 5;					if(areacost == 0 || areacost > terracost){					areacost = terracost					table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Multi-Level Platforms\') {				adjust = mlpAdjust				makeAdjustments(nrow, mlpAdjust)					var cost = parseInt(itemcost) / 10;					if (cost < areacost) {						areacost = cost;						bestAreaSignifier.parentNode.removeChild(bestAreaSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Urban Structures\') {				makeAdjustments(nrow, urbanAdjust)          USLevel = table.childNodes[nrow].childNodes[1].innerHTML.match(/\\(Level [0-9]{1,}/);          USLevel = parseInt(USLevel[0].replace(/\\(Level /, ""));					fertility = parseInt(td1help_res[2]);					uspopcost = parseInt(itemcost);					uspopcost = (uspopcost+areacost) / fertility;					if (popcost == 0 || popcost > uspopcost){					popcost = uspopcost;					table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);					}				}				if (cname==\'Orbital Base\') {				makeAdjustments(nrow, orbitalbaseAdjust)					obpopcost = parseInt(itemcost) / 10;					obcostparentnode = table.childNodes[nrow].childNodes[2];					if (obpopcost && obpopcost < popcost) {						popcost = obpopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);								}				}								if (cname==\'Solar Plants\' || cname==\'Gas Plants\' || cname==\'Fusion Plants\' || cname==\'Antimatter Plants\') {				if(cname==\'Solar Plants\'){				adjust = solarAdjust				}else if(cname==\'Gas Plants\'){				adjust = gasAdjust				}else if(cname==\'Fusion Plants\'){				adjust = fusionAdjust				}else if(cname==\'Antimatter Plants\'){				adjust = antimatterAdjust				}makeAdjustments(nrow, adjust)					var c = parseInt(itemcost);					var e = parseInt(table.childNodes[nrow].childNodes[3].firstChild.nodeValue.slice(1));					c = (c + popcost + areacost) / (energytechmultiplier*e);					if (e>2){					if (!energycost)						energycost = c;					if (c <= energycost) {						energycost = c;						if (bestEnergySignifier.parentNode)							bestEnergySignifier.parentNode.removeChild(bestEnergySignifier);							table.childNodes[nrow].childNodes[2].appendChild(bestEnergySignifier);					}					}				}				if (cname == "Biosphere Modification"){makeAdjustments(nrow, biosphereAdjust)          var biopopcost = parseInt(itemcost);					biopopcost = (biopopcost+(24*energycost)+areacost)/USLevel										if (biopopcost < popcost) {						popcost = biopopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);																	}				}				if (cname == "Metal Refineries"){				makeAdjustments(nrow, metalAdjust)				var metal = parseInt(td1help_res[2]);				var metalcost = parseInt(itemcost);				metalprodcost = (metalcost + energycost + areacost + popcost)/ metal				metalconstcost = (metalcost + energycost + areacost + popcost)/ metal				metaleconcost = (metalcost + energycost + areacost + popcost)          	if(econcost == 0 || econcost > metaleconcost){          	econcost = metaleconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost == 0 || prodcost > metalprodcost){          	prodcost = metalprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost == 0 || constcost > metalconstcost){          	constcost = metalconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Crystals Mines"){				makeAdjustments(nrow, crystalAdjust)				var crystals = parseInt(td1help_res[2]);				var crystalcost = parseInt(itemcost);				crystalcost = (crystalcost + energycost + areacost)/ crystals          	if(econcost > crystalcost){          	econcost = crystalcost;													table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}			}				if (cname == "Robotic Factories"){				makeAdjustments(nrow, roboticsAdjust)				var robscost = parseInt(itemcost);				robsprodcost = (robscost + energycost + areacost + popcost)/ 2				robsconstcost = (robscost + energycost + areacost + popcost)/ 2				robseconcost = (robscost + energycost + areacost + popcost)          	if(econcost > robseconcost){          	econcost = robseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > robsprodcost){          	prodcost = robsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > robsconstcost){          	constcost = robsconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Shipyards"){				makeAdjustments(nrow, shipyardsAdjust)				var shipscost = parseInt(itemcost);				shipsprodcost = (shipscost + energycost + areacost + popcost)/ 2        shipseconcost = (shipscost + energycost + areacost + popcost)          	if(econcost > shipseconcost){          	econcost = shipseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > shipsprodcost){          	prodcost = shipsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Orbital Shipyards"){				makeAdjustments(nrow, osAdjust)				var oscost = parseInt(itemcost);				osprodcost = (oscost + (energycost*12) + popcost)/8        oseconcost = (oscost + (energycost*12) + popcost)/2          	if(econcost > oseconcost){          	econcost = oseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > osprodcost){          	prodcost = osprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Spaceports"){				makeAdjustments(nrow, spaceportsAdjust)				var Spcost = parseInt(itemcost);				Spcost = (Spcost + energycost + areacost)/ 2          	if(econcost > Spcost){          	econcost = Spcost;							table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}				if (cname == "Nanite Factories"){				makeAdjustments(nrow, naniteAdjust)				var nanicost = parseInt(itemcost);				naniprodcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				naniconstcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				nanieconcost = (nanicost + (energycost*2) + areacost + popcost) /2          	if(econcost > nanieconcost){          	econcost = nanieconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > naniprodcost){          	prodcost = naniprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > naniconstcost){          	constcost = naniconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Androids Factories"){				makeAdjustments(nrow, androidAdjust)				var andrcost = parseInt(itemcost);				andrprodcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andrconstcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andreconcost = (andrcost + (energycost*4) + areacost + popcost) /2          	if(econcost > andreconcost){          	econcost = andreconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > andrprodcost){          	prodcost = andrprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > andrconstcost){          	constcost = andrconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}								if (cname == "Economic Centers"){				makeAdjustments(nrow, economicAdjust)				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*2) + areacost + popcost) /3          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}        if (cname == "Capital"){        makeAdjustments(nrow, capitalAdjust)				basesArray = GM_getValue(server+"Bases")				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*12) + areacost + popcost) / (10+basesArray.length)          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}				        if (cname == "Research Labs"){        makeAdjustments(nrow, researchAdjust)				}					        if (cname == "Command Centers"){        makeAdjustments(nrow, ccAdjust)				}		if (flag == 0){				    	getOptionValue(cname);		if (v==1) {		buttontext=document.createElement("a")		buttontext.href="javascript:document.getElementsByName(\'add_stack\')[0].selectedIndex="+a+"; document.getElementsByTagName(\'form\')[1].submit()"		buttontext.innerHTML = "Queue"			if (buttontext) {			if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){			colnum=3			}else{			colnum=5			}				table.childNodes[nrow].childNodes[colnum].style.whiteSpace=\'nowrap\';				table.childNodes[nrow].childNodes[colnum].appendChild(buttontext);			}	}	if (flag == 0 && nrow==table.childNodes.length-1){						flag =1;						nrow = 1;						}		}}}}}function buttonToSelect(option, text, fallback_text) {}function makeAdjustments(nrow, adjustvar){adjust = adjustvar				if(table.childNodes[nrow].childNodes[6].innerHTML.match(/<span id="time/)){				adjust++ 				}				if(adjust>0){				basecost = parseInt(table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, ""))				time = getSeconds(table.childNodes[nrow].childNodes[5].firstChild.nodeValue)/basecost				time = secsToHMS(time*(Math.round(basecost*Math.pow(1.5, adjust))))				table.childNodes[nrow].childNodes[5].innerHTML = table.childNodes[nrow].childNodes[5].innerHTML + "<br />("+time+") "        table.childNodes[nrow].childNodes[1].innerHTML = table.childNodes[nrow].childNodes[1].innerHTML + " (+"+adjust+")"        table.childNodes[nrow].childNodes[2].firstChild.nodeValue = table.childNodes[nrow].childNodes[2].firstChild.nodeValue + " ("+Math.round((basecost*Math.pow(1.5, adjust)))+")"        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        itemcost = itemcost.replace(/[0-9]+\\(/,"")        itemcost = itemcost.replace(/\\)/, "")        }else{        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        }        }function secsToHMS(seconds){        secVar0 = Math.round(seconds);                            // The initial data, in seconds        minVar = Math.floor(secVar0/60);  // The minutes           hourVar = Math.floor(minVar/60);  // The minutes        minVar = minVar % 60;        secVar = secVar0 % 60;              // The balance of seconds        if(hourVar != 0){        return hourVar+"h "+(minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else if(minVar != 0){        return (minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else{        return (secVar<10?\'0\'+secVar:secVar)+"s"        }                }function getOptionValue(obj){v=0x = document.getElementsByName("add_stack")if(x[0]){x = x[0]for (i=0;i<x.length;i++)    {    if(x.options[i].text == obj){    v=1;	a=i    i = x.length    }    }    }    }/*function insertTimeTextBoxes(){    var inputs = document.forms[1].elements;    for(var i = 0; i < inputs.length; i++)    {        if(inputs[i].className == \'quant\')        {            var row = inputs[i].parentNode.parentNode;            //console.log(row);            var cell = document.createElement("td");            cell.setAttribute("align","center");            cell.innerHTML = \'<input type="text" value="" maxlength="5" size="5" name="\'+inputs[i].name+\' - Time" id="\'+inputs[i].name+\' - Time" class="quant" onchange="update(\\\'\'+inputs[i].name+\'\\\')"/>\';            row.appendChild(cell);            cell.addEventListener(\'keyup\',getConvertTimeToQuantityClosure(row),true);			//cell.addEventListener(\'blur\',onProductionTextBoxChanged,true);        }    }        var tbody = inputs[0].parentNode.parentNode.parentNode;    //console.log(tbody.childNodes[0].firstChild);    //Adjust colspan for top row and third row    tbody.childNodes[0].firstChild.setAttribute("colspan",7);    tbody.childNodes[2].firstChild.setAttribute("colspan",7);    //console.log(tbody.childNodes[1].firstChild);    //Insert column title    var titleCell = document.createElement("th");    titleCell.setAttribute("width","10%");    titleCell.textContent = "Time (h)"    tbody.childNodes[1].appendChild(titleCell);		titleCell.previousSibling.setAttribute("width","10%");    //adjust colspan for all help rows    var helpCells = document.evaluate(    "//td[@class=\'help\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(helpCells.snapshotLength);    for(var i=0;i<helpCells.snapshotLength;i++)    {        helpCells.snapshotItem(i).setAttribute("colspan",6);    }    //adjust colspan for all red rows    var redCells = document.evaluate(    "//td[@class=\'red\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(redCells.snapshotLength);    for(var i=0;i<redCells.snapshotLength;i++)    {        redCells.snapshotItem(i).setAttribute("colspan",2);    }    //adjust colspan for last two rows    document.getElementById("fast").addEventListener("click", function(){var inputs = document.forms[1].elements; for(var i = 0; i < inputs.length; i++){if(inputs[i].className == \'quant\'){if(inputs[i].value == ""){}else{var row = inputs[i].parentNode.parentNode; convertTimeToQuantity(row); unsafeWindow.update(inputs[i].name);}}}}, false)    tbody.childNodes[tbody.childNodes.length-1].firstChild.setAttribute("colspan",7);}*/function getConvertTimeToQuantityClosure(row){    function func(){        convertTimeToQuantity(row);    }    ;    return func;}function convertTimeToQuantity(row){	//console.log(row);    var credits = row.childNodes[2].textContent;    var time = row.childNodes[4].textContent;    var qtyInput = row.childNodes[5].firstChild;    var enteredTime;    try{        enteredTime = parseFloat(row.childNodes[6].firstChild.value);    }    catch(Exception)    {        return;    }    if(isNaN(enteredTime)){    enteredTime = 0    }else{    //console.log("Credits: "+credits+" Time: "+time+" qtyInput: "+ qtyInput.value);    //console.log("entered time: "+isNaN(enteredTime));    var totalSeconds = getSeconds(time);    if(totalSeconds != -1)    {        //console.log("Time " +getTimeDisplay(totalSeconds));        var enteredTimeInSeconds = enteredTime*60*60;        //console.log(enteredTimeInSeconds+" / " +totalSeconds);        if(enteredTimeInSeconds < totalSeconds){			qtyInput.value = "";		}else{			if(document.getElementById("fast").checked == true){			qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)*2			}else{				qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)			}		}    }    onProductionTextBoxKeyUp();    }}function getSeconds(timeString){    var regex = /((\\d|,| |\\.)*h)?\\W?((\\d|,| |\\.)*m)?\\W?((\\d|,| |\\.)*s)?/;    var result = regex.exec(timeString);    if(result)    {        //console.log(result);        var h = 0;var m=0;var s=0;        if(result[1] != null)        h = result[1].substring(0,result[1].indexOf("h"));        if(result[3] != null)        m = result[3].substring(0,result[3].indexOf("m"));        if(result[5] != null)        s = result[5].substring(0,result[5].indexOf("s"));        return h*60*60 + m*60 + s*1;    }    else return -1;}function getTimeDisplay(seconds){    var h = Math.floor(seconds/3600);    var m = Math.floor((seconds % 3600)/60);    var s = Math.floor((seconds % 3600) % 60);    var string = s+"s";    if(m>0 || h>0)		string = m+"m "+string;    if(h>0)		string = h+"h "+string;    return string;}var PRESET_KEYS = new Array("Fighters","Bombers","Heavy Bombers","Ion Bombers","Corvette","Recycler","Destroyer","Frigate","Ion Frigate","Scout Ship", "Outpost Ship","Cruiser","Carrier","Heavy Cruiser","Battleship","Fleet Carrier","Dreadnought","Titan","Leviathan","Death Star","Goods");function onProductionTextBoxKeyUp(){    var shipName;    var count=0,cost=0;    var productionCost = 0;    var totalTime = 0;    for(var i = 0;i <PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.log("Failed to find textBox for "+shipName+".");            continue;        }				if(textBox.value != "")        {            var row = textBox.parentNode.parentNode;            var time = row.childNodes[4].textContent;            //console.log(textBox.value);            count = parseInt(textBox.value);            cost = parseInt(textBox.parentNode.previousSibling.previousSibling.previousSibling.innerHTML.replace(/(,| |\\.)/g, ""));            totalTime+= getSeconds(time) * count;            //console.log(count + " " + shipName + "s @ " + cost);            productionCost += (cost * count);			//textBox.parentNode.nextSibling.value = "";        }    }    //console.log("total Time: "+getTimeDisplay(totalTime));    var fastProduction = document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.checked;    //console.info(fastProduction);    if(fastProduction)	{		productionCost *= 2;		totalTime /= 2;	}    //console.log("Text changed. Total production cost: " +productionCost);    var submitButton = document.evaluate(	    "//input[@type=\'submit\']",	    document,	    null,	    XPathResult.FIRST_ORDERED_NODE_TYPE,	    null).singleNodeValue;    if(productionCost > 0)		submitButton.value = "Submit";    else		submitButton.value = "Submit";}function registerTextBoxEventListeners(){    for(var i = 0;i < PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.info("Failed to find textBox for "+shipName+".");            continue;        }        textBox.addEventListener(\'keyup\',onProductionTextBoxKeyUp,false);		//textBox.addEventListener(\'blur\',onProductionTextBoxChanged,true);    }    document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'change\',onProductionTextBoxKeyUp,false);    //document.evaluate("//input[@type=\'reset\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'click\',onProductionTextBoxKeyUp,true);    document.evaluate("//form[@method=\'post\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'reset\',onProductionTextBoxKeyUp,false);}function productionHelperOnClick(num, box) {	num=num.replace("+", "")	num=num.replace(" ","")	num=num.replace("k","000")		document.getElementById(box).value = parseInt(document.getElementById(box).value) + parseInt(num);     calculateTotals();}function prodHelperEvent(e) {  if (e.shiftKey && (e.name == \'fast\')) {    for (i=0; i<empireLinks.length; i++) {    document.getElementById("fast_"+empireLinks[i]).checked = e.checked;    }  } else if (e.shiftKey && (e.name == \'unit\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("unit_"+empireLinks[i]).selectedIndex = e.selectedIndex;    }  } else if (e.shiftKey && (e.name == \'quant\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("quant_"+empireLinks[i]).value = e.value;    }  }  if ((e.name == \'fast\')||(e.name == \'unit\')||(e.name == \'quant\'))    calculateTotals();}function calculateTotals() {	var pcost = 0;  for (i=0; i<empireLinks.length; i++) {    n = (document.getElementById("fast_"+empireLinks[i]).checked) ? 2 : 1;    pcost += parseInt(ProductionGetCost[document.getElementById("unit_"+empireLinks[i]).selectedIndex] * document.getElementById("quant_"+empireLinks[i]).value * n);	}	document.getElementById(\'cost_all\').innerHTML = pcost+\' credits\';	var credits_left = parseInt(numcredits) - pcost;	document.getElementById(\'cost_all\').style.color = (credits_left < 0) ? \'red\' : \'\';}function resetForm() {  for (i=0; i<empireLinks.length; i++) {    document.getElementById("unit_"+empireLinks[i]).selectedIndex = 0;    document.getElementById("fast_"+empireLinks[i]).checked = false;    document.getElementById("quant_"+empireLinks[i]).value = 0;    returnto = i    calculateTotals();    i=returnto;  }}function startSubmitQueue() {  submitQueue(0);}function submitQueue(i) {    if (document.getElementById("quant_"+empireLinks[i]).value != 0) {      var postData = document.getElementById("unit_"+empireLinks[i]).value+"="+document.getElementById("quant_"+empireLinks[i]).value+"&post_back=true";      if (document.getElementById("fast_"+empireLinks[i]).checked)        postData += "&fast=true";      document.getElementById("quant_"+empireLinks[i]).value = \'ok\';      document.getElementById("quant_"+empireLinks[i]).style.backgroundColor = \'red\';      GM_xmlhttpRequest({        method: "POST",        url: serverurl+"base.aspx?base="+empireLinks[i]+"&view=production",        data: encodeURI(postData),        headers:{\'Content-type\':\'application/x-www-form-urlencoded\'},     		onreadystatechange: function(xhr) {if (xhr.readyState == "4") {endSubmitQueue(i, "1");}}      });    } else {      endSubmitQueue(i, "0");    }}function endSubmitQueue(i, value) {time=1000+Math.floor(Math.random()*1001)  if (i == empireLinks.length-1)    window.setTimeout(function(){ location.reload(true)}, time);  else  if(value == 0){  submitQueue(i+1)  }else{    window.setTimeout(function(){ submitQueue(i+1)}, time);    }}function productionHelper() {  var btn_details = [];  btn_details.push([1,\'+1 \']);  btn_details.push([5,\'+5 \']);  btn_details.push([10,\'+10 \']);  btn_details.push([25,\'+25 \']);  btn_details.push([100,\'+100 \']);  btn_details.push([250,\'+250 \']);  btn_details.push([1000,\'+1k \']);  table.rows[1].childNodes[4].innerHTML = \'Fast Prod\';  table.rows[1].childNodes[5].innerHTML = \'Unit Type\';  table.rows[1].childNodes[6].innerHTML = \'Quantity\';  table.rows[1].childNodes[3].innerHTML = \'Current Queue\';  a=0;  table.firstChild.style.display=\'none\';  for (i=2; i<table.rows.length; i=i+2) {    var currentRow = table.rows[i];		var res = /\\?base=((\\d|,| |\\.)+)/.exec(table.rows[i].childNodes[0].firstChild.href);	  table.rows[i+1].style.display = \'none\';	  empireLinks[a] = res[1];	  a++;	  currentRow.childNodes[3].innerHTML = currentRow.childNodes[5].innerHTML + "<br />" + table.rows[i+1].childNodes[3].innerHTML    currentRow.childNodes[4].innerHTML = "<input type=\'checkbox\' name=\'fast\' class=\'check\' id=\'fast_"+res[1]+"\' onfocus=\\"selectedBox=\'fast_"+res[1]+"\'\\" />";    currentRow.childNodes[6].innerHTML = "<input type=\'text\' name=\'quant\' class=\'quant\' id=\'quant_"+res[1]+"\' size=\'5\' maxlength=\'5\' value=\'0\' onfocus=\\"selectedBox=\'quant_"+res[1]+"\'\\" />";    var html = "<select name=\'unit\' id=\'unit_"+res[1]+"\' onfocus=\\"selectedBox=\'unit_"+res[1]+"\'\\"><option value=\'Fighters\'>Fighters</option><option value=\'Bombers\'>Bombers</option>";    html += "<option value=\'Heavy Bombers\'>Heavy Bombers</option><option value=\'Ion Bombers\'>Ion Bombers</option><option value=\'Corvette\'>Corvette</option>";    html += "<option value=\'Recycler\'>Recycler</option><option value=\'Destroyer\'>Destroyer</option><option value=\'Frigate\'>Frigate</option>"    html += "<option value=\'Ion Frigate\'>Ion Frigate</option><option value=\'Scout Ship\'>Scout Ship</option><option value=\'Outpost Ship\'>Outpost Ship</option>";    html += "<option value=\'Cruiser\'>Cruiser</option><option value=\'Carrier\'>Carrier</option><option value=\'Heavy Cruiser\'>Heavy Cruiser</option>";    html += "<option value=\'Battleship\'>Battleship</option><option value=\'Fleet Carrier\'>Fleet Carrier</option><option value=\'Dreadnought\'>Dreadnought</option>";    html += "<option value=\'Titan\'>Titan</option><option value=\'Leviathan\'>Leviathan</option><option value=\'Death Star\'>Death Star</option></select>";    currentRow.childNodes[5].innerHTML = html;    document.getElementById("unit_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("quant_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("fast_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    for(c=0; c<7; c++) {      var num = btn_details[c][0];      l = document.createElement("a");		l.href = "javascript:void(1);";		l.id= i + btn_details[c][1];		l.innerHTML = btn_details[c][1];            l.name = "quant_"+res[1];      currentRow.childNodes[6].appendChild(l);      document.getElementById(i + btn_details[c][1]).addEventListener(\'click\', function(){ productionHelperOnClick(this.innerHTML, this.name );}, true);    }  }  l = document.createElement("tr");  l.id="extrarow1";  table.appendChild(l);  l = document.createElement("td");		l.innerHTML = "0 credits";      l.className = \'help\';      l.align = "right";      l.id="cost_all"      document.getElementById("extrarow1").appendChild(l);      document.getElementById("cost_all").colSpan="7";      l = document.createElement("tr");      l.id="extrarow2";      table.appendChild(l);      l = document.createElement("td");      l.className = \'help\';      l.align = "right";          l.id="prodHelperButtons"      document.getElementById("extrarow2").appendChild(l);      document.getElementById("prodHelperButtons").colSpan="7";      l = document.createElement("input");      l.type = "reset";      l.id = "resetButton";      l.value = "Reset";      document.getElementById("prodHelperButtons").appendChild(l);      l = document.createElement("input");      l.type = "submit";      l.id = "submitButton";      l.value = "submit";      document.getElementById("prodHelperButtons").appendChild(l);   document.getElementById("submitButton").addEventListener(\'click\', function(){ startSubmitQueue();}, true);  document.getElementById("resetButton").addEventListener(\'click\', function(){ resetForm();}, true);}function productionHelperButton() {		table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;		var prodTitle = table.childNodes[1].childNodes[5];		scoutButton = document.createElement("a");		scoutButton.href = "javascript:void(1);";		scoutButton.id= "prodHelperButton";		scoutButton.innerHTML=" [&#177;]";		scoutButton.title = "Production Helper"		prodTitle.appendChild(scoutButton)		document.getElementById(\'prodHelperButton\').addEventListener(\'click\', function() {productionHelper();}, true);	}function saveTechData(){    //console.log("Saving tech data");    var techData = new Array();    var rows = document.evaluate(    "//tr[@align=\'center\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log("Tech rows: "+ rows.snapshotLength);    for (var i = 0; i < rows.snapshotLength; i++)    {        var techNameCell = document.evaluate(        "th[1]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        var techValueCell = document.evaluate(        "td[4]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        if(techNameCell.snapshotLength > 0)        {            var techValue = parseInt(techValueCell.snapshotItem(0).innerHTML.replace(/(,| |\\.)/g, ""));            var techName = techNameCell.snapshotItem(0).innerHTML;            //console.log(techName +": "+techValue);            techData[i] = techValue;        }    }    GM_setValue(server+"techData",techData.join());}/* function scannerGrab(){tableArray = document.getElementsByTagName("table")for(i=0; i<tableArray.length; i++){if(tableArray[i].innerHTML.match(/<th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=fleet">Fleet<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=player">Player<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=destination">Destination<\\/a><\\/th><th width="20%"><a href="empire.aspx\\?view=scanners&amp;order=arrival">Arrival<\\/a><\\/th><th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=size">Size<\\/a><\\/th>/)){table = tableArray[i]fleetId = []fleetName = []fleetOwner = []ownerId = []fleetDest = []fleetArrive = []fleetSize = []for(a=1; a<table.rows.length; a++){fleetId[a-1] = table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=/, "") fleetId[a-1] = fleetId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetName[a-1]=table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetName[a-1]=fleetName[a-1].replace(/<\\/a>/, "");fleetOwner[a-1]=table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=[0-9]{1,}">/, "")fleetOwner[a-1]=fleetOwner[a-1].replace(/<\\/a>/, "");ownerId[a-1] =table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=/, "")ownerId[a-1] = ownerId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetDest[a-1]=table.rows[a].childNodes[2].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)fleetArrive[a-1]=parseInt(table.rows[a].childNodes[3].title)+Math.round(new Date().getTime()/1000.0)fleetSize[a-1]=table.rows[a].childNodes[4].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetSize[a-1]=fleetSize[a-1].replace(/<\\/a>(.*?)/, "");fleetSize[a-1]=fleetSize[a-1].replace(/(,| |.)/, "");}sendData = "&fleetId="+fleetId+"&fleetName="+fleetName+"&fleetOwner="+fleetOwner+"&ownerId="+ownerId+"&fleetDest="+fleetDest+"&fleetArrive="+fleetArrive+"&fleetSize="+fleetSize+"&seenBy="+document.getElementById(\'account\').parentNode.childNodes[1].innerHTML.replace(/[A-Za-z]./, \'\')if(GIAServers.inArray(server)){sendtoserver(sendData, "scanners.php")}}}}*/// If NS -- that is, !IE -- then set up for mouse capturedocument.captureEvents(Event.MOUSEMOVE)// Set-up to use getMouseXY function onMouseMovedocument.addEventListener("mousemove", function(e) {getMouseXY(e)}, true);// Temporary variables to hold mouse x-y pos.svar tempX = 0var tempY = 0// Main function to retrieve mouse x-y pos.sfunction getMouseXY(e) {// grab the x-y pos.s if browser is NS    tempX = e.pageX    tempY = e.pageY  // catch possible negative values in NS4  if (tempX < 0){tempX = 0}  if (tempY < 0){tempY = 0}  // show the position values in the form named Show  // in the text fields named MouseX and MouseY  return true}function linkEventListeners(){if(GIAServers.inArray(server)){linkArray=document.getElementsByTagName("a")for(i=0; i<linkArray.length; i++){if(linkArray[i].href.match(/map.aspx\\?(.*?)loc=E[0-9]{2}:[0-9]{2}:[0-9]{2}/)){linkArray[i].addEventListener("mouseover", function(e) {showBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""), tempX, tempY)}, true);linkArray[i].addEventListener("mouseout", function() {hideBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""))}, true);}}}}function linkChange(){	linkArray=document.getElementsByTagName(\'a\')	for(i=0; i < linkArray.length; i++){		linkArray[i].target = "_blank"	}}  ////////////////////////////////////////// /// Execution //////////////////////////////////////////////////////////////////////if(document.location.href.match(/astroempires.com/)){replaceTime();if(document.location.href.match(/loc=[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){	if(document.body.innerHTML.match(/<th colspan=.4.>Base<\\/th>/)){	if(GIAServers.inArray(server)){	centerArray=document.getElementsByTagName(\'center\')	for(i=0; i<centerArray.length; i++){	if(centerArray[i].innerHTML.match(/Astro Type:/)){	baseLink = document.body.innerHTML.match(/base.aspx\\?base=[0-9]{1,}/)[0]	sourceDiv = document.createElement("div")	sourceDiv.id="baseDiv";	sourceDiv.innerHTML="Visit the <a href=\\""+baseLink+"\\">base page</a> to add this base to GIA.<br /><br />";	centerArray[i].appendChild(sourceDiv)	}	}	}	}}else if(document.location.href.match(/[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}/)){	debrisShow()}else if(document.location.href.match(/http:\\/\\/(.+?)\\.astroempires\\.com\\/base\\.aspx\\?base=[0-9]{1,}$/)){	if(window.parent.document.location.href != document.location.href){	baseDetails();	}}else if(document.location.href.match(/empire.aspx$/) || document.location.href.match(/empire.aspx\\?view=bases_events$/)){	productionHelperButton();}else if(document.location.href.match(/view=scanners/)){	scannerFormat();}else if(window.location.href.match(/empire.aspx\\?view=fleets/)){        sumShips();}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=structures/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=defenses/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){	if(!document.location.href.match(/&info=/)){enhanceConstructionPage();}}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=production/)){insertTimeTextBoxes()}if(window.location.href.indexOf(\'view=move\')==-1 && window.location.href.indexOf(\'view=fleets\')==-1 &&		window.location.href.indexOf(\'view=production\')==-1 && window.location.href.indexOf(\'view=structures\')==-1 &&		window.location.href.indexOf(\'view=trade\')==-1 && window.location.href.indexOf(\'view=research\')==-1){		formatVariousNumbers();	}	}',
                                                           'auto_upgrade' => 1,
                                                           'max_memory_size' => 262144
                                                         }, 'Mojo::Asset::Memory' ),
                                       'pre_buffer' => '',
                                       'events' => {
                                                     'read' => [
                                                                 sub { "DUMMY" }
                                                               ]
                                                   },
                                       'buffer' => '',
                                       'size' => 63681,
                                       'real_size' => 63681,
                                       'auto_upgrade' => 1,
                                       'headers' => bless( {
                                                             'headers' => {
                                                                            'content-length' => [
                                                                                                  '63681'
                                                                                                ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ],
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ],
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ]
                                                                          },
                                                             'normalcase' => {
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST'
                                                                             }
                                                           }, 'Mojo::Headers' ),
                                       'read' => $VAR1->{'content'}{'events'}{'read'}[0],
                                       'body' => 2,
                                       'state' => 'finished',
                                       'raw_size' => 63681
                                     }, 'Mojo::Content::Single' ),
                 'url' => bless( {
                                   'base' => bless( {
                                                      'host' => 'localhost',
                                                      'path' => bless( {
                                                                         'leading_slash' => '',
                                                                         'parts' => [],
                                                                         'charset' => 'UTF-8',
                                                                         'trailing_slash' => ''
                                                                       }, 'Mojo::Path' ),
                                                      'port' => '',
                                                      'scheme' => 'HTTP'
                                                    }, 'Mojo::URL' ),
                                   'path' => bless( {
                                                      'path' => '/ae/gia',
                                                      'charset' => 'UTF-8'
                                                    }, 'Mojo::Path' )
                                 }, 'Mojo::URL' ),
                 'method' => 'POST',
                 'finished' => 1,
                 'raw_size' => 0,
                 'state' => 'finished',
                 'env' => {
                            'SERVER_PORT' => 5000,
                            'psgi.run_once' => '',
                            'psgix.io' => bless( \*Symbol::GEN1, 'IO::Socket::INET' ),
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'SCRIPT_NAME' => '',
                            'psgi.streaming' => 1,
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'REMOTE_ADDR' => '127.0.0.1',
                            'psgix.harakiri' => 1,
                            'psgi.input' => bless( \*{'Stream::Buffered::PerlIO::$io'}, 'FileHandle' ),
                            'REMOTE_PORT' => 54485,
                            'psgi.url_scheme' => 'http',
                            'REQUEST_URI' => '/ae/gia',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'psgix.input.buffered' => 1,
                            'QUERY_STRING' => '',
                            'HTTP_ACCEPT' => '*/*',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'CONTENT_LENGTH' => '63681',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'HTTP_HOST' => 'localhost',
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'SERVER_NAME' => 0,
                            'REQUEST_METHOD' => 'POST',
                            'PATH_INFO' => '/ae/gia',
                            'psgi.multithread' => '',
                            'psgi.nonblocking' => '',
                            'psgi.errors' => *::STDERR,
                            'psgi.multiprocess' => '',
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'HTTP_CONNECTION' => 'close'
                          },
                 'version' => '1.0',
                 'buffer' => '',
                 'events' => {},
                 'max_message_size' => 10485760
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:50:55 2014] [error] Can't locate object method "content" via package "Mojo::Asset::Memory" at /home/nate/src/git/AstroEmpires/ae_web/script/../lib/AeWeb/Controller/Main.pm line 24, <DATA> line 231.

[Wed Oct 22 13:50:55 2014] [debug] Template "exception.development.html.ep" not found.
[Wed Oct 22 13:50:55 2014] [debug] Template "exception.html.ep" not found.
[Wed Oct 22 13:50:55 2014] [debug] Rendering inline template "3e3201ab0667c1fc7f39089209f0435c".
[Wed Oct 22 13:50:55 2014] [debug] Rendering inline template "b2d451b47e2053ce583cbfdf7bcc6006".
[Wed Oct 22 13:50:55 2014] [debug] 500 Internal Server Error (0.175931s, 5.684/s).
[Wed Oct 22 13:55:46 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:55:46 2014] [debug] POST "/ae/gia".
[Wed Oct 22 13:55:46 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 13:55:46 2014] [debug] $VAR1 = bless( {
                 'max_message_size' => 10485760,
                 'version' => '1.0',
                 'events' => {},
                 'buffer' => '',
                 'env' => {
                            'psgix.harakiri' => 1,
                            'REMOTE_ADDR' => '127.0.0.1',
                            'REMOTE_PORT' => 54487,
                            'psgi.input' => bless( \*{'Stream::Buffered::PerlIO::$io'}, 'FileHandle' ),
                            'psgi.url_scheme' => 'http',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'REQUEST_URI' => '/ae/gia',
                            'psgi.run_once' => '',
                            'SERVER_PORT' => 5000,
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'psgix.io' => bless( \*Symbol::GEN2, 'IO::Socket::INET' ),
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'psgi.streaming' => 1,
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'SCRIPT_NAME' => '',
                            'psgi.errors' => *::STDERR,
                            'psgi.nonblocking' => '',
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'psgi.multiprocess' => '',
                            'HTTP_CONNECTION' => 'close',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'QUERY_STRING' => '',
                            'psgix.input.buffered' => 1,
                            'HTTP_ACCEPT' => '*/*',
                            'CONTENT_LENGTH' => '63681',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'HTTP_HOST' => 'localhost',
                            'SERVER_NAME' => 0,
                            'REQUEST_METHOD' => 'POST',
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'PATH_INFO' => '/ae/gia',
                            'psgi.multithread' => ''
                          },
                 'raw_size' => 0,
                 'state' => 'finished',
                 'finished' => 1,
                 'url' => bless( {
                                   'base' => bless( {
                                                      'path' => bless( {
                                                                         'charset' => 'UTF-8',
                                                                         'trailing_slash' => '',
                                                                         'parts' => [],
                                                                         'leading_slash' => ''
                                                                       }, 'Mojo::Path' ),
                                                      'scheme' => 'HTTP',
                                                      'port' => '',
                                                      'host' => 'localhost'
                                                    }, 'Mojo::URL' ),
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia'
                                                    }, 'Mojo::Path' )
                                 }, 'Mojo::URL' ),
                 'method' => 'POST',
                 'content' => bless( {
                                       'buffer' => '',
                                       'events' => {
                                                     'read' => [
                                                                 sub { "DUMMY" }
                                                               ]
                                                   },
                                       'asset' => bless( {
                                                           'content' => '// ==UserScript==// @name           GIA Script (Modified)// @author          Luke Bonaccorsi AKA SpeedySurfer// @namespace       http://gears.speedysurfer.co.uk// @description     Scouts for bases in the current region// @license         Creative Commons Attribution License// @include        http://*.astroempires.com/*// @exclude        http://*.astroempires.com/login.aspx// @exclude        http://*.astroempires.com/home.aspx// ==/UserScript==/* * This file is a Greasemonkey user script. To install it, you need  * the Firefox plugin "Greasemonkey" (URL: http://greasemonkey.mozdev.org/) * After you installed the extension, restart Firefox and revisit  * this script. Now you will see a new menu item "Install User Script" * in your tools menu. *  * To uninstall this script, go to your "Tools" menu and select  * "Manage User Scripts", then select this script from the list * and click uninstall :-) * * Creative Commons Attribution License (--> or Public Domain) * http://creativecommons.org/licenses/by/2.5/*/  ////////////////////////////////////////// /// Variables //////////////////////////////////////////////////////////////////////if (document.location.href.match(/(.+?)astroempires.com/)){var server=document.location.href.match(/\\/(.+?).astroempires.com/)[1]server = server.replace(/\\//, "")var serverurl= "http://"+server+".astroempires.com/"}if(document.location.href.match(/astroempires.com/)){var empireLinks = []; var ProductionGetCost = [5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000]; var numcredits = document.evaluate(    "/html/body/table/tbody/tr/th/table/tbody/tr[2]/th[2]",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    numcredits = numcredits.snapshotItem(0).innerHTML;var FT_INDEX = 0;var BO_INDEX = 1;var HB_INDEX = 2;var IB_INDEX = 3;var CV_INDEX = 4;var RC_INDEX = 5;var DE_INDEX = 6;var FR_INDEX = 7;var IF_INDEX = 8;var SS_INDEX = 9;var OS_INDEX = 10;var CR_INDEX = 11;var CA_INDEX = 12;var HC_INDEX = 13;var BC_INDEX = 14;var FC_INDEX = 15;var DN_INDEX = 16;var TI_INDEX = 17;var LE_INDEX = 18;var DS_INDEX = 19;var BARRACKS_INDEX = 20;var LASER_TURRETS_INDEX = 21;var MISSLE_TURRETS_INDEX = 22;var PLASMA_TURRENTS_INDEX = 23;var ION_TURRETS_INDEX = 24;var PHOTON_TURRETS_INDEX = 25;var DISRUPTOR_TURRETS_INDEX = 26;var DEFLECTION_SHIELDS_INDEX = 27;var PLANETARY_SHIELD_INDEX = 28;var PLANETARY_RING_INDEX = 29;var fightingShips = "11111011100101101111";var shipValues = new Array(5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000);var shipHangarValues = new Array(0,0,0,0,0,0,0,4,4,0,0,4,60,8,40,400,200,1000,4000,10000);var GIAServers = new Array("bravo");}  ////////////////////////////////////////// /// Misc /////////////////////////////////////////////////////////////////////////Array.prototype.inArray = function (value)// Returns true if the passed value is found in the// array. Returns false if it is not.{var i;for (i=0; i < this.length; i++) {// Matches identical (===), not just similar (==).if (this[i] === value) {return true;}}return false;};function replaceTime(){	  for(n=1;n<=500;n++)	  {		elem=document.getElementById(\'time\'+n);	    if (!elem)	    {	       break;	    }	    elem.id = \'blah\'+n;	    s=elem.title;	    var newElement, endTime;	    var d = new Date();	    var now = new Date();	    if (elem)	    {	       if(s<=0)	       {		 endTime="-"	       }	       else	       {		 d.setTime(d.getTime()+(s*1000));		 tempdate = new Date();		 tempdate.setDate(tempdate.getDate()+1)		 if(now.toLocaleDateString() == d.toLocaleDateString() )		 {		    endTime="Today @ "+d.formatDate(\'H:i:s\');		 }		 else if(tempdate.toLocaleDateString() == d.toLocaleDateString())		 {		    endTime="Tomorrow @ "+d.formatDate(\'H:i:s\');		 }		 else		 {		    endTime=d.formatDate(\'D jS M @ H:i:s\');		 }	       }	       elem.innerHTML = "<b><span id=\'time"+n+"\' title=\'"+ s +"\'>-</span></b><br><nobr><span id=\'done"+n+"\' style=\'font-size: xx-small; color: "+getAgeCol(s)+"\'>" + endTime + "</span></nobr>"	    }	  }};  // formatDate :// a PHP date like function, for formatting date strings// authored by Svend Tofte <www.svendtofte.com>// the code is in the public domain//// see http://www.svendtofte.com/javascript/javascript-date-string-formatting/// and http://www.php.net/date//// thanks to//  - Daniel Berlin <mail@daniel-berlin.de>,//    major overhaul and improvements//  - Matt Bannon,//    correcting some stupid bugs in my days-in-the-months list!//  - levon ghazaryan. pointing out an error in z switch.//  - Andy Pemberton. pointing out error in c switch//// input : format string// time : epoch time (seconds, and optional)//// if time is not passed, formatting is based on// the current "this" date object\'s set time.//// supported switches are// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L),// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z//// unsupported (as compared to date in PHP 5.1.3)// T, e, oDate.prototype.formatDate = function (input,time) {    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday",                       "Thursday", "Friday", "Saturday"];    var daysShort =   ["Sun", "Mon", "Tue", "Wed",                       "Thu", "Fri", "Sat"];    var monthsShort = ["Jan", "Feb", "Mar", "Apr",                       "May", "Jun", "Jul", "Aug", "Sep",                       "Oct", "Nov", "Dec"];    var monthsLong =  ["January", "February", "March", "April",                       "May", "June", "July", "August", "September",                       "October", "November", "December"];    var switches = { // switches object        a : function () {            // Lowercase Ante meridiem and Post meridiem            return date.getHours() > 11? "pm" : "am";        },        A : function () {            // Uppercase Ante meridiem and Post meridiem            return (this.a().toUpperCase ());        },        B : function (){            // Swatch internet time. code simply grabbed from ppk,            // since I was feeling lazy:            // http://www.xs4all.nl/~ppk/js/beat.html            var off = (date.getTimezoneOffset() + 60)*60;            var theSeconds = (date.getHours() * 3600) +                             (date.getMinutes() * 60) +                              date.getSeconds() + off;            var beat = Math.floor(theSeconds/86.4);            if (beat > 1000) beat -= 1000;            if (beat < 0) beat += 1000;            if ((String(beat)).length == 1) beat = "00"+beat;            if ((String(beat)).length == 2) beat = "0"+beat;            return beat;        },        c : function () {            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" +                    this.H() + ":" + this.i() + ":" + this.s() + this.P());        },        d : function () {            // Day of the month, 2 digits with leading zeros            var j = String(this.j());            return (j.length == 1 ? "0"+j : j);        },        D : function () {            // A textual representation of a day, three letters            return daysShort[date.getDay()];        },        F : function () {            // A full textual representation of a month            return monthsLong[date.getMonth()];        },        g : function () {           // 12-hour format of an hour without leading zeros, 1 through 12!           if (date.getHours() == 0) {               return 12;           } else {               return date.getHours()>12 ? date.getHours()-12 : date.getHours();           }       },        G : function () {            // 24-hour format of an hour without leading zeros            return date.getHours();        },        h : function () {            // 12-hour format of an hour with leading zeros            var g = String(this.g());            return (g.length == 1 ? "0"+g : g);        },        H : function () {            // 24-hour format of an hour with leading zeros            var G = String(this.G());            return (G.length == 1 ? "0"+G : G);        },        i : function () {            // Minutes with leading zeros            var min = String (date.getMinutes ());            return (min.length == 1 ? "0" + min : min);        },        I : function () {            // Whether or not the date is in daylight saving time (DST)            // note that this has no bearing in actual DST mechanics,            // and is just a pure guess. buyer beware.            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");            return (noDST.getTimezoneOffset () ==                    date.getTimezoneOffset () ? 0 : 1);        },        j : function () {            // Day of the month without leading zeros            return date.getDate();        },        l : function () {            // A full textual representation of the day of the week            return daysLong[date.getDay()];        },        L : function () {            // leap year or not. 1 if leap year, 0 if not.            // the logic should match iso\'s 8601 standard.            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html            var Y = this.Y();            if (                (Y % 4 == 0 && Y % 100 != 0) ||                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)                ) {                return 1;            } else {                return 0;            }        },        m : function () {            // Numeric representation of a month, with leading zeros            var n = String(this.n());            return (n.length == 1 ? "0"+n : n);        },        M : function () {            // A short textual representation of a month, three letters            return monthsShort[date.getMonth()];        },        n : function () {            // Numeric representation of a month, without leading zeros            return date.getMonth()+1;        },        N : function () {            // ISO-8601 numeric representation of the day of the week            var w = this.w();            return (w == 0 ? 7 : w);        },        O : function () {            // Difference to Greenwich time (GMT) in hours            var os = Math.abs(date.getTimezoneOffset());            var h = String(Math.floor(os/60));            var m = String(os%60);            h.length == 1? h = "0"+h:1;            m.length == 1? m = "0"+m:1;            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;        },        P : function () {            // Difference to GMT, with colon between hours and minutes            var O = this.O();            return (O.substr(0, 3) + ":" + O.substr(3, 2));        },        r : function () {            // RFC 822 formatted date            var r; // result            //  Thu         ,     21               Dec              2000            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +            //    16          :    01          :    07               0200            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();            return r;        },        s : function () {            // Seconds, with leading zeros            var sec = String (date.getSeconds ());            return (sec.length == 1 ? "0" + sec : sec);        },        S : function () {            // English ordinal suffix for the day of the month, 2 characters            switch (date.getDate ()) {                case  1: return ("st");                case  2: return ("nd");                case  3: return ("rd");                case 21: return ("st");                case 22: return ("nd");                case 23: return ("rd");                case 31: return ("st");                default: return ("th");            }        },        t : function () {            // thanks to Matt Bannon for some much needed code-fixes here!            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];            if (this.L()==1 && this.n()==2) return 29; // ~leap day            return daysinmonths[this.n()];        },        U : function () {            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)            return Math.round(date.getTime()/1000);        },        w : function () {            // Numeric representation of the day of the week            return date.getDay();        },        W : function () {            // Weeknumber, as per ISO specification:            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            var DoW = this.N ();            var DoY = this.z ();            // If the day is 3 days before New Year\'s Eve and is Thursday or earlier,            // it\'s week 1 of next year.            var daysToNY = 364 + this.L () - DoY;            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {                return 1;            }            // If the day is within 3 days after New Year\'s Eve and is Friday or later,            // it belongs to the old year.            if (DoY <= 2 && DoW >= 5) {                return new Date (this.Y () - 1, 11, 31).formatDate ("W");            }            var nyDoW = new Date (this.Y (), 0, 1).getDay ();            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier                return (1 + Math.floor ((DoY + nyDoW) / 7));            } else {  // First day of the year is a Friday or later                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));            }        },        y : function () {            // A two-digit representation of a year            var y = String(this.Y());            return y.substring(y.length-2,y.length);        },        Y : function () {            // A full numeric representation of a year, 4 digits            // we first check, if getFullYear is supported. if it            // is, we just use that. ppks code is nice, but wont            // work with dates outside 1900-2038, or something like that            if (date.getFullYear) {                var newDate = new Date("January 1 2001 00:00:00 +0000");                var x = newDate .getFullYear();                if (x == 2001) {                    // i trust the method now                    return date.getFullYear();                }            }            // else, do this:            // codes thanks to ppk:            // http://www.xs4all.nl/~ppk/js/introdate.html            var x = date.getYear();            var y = x % 100;            y += (y < 38) ? 2000 : 1900;            return y;        },        z : function () {            // The day of the year, zero indexed! 0 through 366            var s = "January 1 " + this.Y() + " 00:00:00 GMT" + this.O();            var t = new Date(s);            var diff = date.getTime() - t.getTime();            return Math.floor(diff/1000/60/60/24);        },        Z : function () {            // Timezone offset in seconds            return (date.getTimezoneOffset () * -60);        }    }    function getSwitch(str) {        if (switches[str] != undefined) {            return switches[str]();        } else {            return str;        }    }    var date;    if (time) {        var date = new Date (time);    } else {        var date = this;    }    var formatString = input.split("");    var i = 0;    while (i < formatString.length) {        if (formatString[i] == "%") {            // this is our way of allowing users to escape stuff            formatString.splice(i,1);        } else {            formatString[i] = getSwitch(formatString[i]);        }        i++;    }    return formatString.join("");}// Some (not all) predefined format strings from PHP 5.1.1, which// offer standard date representations.// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants//// Atom      "2005-08-15T15:52:01+00:00"Date.DATE_ATOM    = "Y-m-d%TH:i:sP";// ISO-8601  "2005-08-15T15:52:01+0000"Date.DATE_ISO8601 = "Y-m-d%TH:i:sO";// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"Date.DATE_RFC2822 = "D, d M Y H:i:s O";// W3C       "2005-08-15 15:52:01+00:00"Date.DATE_W3C     = "Y-m-d%TH:i:sP";function getAgeCol(age) {		var col = \'#461B7E\'; // 72 hours +		if (age <= 3600)			col = \'#FFFFFF\'; // 1 hour		else if (age <=10800)			col = \'#FFFFFF\'; // 3 hours		else if (age <=21600)			col = \'#9E7BFF\'; // 6 hours		else if (age <=43200)			col = \'#9172EC\'; // 12 hours		else if (age <=86400)			col = \'#8467D7\'; // 24 hours		else if (age <=172800)			col = \'#7A5DC7\'; // 48 hours		else if (age <=259200)			col = \'#461B7E\'; // 72 hours		return col;}function debrisShow(){	spanArray = document.getElementsByTagName("span")	for(i=0; i<spanArray.length; i++){		if(spanArray[i].getAttribute("class") == "gray"){		spanArray[i].innerHTML = spanArray[i].title		}	}}function formatVariousNumbers(){	var debrisElement = document.evaluate(    "//center[contains(text(),\'Debris\')]",    document,    null,    XPathResult.FIRST_ORDERED_NODE_TYPE,    null).singleNodeValue;    if(debrisElement !=null)    {        var debrisMessage = debrisElement.textContent;        console.log(debrisMessage);        var indexOfText = debrisMessage.indexOf(" credits");        var valueText = debrisMessage.substring(0,indexOfText);        var value = commaFormat(parseInt(valueText));        //console.log(valueText+" new value:" +value.toString());        //console.log(debrisElement.textContent + " -< " + debrisElement.textContent.replace(valueText,value.toString()));        debrisElement.textContent = debrisElement.textContent.replace(valueText,value.toString());    }}function scannerFormat(){	baseArray=document.getElementsByTagName("a")	bases = GM_getValue(server+"Bases")	for(i=0; i<baseArray.length; i++){		if(baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){			basecoord=baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)			if(bases.match(basecoord)){			baseArray[i].setAttribute("style", "color: red; font-weight: normal;")			}		}	}}var galaxyInfoArrays = new Array();function getGalaxyInfoArray(galaxy){	if(galaxyInfoArrays[galaxy]==undefined)	{		var newArray = new Array(20);		for(var i = 0; i < 20;i++)		{			newArray[i] = 0;		}		galaxyInfoArrays[galaxy] = new Array(galaxy,0,newArray,0,0);//[galaxy number],[mobile fleet count],[mobilefleetarray],[total fighting fleet],[total fleet],	}	return galaxyInfoArrays[galaxy];}function isBase(base){	bases = GM_getValue(server+"Bases")    if(bases==null)    return false;    if(bases.match(base)){        return true;    }else{    return false;	}}function insertTotalsRow(node,sums,mobileSums,fleetCount,mobileFleetCount,overallFleetTotal,overallFightingFleetTotal,overallMobileFleetTotal,overallMobileFightingFleetTotal){    	//GALAXY ROWS	for(var i = 0;i<galaxyInfoArrays.length;i++)	{		var galaxyInfoArray = galaxyInfoArrays[i];		if(galaxyInfoArray==undefined || galaxyInfoArray[1] == 0)			continue;				var sumRow = document.createElement("tr");	    sumRow.setAttribute(\'align\',\'center\');	    	    var element = sumRow.insertCell(0);	    element.textContent = "Mobile Fleets ("+i+")";	    element = sumRow.insertCell(1);	    element.textContent = galaxyInfoArray[1];	    		var galaxyFleetSums = galaxyInfoArray[2];		for(var k = 0; k < 20; k++)	    {	        //console.log(sums[k]);	        var cell = document.createElement("td");	        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	        if(galaxyFleetSums[k] > 0)				cell.innerHTML = "<small>"+galaxyFleetSums[k]+"</small>";	        //console.log(element);	        sumRow.insertBefore(cell,null);	    }	    //Add totals cell	    var cell = document.createElement("td");	    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	    cell.innerHTML =galaxyInfoArray[3] +" / "+ galaxyInfoArray[4];	    //console.log(element);	    sumRow.insertBefore(cell,null);	    node.insertBefore(sumRow,null);	}	//MOBILE ROW	var sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    var element = sumRow.insertCell(0);    element.textContent = "Total Mobile Fleets";    element = sumRow.insertCell(1);    element.textContent = mobileFleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(mobileSums[k] > 0)			cell.innerHTML = "<small>"+mobileSums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallMobileFightingFleetTotal +" / "+ overallMobileFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);    //TOTAL ROW    sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    element = sumRow.insertCell(0);    element.textContent = "Total Fleets";    element = sumRow.insertCell(1);    element.textContent = fleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(sums[k] > 0)			cell.innerHTML = "<small>"+sums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallFightingFleetTotal +" / "+ overallFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);}function node(opt) {  function attr(name) {    var value = opt[name];    delete opt[name];    return value;  }  var expandos = { id: 1, className: 1, title: 1, type: 1, checked: 1 };  var id = opt.id;  var n = document.getElementById(id);  if (!n) {    var tag = attr("tag") || "div";    if ("string" == typeof tag)      n = document.createElement(tag);    else {      var t = document.createElement("div");      t.innerHTML = tag.toXMLString();      var ids = {};      for each (var n in $x(\'.//*[@id]\', t))        ids[n.id] = 1;      if (!n) ids = null;      var r = document.createRange();      r.selectNodeContents(t);      n = r.extractContents();      if (n.childNodes.length == 1)        n = n.firstChild;    }    var after = attr("after");    var before = opt.prepend ? opt.prepend.firstChild : attr("before");    var parent = attr("prepend") || attr("append") ||                   (before || after || {}).parentNode;    if (parent) {      if (before)        parent.insertBefore(n, before);      else if (after)        parent.insertBefore(n, after.nextSibling);      else        parent.appendChild(n);    }    if (id) n.id = id;  }  var html = attr("html");  if ("undefined" != typeof html) n.innerHTML = html;  var text = attr("text");  if ("undefined" != typeof text) n.textContent = text;  var style = attr("style");  if (style)    for (var prop in style)      n.style[prop] = style[prop];  for (prop in opt)    if (expandos[prop])      n[prop] = opt[prop];    else      n.setAttribute(prop, opt[prop]+"");  if (ids)    for (var id in ids)      ids[id] = document.getElementById(id);  return ids || n;}function enhanceConstructionPage() {  urbanAdjust = 0;  solarAdjust = 0;  gasAdjust = 0;  fusionAdjust = 0;  antimatterAdjust = 0;  researchAdjust = 0;  metalAdjust = 0;  crystalAdjust = 0;  roboticsAdjust = 0;  shipyardsAdjust = 0;  osAdjust = 0;  spaceportsAdjust = 0;  ccAdjust = 0;  naniteAdjust = 0;  androidAdjust = 0;  economicAdjust = 0;  terraformAdjust = 0;  mlpAdjust = 0;  orbitalbaseAdjust = 0;  jgAdjust = 0;  biosphereAdjust = 0;  capitalAdjust = 0;  barrackAdjust = 0;  laserAdjust = 0;  missileAdjust = 0;  plasmabaseAdjust = 0;  ionAdjust = 0;  photonAdjust = 0;  disruptorAdjust = 0;  deflectionAdjust = 0;  pshieldAdjust = 0;  pringAdjust = 0;  tableArray = document.getElementsByTagName("table")  for(i=0; i<tableArray.length; i++){  if(tableArray[i].innerHTML.match(/<th colspan=.2.>Construction Queue<.th>/)){  for(a=1; a<tableArray[i].childNodes[0].childNodes.length; a++){  if(!tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/<select name=.add_stack.>/)){  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Urban Structures/))  urbanAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Solar Plants/))  solarAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Gas Plants/))  gasAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Fusion Plants/))  fusionAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Antimatter Plants/))  antimatterAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Research Labs/))  researchAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Metal Refineries/))  metalAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Crystal Mines/))  crystalAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Robotic Factories/))  roboticsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Shipyards/) && !tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  shipyardsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  osAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Spaceports/))  spaceportsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Command Centers/))  ccAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Nanite Factories/))  naniteAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Androids Factories/))  androidAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Economic Centers/))  economicAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Terraform/))  terraformAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Multi-Level Platforms/))  mlpAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Base/))  orbitalbaseAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Jump Gate/))  jgAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Biosphere Modification/))  biosphereAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Capital/))  capitalAdjust++;}  }  }  }	table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;	var i_lastcolumn = 5;	var forms = document.getElementsByTagName(\'form\');	if (!table.innerHTML.match(/The research of this base is linked to/)){	if (table && table.childNodes.length > 4) {		table.childNodes[0].style.display=\'none\';		table.childNodes[2].style.display=\'none\';		for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {			if(!table.childNodes[nrow].innerHTML.match(/Research Labs linked to this base research./)){			table.childNodes[nrow+1].style.display=\'none\';			}		}	}	techmultipliers=GM_getValue(server+"techData", "0").split(",")	var energytechmultiplier = (techmultipliers[0]*0.05)+1;	var averageroute = GM_getValue(server+"averageRoute", "31");	var fertility = 0;	var uspopcost = 0;	var obpopcost = 0;	var obcostparentnode = 0;	var popcost = 0;	var areacost = 0;	var energycost = 0;	var econcost = 0;	var prodcost = 0;	var constcost = 0;	var flag = 0;	var bestAreaSignifier = node({tag: \'span\', html: \' <br /> (Best Area)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEconSignifier = node({tag: \'span\', html: \' <br /> (Best Econ)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestProdSignifier = node({tag: \'span\', html: \' <br /> (Best Prod)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestConstSignifier = node({tag: \'span\', html: \' <br /> (Best Const)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestPopSignifier = node({tag: \'span\', html: \' <br /> (Best Pop)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEnergySignifier = node({tag: \'span\', html: \' <br /> (Best Energy)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {		if(!table.childNodes[nrow].innerHTML.match(/linked to this base research./)){		var cname = table.childNodes[nrow].childNodes[1].firstChild.firstChild.firstChild.firstChild.nodeValue + table.childNodes[nrow].childNodes[1].firstChild.firstChild.childNodes[1].nodeValue;		if (location.search.indexOf(\'view=structures\')!=-1) {			table.childNodes[nrow].title = cname;			var td1help_res = table.childNodes[nrow+1].innerHTML.match(/(fertility|metal resource|crystals resource).\\((.+?)\\)/)			if (td1help_res) {			if (flag == 0){				if(td1help_res[1]=="fertility"){				var td1help = "&nbsp;(Fert "+td1help_res[2]+")"				}else if(td1help_res[1]=="metal resource"){				var td1help = "&nbsp;(Metal "+td1help_res[2]+")"				}else if(td1help_res[1]=="crystals resource"){				var td1help = "&nbsp;(Crystal "+td1help_res[2]+")"				}				var d = table.childNodes[nrow].childNodes[1].innerHTML + td1help;				table.childNodes[nrow].childNodes[1].innerHTML = d				}			}				if (cname==\'Terraform\') {				makeAdjustments(nrow, terraformAdjust)				terracost = parseInt(itemcost) / 5;					if(areacost == 0 || areacost > terracost){					areacost = terracost					table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Multi-Level Platforms\') {				adjust = mlpAdjust				makeAdjustments(nrow, mlpAdjust)					var cost = parseInt(itemcost) / 10;					if (cost < areacost) {						areacost = cost;						bestAreaSignifier.parentNode.removeChild(bestAreaSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Urban Structures\') {				makeAdjustments(nrow, urbanAdjust)          USLevel = table.childNodes[nrow].childNodes[1].innerHTML.match(/\\(Level [0-9]{1,}/);          USLevel = parseInt(USLevel[0].replace(/\\(Level /, ""));					fertility = parseInt(td1help_res[2]);					uspopcost = parseInt(itemcost);					uspopcost = (uspopcost+areacost) / fertility;					if (popcost == 0 || popcost > uspopcost){					popcost = uspopcost;					table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);					}				}				if (cname==\'Orbital Base\') {				makeAdjustments(nrow, orbitalbaseAdjust)					obpopcost = parseInt(itemcost) / 10;					obcostparentnode = table.childNodes[nrow].childNodes[2];					if (obpopcost && obpopcost < popcost) {						popcost = obpopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);								}				}								if (cname==\'Solar Plants\' || cname==\'Gas Plants\' || cname==\'Fusion Plants\' || cname==\'Antimatter Plants\') {				if(cname==\'Solar Plants\'){				adjust = solarAdjust				}else if(cname==\'Gas Plants\'){				adjust = gasAdjust				}else if(cname==\'Fusion Plants\'){				adjust = fusionAdjust				}else if(cname==\'Antimatter Plants\'){				adjust = antimatterAdjust				}makeAdjustments(nrow, adjust)					var c = parseInt(itemcost);					var e = parseInt(table.childNodes[nrow].childNodes[3].firstChild.nodeValue.slice(1));					c = (c + popcost + areacost) / (energytechmultiplier*e);					if (e>2){					if (!energycost)						energycost = c;					if (c <= energycost) {						energycost = c;						if (bestEnergySignifier.parentNode)							bestEnergySignifier.parentNode.removeChild(bestEnergySignifier);							table.childNodes[nrow].childNodes[2].appendChild(bestEnergySignifier);					}					}				}				if (cname == "Biosphere Modification"){makeAdjustments(nrow, biosphereAdjust)          var biopopcost = parseInt(itemcost);					biopopcost = (biopopcost+(24*energycost)+areacost)/USLevel										if (biopopcost < popcost) {						popcost = biopopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);																	}				}				if (cname == "Metal Refineries"){				makeAdjustments(nrow, metalAdjust)				var metal = parseInt(td1help_res[2]);				var metalcost = parseInt(itemcost);				metalprodcost = (metalcost + energycost + areacost + popcost)/ metal				metalconstcost = (metalcost + energycost + areacost + popcost)/ metal				metaleconcost = (metalcost + energycost + areacost + popcost)          	if(econcost == 0 || econcost > metaleconcost){          	econcost = metaleconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost == 0 || prodcost > metalprodcost){          	prodcost = metalprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost == 0 || constcost > metalconstcost){          	constcost = metalconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Crystals Mines"){				makeAdjustments(nrow, crystalAdjust)				var crystals = parseInt(td1help_res[2]);				var crystalcost = parseInt(itemcost);				crystalcost = (crystalcost + energycost + areacost)/ crystals          	if(econcost > crystalcost){          	econcost = crystalcost;													table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}			}				if (cname == "Robotic Factories"){				makeAdjustments(nrow, roboticsAdjust)				var robscost = parseInt(itemcost);				robsprodcost = (robscost + energycost + areacost + popcost)/ 2				robsconstcost = (robscost + energycost + areacost + popcost)/ 2				robseconcost = (robscost + energycost + areacost + popcost)          	if(econcost > robseconcost){          	econcost = robseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > robsprodcost){          	prodcost = robsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > robsconstcost){          	constcost = robsconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Shipyards"){				makeAdjustments(nrow, shipyardsAdjust)				var shipscost = parseInt(itemcost);				shipsprodcost = (shipscost + energycost + areacost + popcost)/ 2        shipseconcost = (shipscost + energycost + areacost + popcost)          	if(econcost > shipseconcost){          	econcost = shipseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > shipsprodcost){          	prodcost = shipsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Orbital Shipyards"){				makeAdjustments(nrow, osAdjust)				var oscost = parseInt(itemcost);				osprodcost = (oscost + (energycost*12) + popcost)/8        oseconcost = (oscost + (energycost*12) + popcost)/2          	if(econcost > oseconcost){          	econcost = oseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > osprodcost){          	prodcost = osprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Spaceports"){				makeAdjustments(nrow, spaceportsAdjust)				var Spcost = parseInt(itemcost);				Spcost = (Spcost + energycost + areacost)/ 2          	if(econcost > Spcost){          	econcost = Spcost;							table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}				if (cname == "Nanite Factories"){				makeAdjustments(nrow, naniteAdjust)				var nanicost = parseInt(itemcost);				naniprodcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				naniconstcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				nanieconcost = (nanicost + (energycost*2) + areacost + popcost) /2          	if(econcost > nanieconcost){          	econcost = nanieconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > naniprodcost){          	prodcost = naniprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > naniconstcost){          	constcost = naniconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Androids Factories"){				makeAdjustments(nrow, androidAdjust)				var andrcost = parseInt(itemcost);				andrprodcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andrconstcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andreconcost = (andrcost + (energycost*4) + areacost + popcost) /2          	if(econcost > andreconcost){          	econcost = andreconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > andrprodcost){          	prodcost = andrprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > andrconstcost){          	constcost = andrconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}								if (cname == "Economic Centers"){				makeAdjustments(nrow, economicAdjust)				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*2) + areacost + popcost) /3          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}        if (cname == "Capital"){        makeAdjustments(nrow, capitalAdjust)				basesArray = GM_getValue(server+"Bases")				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*12) + areacost + popcost) / (10+basesArray.length)          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}				        if (cname == "Research Labs"){        makeAdjustments(nrow, researchAdjust)				}					        if (cname == "Command Centers"){        makeAdjustments(nrow, ccAdjust)				}		if (flag == 0){				    	getOptionValue(cname);		if (v==1) {		buttontext=document.createElement("a")		buttontext.href="javascript:document.getElementsByName(\'add_stack\')[0].selectedIndex="+a+"; document.getElementsByTagName(\'form\')[1].submit()"		buttontext.innerHTML = "Queue"			if (buttontext) {			if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){			colnum=3			}else{			colnum=5			}				table.childNodes[nrow].childNodes[colnum].style.whiteSpace=\'nowrap\';				table.childNodes[nrow].childNodes[colnum].appendChild(buttontext);			}	}	if (flag == 0 && nrow==table.childNodes.length-1){						flag =1;						nrow = 1;						}		}}}}}function buttonToSelect(option, text, fallback_text) {}function makeAdjustments(nrow, adjustvar){adjust = adjustvar				if(table.childNodes[nrow].childNodes[6].innerHTML.match(/<span id="time/)){				adjust++ 				}				if(adjust>0){				basecost = parseInt(table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, ""))				time = getSeconds(table.childNodes[nrow].childNodes[5].firstChild.nodeValue)/basecost				time = secsToHMS(time*(Math.round(basecost*Math.pow(1.5, adjust))))				table.childNodes[nrow].childNodes[5].innerHTML = table.childNodes[nrow].childNodes[5].innerHTML + "<br />("+time+") "        table.childNodes[nrow].childNodes[1].innerHTML = table.childNodes[nrow].childNodes[1].innerHTML + " (+"+adjust+")"        table.childNodes[nrow].childNodes[2].firstChild.nodeValue = table.childNodes[nrow].childNodes[2].firstChild.nodeValue + " ("+Math.round((basecost*Math.pow(1.5, adjust)))+")"        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        itemcost = itemcost.replace(/[0-9]+\\(/,"")        itemcost = itemcost.replace(/\\)/, "")        }else{        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        }        }function secsToHMS(seconds){        secVar0 = Math.round(seconds);                            // The initial data, in seconds        minVar = Math.floor(secVar0/60);  // The minutes           hourVar = Math.floor(minVar/60);  // The minutes        minVar = minVar % 60;        secVar = secVar0 % 60;              // The balance of seconds        if(hourVar != 0){        return hourVar+"h "+(minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else if(minVar != 0){        return (minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else{        return (secVar<10?\'0\'+secVar:secVar)+"s"        }                }function getOptionValue(obj){v=0x = document.getElementsByName("add_stack")if(x[0]){x = x[0]for (i=0;i<x.length;i++)    {    if(x.options[i].text == obj){    v=1;	a=i    i = x.length    }    }    }    }/*function insertTimeTextBoxes(){    var inputs = document.forms[1].elements;    for(var i = 0; i < inputs.length; i++)    {        if(inputs[i].className == \'quant\')        {            var row = inputs[i].parentNode.parentNode;            //console.log(row);            var cell = document.createElement("td");            cell.setAttribute("align","center");            cell.innerHTML = \'<input type="text" value="" maxlength="5" size="5" name="\'+inputs[i].name+\' - Time" id="\'+inputs[i].name+\' - Time" class="quant" onchange="update(\\\'\'+inputs[i].name+\'\\\')"/>\';            row.appendChild(cell);            cell.addEventListener(\'keyup\',getConvertTimeToQuantityClosure(row),true);			//cell.addEventListener(\'blur\',onProductionTextBoxChanged,true);        }    }        var tbody = inputs[0].parentNode.parentNode.parentNode;    //console.log(tbody.childNodes[0].firstChild);    //Adjust colspan for top row and third row    tbody.childNodes[0].firstChild.setAttribute("colspan",7);    tbody.childNodes[2].firstChild.setAttribute("colspan",7);    //console.log(tbody.childNodes[1].firstChild);    //Insert column title    var titleCell = document.createElement("th");    titleCell.setAttribute("width","10%");    titleCell.textContent = "Time (h)"    tbody.childNodes[1].appendChild(titleCell);		titleCell.previousSibling.setAttribute("width","10%");    //adjust colspan for all help rows    var helpCells = document.evaluate(    "//td[@class=\'help\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(helpCells.snapshotLength);    for(var i=0;i<helpCells.snapshotLength;i++)    {        helpCells.snapshotItem(i).setAttribute("colspan",6);    }    //adjust colspan for all red rows    var redCells = document.evaluate(    "//td[@class=\'red\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(redCells.snapshotLength);    for(var i=0;i<redCells.snapshotLength;i++)    {        redCells.snapshotItem(i).setAttribute("colspan",2);    }    //adjust colspan for last two rows    document.getElementById("fast").addEventListener("click", function(){var inputs = document.forms[1].elements; for(var i = 0; i < inputs.length; i++){if(inputs[i].className == \'quant\'){if(inputs[i].value == ""){}else{var row = inputs[i].parentNode.parentNode; convertTimeToQuantity(row); unsafeWindow.update(inputs[i].name);}}}}, false)    tbody.childNodes[tbody.childNodes.length-1].firstChild.setAttribute("colspan",7);}*/function getConvertTimeToQuantityClosure(row){    function func(){        convertTimeToQuantity(row);    }    ;    return func;}function convertTimeToQuantity(row){	//console.log(row);    var credits = row.childNodes[2].textContent;    var time = row.childNodes[4].textContent;    var qtyInput = row.childNodes[5].firstChild;    var enteredTime;    try{        enteredTime = parseFloat(row.childNodes[6].firstChild.value);    }    catch(Exception)    {        return;    }    if(isNaN(enteredTime)){    enteredTime = 0    }else{    //console.log("Credits: "+credits+" Time: "+time+" qtyInput: "+ qtyInput.value);    //console.log("entered time: "+isNaN(enteredTime));    var totalSeconds = getSeconds(time);    if(totalSeconds != -1)    {        //console.log("Time " +getTimeDisplay(totalSeconds));        var enteredTimeInSeconds = enteredTime*60*60;        //console.log(enteredTimeInSeconds+" / " +totalSeconds);        if(enteredTimeInSeconds < totalSeconds){			qtyInput.value = "";		}else{			if(document.getElementById("fast").checked == true){			qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)*2			}else{				qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)			}		}    }    onProductionTextBoxKeyUp();    }}function getSeconds(timeString){    var regex = /((\\d|,| |\\.)*h)?\\W?((\\d|,| |\\.)*m)?\\W?((\\d|,| |\\.)*s)?/;    var result = regex.exec(timeString);    if(result)    {        //console.log(result);        var h = 0;var m=0;var s=0;        if(result[1] != null)        h = result[1].substring(0,result[1].indexOf("h"));        if(result[3] != null)        m = result[3].substring(0,result[3].indexOf("m"));        if(result[5] != null)        s = result[5].substring(0,result[5].indexOf("s"));        return h*60*60 + m*60 + s*1;    }    else return -1;}function getTimeDisplay(seconds){    var h = Math.floor(seconds/3600);    var m = Math.floor((seconds % 3600)/60);    var s = Math.floor((seconds % 3600) % 60);    var string = s+"s";    if(m>0 || h>0)		string = m+"m "+string;    if(h>0)		string = h+"h "+string;    return string;}var PRESET_KEYS = new Array("Fighters","Bombers","Heavy Bombers","Ion Bombers","Corvette","Recycler","Destroyer","Frigate","Ion Frigate","Scout Ship", "Outpost Ship","Cruiser","Carrier","Heavy Cruiser","Battleship","Fleet Carrier","Dreadnought","Titan","Leviathan","Death Star","Goods");function onProductionTextBoxKeyUp(){    var shipName;    var count=0,cost=0;    var productionCost = 0;    var totalTime = 0;    for(var i = 0;i <PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.log("Failed to find textBox for "+shipName+".");            continue;        }				if(textBox.value != "")        {            var row = textBox.parentNode.parentNode;            var time = row.childNodes[4].textContent;            //console.log(textBox.value);            count = parseInt(textBox.value);            cost = parseInt(textBox.parentNode.previousSibling.previousSibling.previousSibling.innerHTML.replace(/(,| |\\.)/g, ""));            totalTime+= getSeconds(time) * count;            //console.log(count + " " + shipName + "s @ " + cost);            productionCost += (cost * count);			//textBox.parentNode.nextSibling.value = "";        }    }    //console.log("total Time: "+getTimeDisplay(totalTime));    var fastProduction = document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.checked;    //console.info(fastProduction);    if(fastProduction)	{		productionCost *= 2;		totalTime /= 2;	}    //console.log("Text changed. Total production cost: " +productionCost);    var submitButton = document.evaluate(	    "//input[@type=\'submit\']",	    document,	    null,	    XPathResult.FIRST_ORDERED_NODE_TYPE,	    null).singleNodeValue;    if(productionCost > 0)		submitButton.value = "Submit";    else		submitButton.value = "Submit";}function registerTextBoxEventListeners(){    for(var i = 0;i < PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.info("Failed to find textBox for "+shipName+".");            continue;        }        textBox.addEventListener(\'keyup\',onProductionTextBoxKeyUp,false);		//textBox.addEventListener(\'blur\',onProductionTextBoxChanged,true);    }    document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'change\',onProductionTextBoxKeyUp,false);    //document.evaluate("//input[@type=\'reset\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'click\',onProductionTextBoxKeyUp,true);    document.evaluate("//form[@method=\'post\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'reset\',onProductionTextBoxKeyUp,false);}function productionHelperOnClick(num, box) {	num=num.replace("+", "")	num=num.replace(" ","")	num=num.replace("k","000")		document.getElementById(box).value = parseInt(document.getElementById(box).value) + parseInt(num);     calculateTotals();}function prodHelperEvent(e) {  if (e.shiftKey && (e.name == \'fast\')) {    for (i=0; i<empireLinks.length; i++) {    document.getElementById("fast_"+empireLinks[i]).checked = e.checked;    }  } else if (e.shiftKey && (e.name == \'unit\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("unit_"+empireLinks[i]).selectedIndex = e.selectedIndex;    }  } else if (e.shiftKey && (e.name == \'quant\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("quant_"+empireLinks[i]).value = e.value;    }  }  if ((e.name == \'fast\')||(e.name == \'unit\')||(e.name == \'quant\'))    calculateTotals();}function calculateTotals() {	var pcost = 0;  for (i=0; i<empireLinks.length; i++) {    n = (document.getElementById("fast_"+empireLinks[i]).checked) ? 2 : 1;    pcost += parseInt(ProductionGetCost[document.getElementById("unit_"+empireLinks[i]).selectedIndex] * document.getElementById("quant_"+empireLinks[i]).value * n);	}	document.getElementById(\'cost_all\').innerHTML = pcost+\' credits\';	var credits_left = parseInt(numcredits) - pcost;	document.getElementById(\'cost_all\').style.color = (credits_left < 0) ? \'red\' : \'\';}function resetForm() {  for (i=0; i<empireLinks.length; i++) {    document.getElementById("unit_"+empireLinks[i]).selectedIndex = 0;    document.getElementById("fast_"+empireLinks[i]).checked = false;    document.getElementById("quant_"+empireLinks[i]).value = 0;    returnto = i    calculateTotals();    i=returnto;  }}function startSubmitQueue() {  submitQueue(0);}function submitQueue(i) {    if (document.getElementById("quant_"+empireLinks[i]).value != 0) {      var postData = document.getElementById("unit_"+empireLinks[i]).value+"="+document.getElementById("quant_"+empireLinks[i]).value+"&post_back=true";      if (document.getElementById("fast_"+empireLinks[i]).checked)        postData += "&fast=true";      document.getElementById("quant_"+empireLinks[i]).value = \'ok\';      document.getElementById("quant_"+empireLinks[i]).style.backgroundColor = \'red\';      GM_xmlhttpRequest({        method: "POST",        url: serverurl+"base.aspx?base="+empireLinks[i]+"&view=production",        data: encodeURI(postData),        headers:{\'Content-type\':\'application/x-www-form-urlencoded\'},     		onreadystatechange: function(xhr) {if (xhr.readyState == "4") {endSubmitQueue(i, "1");}}      });    } else {      endSubmitQueue(i, "0");    }}function endSubmitQueue(i, value) {time=1000+Math.floor(Math.random()*1001)  if (i == empireLinks.length-1)    window.setTimeout(function(){ location.reload(true)}, time);  else  if(value == 0){  submitQueue(i+1)  }else{    window.setTimeout(function(){ submitQueue(i+1)}, time);    }}function productionHelper() {  var btn_details = [];  btn_details.push([1,\'+1 \']);  btn_details.push([5,\'+5 \']);  btn_details.push([10,\'+10 \']);  btn_details.push([25,\'+25 \']);  btn_details.push([100,\'+100 \']);  btn_details.push([250,\'+250 \']);  btn_details.push([1000,\'+1k \']);  table.rows[1].childNodes[4].innerHTML = \'Fast Prod\';  table.rows[1].childNodes[5].innerHTML = \'Unit Type\';  table.rows[1].childNodes[6].innerHTML = \'Quantity\';  table.rows[1].childNodes[3].innerHTML = \'Current Queue\';  a=0;  table.firstChild.style.display=\'none\';  for (i=2; i<table.rows.length; i=i+2) {    var currentRow = table.rows[i];		var res = /\\?base=((\\d|,| |\\.)+)/.exec(table.rows[i].childNodes[0].firstChild.href);	  table.rows[i+1].style.display = \'none\';	  empireLinks[a] = res[1];	  a++;	  currentRow.childNodes[3].innerHTML = currentRow.childNodes[5].innerHTML + "<br />" + table.rows[i+1].childNodes[3].innerHTML    currentRow.childNodes[4].innerHTML = "<input type=\'checkbox\' name=\'fast\' class=\'check\' id=\'fast_"+res[1]+"\' onfocus=\\"selectedBox=\'fast_"+res[1]+"\'\\" />";    currentRow.childNodes[6].innerHTML = "<input type=\'text\' name=\'quant\' class=\'quant\' id=\'quant_"+res[1]+"\' size=\'5\' maxlength=\'5\' value=\'0\' onfocus=\\"selectedBox=\'quant_"+res[1]+"\'\\" />";    var html = "<select name=\'unit\' id=\'unit_"+res[1]+"\' onfocus=\\"selectedBox=\'unit_"+res[1]+"\'\\"><option value=\'Fighters\'>Fighters</option><option value=\'Bombers\'>Bombers</option>";    html += "<option value=\'Heavy Bombers\'>Heavy Bombers</option><option value=\'Ion Bombers\'>Ion Bombers</option><option value=\'Corvette\'>Corvette</option>";    html += "<option value=\'Recycler\'>Recycler</option><option value=\'Destroyer\'>Destroyer</option><option value=\'Frigate\'>Frigate</option>"    html += "<option value=\'Ion Frigate\'>Ion Frigate</option><option value=\'Scout Ship\'>Scout Ship</option><option value=\'Outpost Ship\'>Outpost Ship</option>";    html += "<option value=\'Cruiser\'>Cruiser</option><option value=\'Carrier\'>Carrier</option><option value=\'Heavy Cruiser\'>Heavy Cruiser</option>";    html += "<option value=\'Battleship\'>Battleship</option><option value=\'Fleet Carrier\'>Fleet Carrier</option><option value=\'Dreadnought\'>Dreadnought</option>";    html += "<option value=\'Titan\'>Titan</option><option value=\'Leviathan\'>Leviathan</option><option value=\'Death Star\'>Death Star</option></select>";    currentRow.childNodes[5].innerHTML = html;    document.getElementById("unit_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("quant_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("fast_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    for(c=0; c<7; c++) {      var num = btn_details[c][0];      l = document.createElement("a");		l.href = "javascript:void(1);";		l.id= i + btn_details[c][1];		l.innerHTML = btn_details[c][1];            l.name = "quant_"+res[1];      currentRow.childNodes[6].appendChild(l);      document.getElementById(i + btn_details[c][1]).addEventListener(\'click\', function(){ productionHelperOnClick(this.innerHTML, this.name );}, true);    }  }  l = document.createElement("tr");  l.id="extrarow1";  table.appendChild(l);  l = document.createElement("td");		l.innerHTML = "0 credits";      l.className = \'help\';      l.align = "right";      l.id="cost_all"      document.getElementById("extrarow1").appendChild(l);      document.getElementById("cost_all").colSpan="7";      l = document.createElement("tr");      l.id="extrarow2";      table.appendChild(l);      l = document.createElement("td");      l.className = \'help\';      l.align = "right";          l.id="prodHelperButtons"      document.getElementById("extrarow2").appendChild(l);      document.getElementById("prodHelperButtons").colSpan="7";      l = document.createElement("input");      l.type = "reset";      l.id = "resetButton";      l.value = "Reset";      document.getElementById("prodHelperButtons").appendChild(l);      l = document.createElement("input");      l.type = "submit";      l.id = "submitButton";      l.value = "submit";      document.getElementById("prodHelperButtons").appendChild(l);   document.getElementById("submitButton").addEventListener(\'click\', function(){ startSubmitQueue();}, true);  document.getElementById("resetButton").addEventListener(\'click\', function(){ resetForm();}, true);}function productionHelperButton() {		table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;		var prodTitle = table.childNodes[1].childNodes[5];		scoutButton = document.createElement("a");		scoutButton.href = "javascript:void(1);";		scoutButton.id= "prodHelperButton";		scoutButton.innerHTML=" [&#177;]";		scoutButton.title = "Production Helper"		prodTitle.appendChild(scoutButton)		document.getElementById(\'prodHelperButton\').addEventListener(\'click\', function() {productionHelper();}, true);	}function saveTechData(){    //console.log("Saving tech data");    var techData = new Array();    var rows = document.evaluate(    "//tr[@align=\'center\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log("Tech rows: "+ rows.snapshotLength);    for (var i = 0; i < rows.snapshotLength; i++)    {        var techNameCell = document.evaluate(        "th[1]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        var techValueCell = document.evaluate(        "td[4]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        if(techNameCell.snapshotLength > 0)        {            var techValue = parseInt(techValueCell.snapshotItem(0).innerHTML.replace(/(,| |\\.)/g, ""));            var techName = techNameCell.snapshotItem(0).innerHTML;            //console.log(techName +": "+techValue);            techData[i] = techValue;        }    }    GM_setValue(server+"techData",techData.join());}/* function scannerGrab(){tableArray = document.getElementsByTagName("table")for(i=0; i<tableArray.length; i++){if(tableArray[i].innerHTML.match(/<th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=fleet">Fleet<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=player">Player<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=destination">Destination<\\/a><\\/th><th width="20%"><a href="empire.aspx\\?view=scanners&amp;order=arrival">Arrival<\\/a><\\/th><th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=size">Size<\\/a><\\/th>/)){table = tableArray[i]fleetId = []fleetName = []fleetOwner = []ownerId = []fleetDest = []fleetArrive = []fleetSize = []for(a=1; a<table.rows.length; a++){fleetId[a-1] = table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=/, "") fleetId[a-1] = fleetId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetName[a-1]=table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetName[a-1]=fleetName[a-1].replace(/<\\/a>/, "");fleetOwner[a-1]=table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=[0-9]{1,}">/, "")fleetOwner[a-1]=fleetOwner[a-1].replace(/<\\/a>/, "");ownerId[a-1] =table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=/, "")ownerId[a-1] = ownerId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetDest[a-1]=table.rows[a].childNodes[2].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)fleetArrive[a-1]=parseInt(table.rows[a].childNodes[3].title)+Math.round(new Date().getTime()/1000.0)fleetSize[a-1]=table.rows[a].childNodes[4].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetSize[a-1]=fleetSize[a-1].replace(/<\\/a>(.*?)/, "");fleetSize[a-1]=fleetSize[a-1].replace(/(,| |.)/, "");}sendData = "&fleetId="+fleetId+"&fleetName="+fleetName+"&fleetOwner="+fleetOwner+"&ownerId="+ownerId+"&fleetDest="+fleetDest+"&fleetArrive="+fleetArrive+"&fleetSize="+fleetSize+"&seenBy="+document.getElementById(\'account\').parentNode.childNodes[1].innerHTML.replace(/[A-Za-z]./, \'\')if(GIAServers.inArray(server)){sendtoserver(sendData, "scanners.php")}}}}*/// If NS -- that is, !IE -- then set up for mouse capturedocument.captureEvents(Event.MOUSEMOVE)// Set-up to use getMouseXY function onMouseMovedocument.addEventListener("mousemove", function(e) {getMouseXY(e)}, true);// Temporary variables to hold mouse x-y pos.svar tempX = 0var tempY = 0// Main function to retrieve mouse x-y pos.sfunction getMouseXY(e) {// grab the x-y pos.s if browser is NS    tempX = e.pageX    tempY = e.pageY  // catch possible negative values in NS4  if (tempX < 0){tempX = 0}  if (tempY < 0){tempY = 0}  // show the position values in the form named Show  // in the text fields named MouseX and MouseY  return true}function linkEventListeners(){if(GIAServers.inArray(server)){linkArray=document.getElementsByTagName("a")for(i=0; i<linkArray.length; i++){if(linkArray[i].href.match(/map.aspx\\?(.*?)loc=E[0-9]{2}:[0-9]{2}:[0-9]{2}/)){linkArray[i].addEventListener("mouseover", function(e) {showBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""), tempX, tempY)}, true);linkArray[i].addEventListener("mouseout", function() {hideBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""))}, true);}}}}function linkChange(){	linkArray=document.getElementsByTagName(\'a\')	for(i=0; i < linkArray.length; i++){		linkArray[i].target = "_blank"	}}  ////////////////////////////////////////// /// Execution //////////////////////////////////////////////////////////////////////if(document.location.href.match(/astroempires.com/)){replaceTime();if(document.location.href.match(/loc=[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){	if(document.body.innerHTML.match(/<th colspan=.4.>Base<\\/th>/)){	if(GIAServers.inArray(server)){	centerArray=document.getElementsByTagName(\'center\')	for(i=0; i<centerArray.length; i++){	if(centerArray[i].innerHTML.match(/Astro Type:/)){	baseLink = document.body.innerHTML.match(/base.aspx\\?base=[0-9]{1,}/)[0]	sourceDiv = document.createElement("div")	sourceDiv.id="baseDiv";	sourceDiv.innerHTML="Visit the <a href=\\""+baseLink+"\\">base page</a> to add this base to GIA.<br /><br />";	centerArray[i].appendChild(sourceDiv)	}	}	}	}}else if(document.location.href.match(/[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}/)){	debrisShow()}else if(document.location.href.match(/http:\\/\\/(.+?)\\.astroempires\\.com\\/base\\.aspx\\?base=[0-9]{1,}$/)){	if(window.parent.document.location.href != document.location.href){	baseDetails();	}}else if(document.location.href.match(/empire.aspx$/) || document.location.href.match(/empire.aspx\\?view=bases_events$/)){	productionHelperButton();}else if(document.location.href.match(/view=scanners/)){	scannerFormat();}else if(window.location.href.match(/empire.aspx\\?view=fleets/)){        sumShips();}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=structures/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=defenses/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){	if(!document.location.href.match(/&info=/)){enhanceConstructionPage();}}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=production/)){insertTimeTextBoxes()}if(window.location.href.indexOf(\'view=move\')==-1 && window.location.href.indexOf(\'view=fleets\')==-1 &&		window.location.href.indexOf(\'view=production\')==-1 && window.location.href.indexOf(\'view=structures\')==-1 &&		window.location.href.indexOf(\'view=trade\')==-1 && window.location.href.indexOf(\'view=research\')==-1){		formatVariousNumbers();	}	}',
                                                           'max_memory_size' => 262144,
                                                           'auto_upgrade' => 1
                                                         }, 'Mojo::Asset::Memory' ),
                                       'pre_buffer' => '',
                                       'headers' => bless( {
                                                             'normalcase' => {
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR'
                                                                             },
                                                             'headers' => {
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'content-length' => [
                                                                                                  '63681'
                                                                                                ],
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ],
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ]
                                                                          }
                                                           }, 'Mojo::Headers' ),
                                       'real_size' => 63681,
                                       'size' => 63681,
                                       'auto_upgrade' => 1,
                                       'raw_size' => 63681,
                                       'body' => 2,
                                       'state' => 'finished',
                                       'read' => $VAR1->{'content'}{'events'}{'read'}[0]
                                     }, 'Mojo::Content::Single' )
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:55:46 2014] [error] Can't locate object method "content" via package "Mojo::Asset::Memory" at /home/nate/src/git/AstroEmpires/ae_web/script/../lib/AeWeb/Controller/Main.pm line 24.

[Wed Oct 22 13:55:46 2014] [debug] Template "exception.development.html.ep" not found.
[Wed Oct 22 13:55:46 2014] [debug] Template "exception.html.ep" not found.
[Wed Oct 22 13:55:46 2014] [debug] Rendering cached inline template "3e3201ab0667c1fc7f39089209f0435c".
[Wed Oct 22 13:55:46 2014] [debug] Rendering cached inline template "b2d451b47e2053ce583cbfdf7bcc6006".
[Wed Oct 22 13:55:46 2014] [debug] 500 Internal Server Error (0.045986s, 21.746/s).
[Wed Oct 22 13:55:51 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:55:51 2014] [debug] POST "/ae/gia".
[Wed Oct 22 13:55:51 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 13:55:51 2014] [debug] $VAR1 = bless( {
                 'buffer' => '',
                 'events' => {},
                 'version' => '1.0',
                 'env' => {
                            'psgi.nonblocking' => '',
                            'psgi.errors' => *::STDERR,
                            'psgi.multiprocess' => '',
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'HTTP_CONNECTION' => 'close',
                            'QUERY_STRING' => '',
                            'psgix.input.buffered' => 1,
                            'HTTP_ACCEPT' => '*/*',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'CONTENT_LENGTH' => '63681',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'HTTP_HOST' => 'localhost',
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'SERVER_NAME' => 0,
                            'REQUEST_METHOD' => 'POST',
                            'PATH_INFO' => '/ae/gia',
                            'psgi.multithread' => '',
                            'REMOTE_ADDR' => '127.0.0.1',
                            'psgix.harakiri' => 1,
                            'psgi.input' => bless( \*{'Stream::Buffered::PerlIO::$io'}, 'FileHandle' ),
                            'REMOTE_PORT' => 54489,
                            'psgi.url_scheme' => 'http',
                            'REQUEST_URI' => '/ae/gia',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'SERVER_PORT' => 5000,
                            'psgi.run_once' => '',
                            'psgix.io' => bless( \*Symbol::GEN3, 'IO::Socket::INET' ),
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'SCRIPT_NAME' => '',
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'psgi.streaming' => 1
                          },
                 'max_message_size' => 10485760,
                 'method' => 'POST',
                 'url' => bless( {
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia'
                                                    }, 'Mojo::Path' ),
                                   'base' => bless( {
                                                      'host' => 'localhost',
                                                      'path' => bless( {
                                                                         'leading_slash' => '',
                                                                         'parts' => [],
                                                                         'trailing_slash' => '',
                                                                         'charset' => 'UTF-8'
                                                                       }, 'Mojo::Path' ),
                                                      'port' => '',
                                                      'scheme' => 'HTTP'
                                                    }, 'Mojo::URL' )
                                 }, 'Mojo::URL' ),
                 'content' => bless( {
                                       'read' => sub { "DUMMY" },
                                       'state' => 'finished',
                                       'body' => 2,
                                       'raw_size' => 63681,
                                       'real_size' => 63681,
                                       'size' => 63681,
                                       'auto_upgrade' => 1,
                                       'headers' => bless( {
                                                             'headers' => {
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'content-length' => [
                                                                                                  '63681'
                                                                                                ],
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ]
                                                                          },
                                                             'normalcase' => {
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT'
                                                                             }
                                                           }, 'Mojo::Headers' ),
                                       'asset' => bless( {
                                                           'content' => '// ==UserScript==// @name           GIA Script (Modified)// @author          Luke Bonaccorsi AKA SpeedySurfer// @namespace       http://gears.speedysurfer.co.uk// @description     Scouts for bases in the current region// @license         Creative Commons Attribution License// @include        http://*.astroempires.com/*// @exclude        http://*.astroempires.com/login.aspx// @exclude        http://*.astroempires.com/home.aspx// ==/UserScript==/* * This file is a Greasemonkey user script. To install it, you need  * the Firefox plugin "Greasemonkey" (URL: http://greasemonkey.mozdev.org/) * After you installed the extension, restart Firefox and revisit  * this script. Now you will see a new menu item "Install User Script" * in your tools menu. *  * To uninstall this script, go to your "Tools" menu and select  * "Manage User Scripts", then select this script from the list * and click uninstall :-) * * Creative Commons Attribution License (--> or Public Domain) * http://creativecommons.org/licenses/by/2.5/*/  ////////////////////////////////////////// /// Variables //////////////////////////////////////////////////////////////////////if (document.location.href.match(/(.+?)astroempires.com/)){var server=document.location.href.match(/\\/(.+?).astroempires.com/)[1]server = server.replace(/\\//, "")var serverurl= "http://"+server+".astroempires.com/"}if(document.location.href.match(/astroempires.com/)){var empireLinks = []; var ProductionGetCost = [5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000]; var numcredits = document.evaluate(    "/html/body/table/tbody/tr/th/table/tbody/tr[2]/th[2]",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    numcredits = numcredits.snapshotItem(0).innerHTML;var FT_INDEX = 0;var BO_INDEX = 1;var HB_INDEX = 2;var IB_INDEX = 3;var CV_INDEX = 4;var RC_INDEX = 5;var DE_INDEX = 6;var FR_INDEX = 7;var IF_INDEX = 8;var SS_INDEX = 9;var OS_INDEX = 10;var CR_INDEX = 11;var CA_INDEX = 12;var HC_INDEX = 13;var BC_INDEX = 14;var FC_INDEX = 15;var DN_INDEX = 16;var TI_INDEX = 17;var LE_INDEX = 18;var DS_INDEX = 19;var BARRACKS_INDEX = 20;var LASER_TURRETS_INDEX = 21;var MISSLE_TURRETS_INDEX = 22;var PLASMA_TURRENTS_INDEX = 23;var ION_TURRETS_INDEX = 24;var PHOTON_TURRETS_INDEX = 25;var DISRUPTOR_TURRETS_INDEX = 26;var DEFLECTION_SHIELDS_INDEX = 27;var PLANETARY_SHIELD_INDEX = 28;var PLANETARY_RING_INDEX = 29;var fightingShips = "11111011100101101111";var shipValues = new Array(5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000);var shipHangarValues = new Array(0,0,0,0,0,0,0,4,4,0,0,4,60,8,40,400,200,1000,4000,10000);var GIAServers = new Array("bravo");}  ////////////////////////////////////////// /// Misc /////////////////////////////////////////////////////////////////////////Array.prototype.inArray = function (value)// Returns true if the passed value is found in the// array. Returns false if it is not.{var i;for (i=0; i < this.length; i++) {// Matches identical (===), not just similar (==).if (this[i] === value) {return true;}}return false;};function replaceTime(){	  for(n=1;n<=500;n++)	  {		elem=document.getElementById(\'time\'+n);	    if (!elem)	    {	       break;	    }	    elem.id = \'blah\'+n;	    s=elem.title;	    var newElement, endTime;	    var d = new Date();	    var now = new Date();	    if (elem)	    {	       if(s<=0)	       {		 endTime="-"	       }	       else	       {		 d.setTime(d.getTime()+(s*1000));		 tempdate = new Date();		 tempdate.setDate(tempdate.getDate()+1)		 if(now.toLocaleDateString() == d.toLocaleDateString() )		 {		    endTime="Today @ "+d.formatDate(\'H:i:s\');		 }		 else if(tempdate.toLocaleDateString() == d.toLocaleDateString())		 {		    endTime="Tomorrow @ "+d.formatDate(\'H:i:s\');		 }		 else		 {		    endTime=d.formatDate(\'D jS M @ H:i:s\');		 }	       }	       elem.innerHTML = "<b><span id=\'time"+n+"\' title=\'"+ s +"\'>-</span></b><br><nobr><span id=\'done"+n+"\' style=\'font-size: xx-small; color: "+getAgeCol(s)+"\'>" + endTime + "</span></nobr>"	    }	  }};  // formatDate :// a PHP date like function, for formatting date strings// authored by Svend Tofte <www.svendtofte.com>// the code is in the public domain//// see http://www.svendtofte.com/javascript/javascript-date-string-formatting/// and http://www.php.net/date//// thanks to//  - Daniel Berlin <mail@daniel-berlin.de>,//    major overhaul and improvements//  - Matt Bannon,//    correcting some stupid bugs in my days-in-the-months list!//  - levon ghazaryan. pointing out an error in z switch.//  - Andy Pemberton. pointing out error in c switch//// input : format string// time : epoch time (seconds, and optional)//// if time is not passed, formatting is based on// the current "this" date object\'s set time.//// supported switches are// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L),// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z//// unsupported (as compared to date in PHP 5.1.3)// T, e, oDate.prototype.formatDate = function (input,time) {    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday",                       "Thursday", "Friday", "Saturday"];    var daysShort =   ["Sun", "Mon", "Tue", "Wed",                       "Thu", "Fri", "Sat"];    var monthsShort = ["Jan", "Feb", "Mar", "Apr",                       "May", "Jun", "Jul", "Aug", "Sep",                       "Oct", "Nov", "Dec"];    var monthsLong =  ["January", "February", "March", "April",                       "May", "June", "July", "August", "September",                       "October", "November", "December"];    var switches = { // switches object        a : function () {            // Lowercase Ante meridiem and Post meridiem            return date.getHours() > 11? "pm" : "am";        },        A : function () {            // Uppercase Ante meridiem and Post meridiem            return (this.a().toUpperCase ());        },        B : function (){            // Swatch internet time. code simply grabbed from ppk,            // since I was feeling lazy:            // http://www.xs4all.nl/~ppk/js/beat.html            var off = (date.getTimezoneOffset() + 60)*60;            var theSeconds = (date.getHours() * 3600) +                             (date.getMinutes() * 60) +                              date.getSeconds() + off;            var beat = Math.floor(theSeconds/86.4);            if (beat > 1000) beat -= 1000;            if (beat < 0) beat += 1000;            if ((String(beat)).length == 1) beat = "00"+beat;            if ((String(beat)).length == 2) beat = "0"+beat;            return beat;        },        c : function () {            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" +                    this.H() + ":" + this.i() + ":" + this.s() + this.P());        },        d : function () {            // Day of the month, 2 digits with leading zeros            var j = String(this.j());            return (j.length == 1 ? "0"+j : j);        },        D : function () {            // A textual representation of a day, three letters            return daysShort[date.getDay()];        },        F : function () {            // A full textual representation of a month            return monthsLong[date.getMonth()];        },        g : function () {           // 12-hour format of an hour without leading zeros, 1 through 12!           if (date.getHours() == 0) {               return 12;           } else {               return date.getHours()>12 ? date.getHours()-12 : date.getHours();           }       },        G : function () {            // 24-hour format of an hour without leading zeros            return date.getHours();        },        h : function () {            // 12-hour format of an hour with leading zeros            var g = String(this.g());            return (g.length == 1 ? "0"+g : g);        },        H : function () {            // 24-hour format of an hour with leading zeros            var G = String(this.G());            return (G.length == 1 ? "0"+G : G);        },        i : function () {            // Minutes with leading zeros            var min = String (date.getMinutes ());            return (min.length == 1 ? "0" + min : min);        },        I : function () {            // Whether or not the date is in daylight saving time (DST)            // note that this has no bearing in actual DST mechanics,            // and is just a pure guess. buyer beware.            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");            return (noDST.getTimezoneOffset () ==                    date.getTimezoneOffset () ? 0 : 1);        },        j : function () {            // Day of the month without leading zeros            return date.getDate();        },        l : function () {            // A full textual representation of the day of the week            return daysLong[date.getDay()];        },        L : function () {            // leap year or not. 1 if leap year, 0 if not.            // the logic should match iso\'s 8601 standard.            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html            var Y = this.Y();            if (                (Y % 4 == 0 && Y % 100 != 0) ||                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)                ) {                return 1;            } else {                return 0;            }        },        m : function () {            // Numeric representation of a month, with leading zeros            var n = String(this.n());            return (n.length == 1 ? "0"+n : n);        },        M : function () {            // A short textual representation of a month, three letters            return monthsShort[date.getMonth()];        },        n : function () {            // Numeric representation of a month, without leading zeros            return date.getMonth()+1;        },        N : function () {            // ISO-8601 numeric representation of the day of the week            var w = this.w();            return (w == 0 ? 7 : w);        },        O : function () {            // Difference to Greenwich time (GMT) in hours            var os = Math.abs(date.getTimezoneOffset());            var h = String(Math.floor(os/60));            var m = String(os%60);            h.length == 1? h = "0"+h:1;            m.length == 1? m = "0"+m:1;            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;        },        P : function () {            // Difference to GMT, with colon between hours and minutes            var O = this.O();            return (O.substr(0, 3) + ":" + O.substr(3, 2));        },        r : function () {            // RFC 822 formatted date            var r; // result            //  Thu         ,     21               Dec              2000            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +            //    16          :    01          :    07               0200            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();            return r;        },        s : function () {            // Seconds, with leading zeros            var sec = String (date.getSeconds ());            return (sec.length == 1 ? "0" + sec : sec);        },        S : function () {            // English ordinal suffix for the day of the month, 2 characters            switch (date.getDate ()) {                case  1: return ("st");                case  2: return ("nd");                case  3: return ("rd");                case 21: return ("st");                case 22: return ("nd");                case 23: return ("rd");                case 31: return ("st");                default: return ("th");            }        },        t : function () {            // thanks to Matt Bannon for some much needed code-fixes here!            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];            if (this.L()==1 && this.n()==2) return 29; // ~leap day            return daysinmonths[this.n()];        },        U : function () {            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)            return Math.round(date.getTime()/1000);        },        w : function () {            // Numeric representation of the day of the week            return date.getDay();        },        W : function () {            // Weeknumber, as per ISO specification:            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            var DoW = this.N ();            var DoY = this.z ();            // If the day is 3 days before New Year\'s Eve and is Thursday or earlier,            // it\'s week 1 of next year.            var daysToNY = 364 + this.L () - DoY;            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {                return 1;            }            // If the day is within 3 days after New Year\'s Eve and is Friday or later,            // it belongs to the old year.            if (DoY <= 2 && DoW >= 5) {                return new Date (this.Y () - 1, 11, 31).formatDate ("W");            }            var nyDoW = new Date (this.Y (), 0, 1).getDay ();            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier                return (1 + Math.floor ((DoY + nyDoW) / 7));            } else {  // First day of the year is a Friday or later                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));            }        },        y : function () {            // A two-digit representation of a year            var y = String(this.Y());            return y.substring(y.length-2,y.length);        },        Y : function () {            // A full numeric representation of a year, 4 digits            // we first check, if getFullYear is supported. if it            // is, we just use that. ppks code is nice, but wont            // work with dates outside 1900-2038, or something like that            if (date.getFullYear) {                var newDate = new Date("January 1 2001 00:00:00 +0000");                var x = newDate .getFullYear();                if (x == 2001) {                    // i trust the method now                    return date.getFullYear();                }            }            // else, do this:            // codes thanks to ppk:            // http://www.xs4all.nl/~ppk/js/introdate.html            var x = date.getYear();            var y = x % 100;            y += (y < 38) ? 2000 : 1900;            return y;        },        z : function () {            // The day of the year, zero indexed! 0 through 366            var s = "January 1 " + this.Y() + " 00:00:00 GMT" + this.O();            var t = new Date(s);            var diff = date.getTime() - t.getTime();            return Math.floor(diff/1000/60/60/24);        },        Z : function () {            // Timezone offset in seconds            return (date.getTimezoneOffset () * -60);        }    }    function getSwitch(str) {        if (switches[str] != undefined) {            return switches[str]();        } else {            return str;        }    }    var date;    if (time) {        var date = new Date (time);    } else {        var date = this;    }    var formatString = input.split("");    var i = 0;    while (i < formatString.length) {        if (formatString[i] == "%") {            // this is our way of allowing users to escape stuff            formatString.splice(i,1);        } else {            formatString[i] = getSwitch(formatString[i]);        }        i++;    }    return formatString.join("");}// Some (not all) predefined format strings from PHP 5.1.1, which// offer standard date representations.// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants//// Atom      "2005-08-15T15:52:01+00:00"Date.DATE_ATOM    = "Y-m-d%TH:i:sP";// ISO-8601  "2005-08-15T15:52:01+0000"Date.DATE_ISO8601 = "Y-m-d%TH:i:sO";// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"Date.DATE_RFC2822 = "D, d M Y H:i:s O";// W3C       "2005-08-15 15:52:01+00:00"Date.DATE_W3C     = "Y-m-d%TH:i:sP";function getAgeCol(age) {		var col = \'#461B7E\'; // 72 hours +		if (age <= 3600)			col = \'#FFFFFF\'; // 1 hour		else if (age <=10800)			col = \'#FFFFFF\'; // 3 hours		else if (age <=21600)			col = \'#9E7BFF\'; // 6 hours		else if (age <=43200)			col = \'#9172EC\'; // 12 hours		else if (age <=86400)			col = \'#8467D7\'; // 24 hours		else if (age <=172800)			col = \'#7A5DC7\'; // 48 hours		else if (age <=259200)			col = \'#461B7E\'; // 72 hours		return col;}function debrisShow(){	spanArray = document.getElementsByTagName("span")	for(i=0; i<spanArray.length; i++){		if(spanArray[i].getAttribute("class") == "gray"){		spanArray[i].innerHTML = spanArray[i].title		}	}}function formatVariousNumbers(){	var debrisElement = document.evaluate(    "//center[contains(text(),\'Debris\')]",    document,    null,    XPathResult.FIRST_ORDERED_NODE_TYPE,    null).singleNodeValue;    if(debrisElement !=null)    {        var debrisMessage = debrisElement.textContent;        console.log(debrisMessage);        var indexOfText = debrisMessage.indexOf(" credits");        var valueText = debrisMessage.substring(0,indexOfText);        var value = commaFormat(parseInt(valueText));        //console.log(valueText+" new value:" +value.toString());        //console.log(debrisElement.textContent + " -< " + debrisElement.textContent.replace(valueText,value.toString()));        debrisElement.textContent = debrisElement.textContent.replace(valueText,value.toString());    }}function scannerFormat(){	baseArray=document.getElementsByTagName("a")	bases = GM_getValue(server+"Bases")	for(i=0; i<baseArray.length; i++){		if(baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){			basecoord=baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)			if(bases.match(basecoord)){			baseArray[i].setAttribute("style", "color: red; font-weight: normal;")			}		}	}}var galaxyInfoArrays = new Array();function getGalaxyInfoArray(galaxy){	if(galaxyInfoArrays[galaxy]==undefined)	{		var newArray = new Array(20);		for(var i = 0; i < 20;i++)		{			newArray[i] = 0;		}		galaxyInfoArrays[galaxy] = new Array(galaxy,0,newArray,0,0);//[galaxy number],[mobile fleet count],[mobilefleetarray],[total fighting fleet],[total fleet],	}	return galaxyInfoArrays[galaxy];}function isBase(base){	bases = GM_getValue(server+"Bases")    if(bases==null)    return false;    if(bases.match(base)){        return true;    }else{    return false;	}}function insertTotalsRow(node,sums,mobileSums,fleetCount,mobileFleetCount,overallFleetTotal,overallFightingFleetTotal,overallMobileFleetTotal,overallMobileFightingFleetTotal){    	//GALAXY ROWS	for(var i = 0;i<galaxyInfoArrays.length;i++)	{		var galaxyInfoArray = galaxyInfoArrays[i];		if(galaxyInfoArray==undefined || galaxyInfoArray[1] == 0)			continue;				var sumRow = document.createElement("tr");	    sumRow.setAttribute(\'align\',\'center\');	    	    var element = sumRow.insertCell(0);	    element.textContent = "Mobile Fleets ("+i+")";	    element = sumRow.insertCell(1);	    element.textContent = galaxyInfoArray[1];	    		var galaxyFleetSums = galaxyInfoArray[2];		for(var k = 0; k < 20; k++)	    {	        //console.log(sums[k]);	        var cell = document.createElement("td");	        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	        if(galaxyFleetSums[k] > 0)				cell.innerHTML = "<small>"+galaxyFleetSums[k]+"</small>";	        //console.log(element);	        sumRow.insertBefore(cell,null);	    }	    //Add totals cell	    var cell = document.createElement("td");	    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	    cell.innerHTML =galaxyInfoArray[3] +" / "+ galaxyInfoArray[4];	    //console.log(element);	    sumRow.insertBefore(cell,null);	    node.insertBefore(sumRow,null);	}	//MOBILE ROW	var sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    var element = sumRow.insertCell(0);    element.textContent = "Total Mobile Fleets";    element = sumRow.insertCell(1);    element.textContent = mobileFleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(mobileSums[k] > 0)			cell.innerHTML = "<small>"+mobileSums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallMobileFightingFleetTotal +" / "+ overallMobileFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);    //TOTAL ROW    sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    element = sumRow.insertCell(0);    element.textContent = "Total Fleets";    element = sumRow.insertCell(1);    element.textContent = fleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(sums[k] > 0)			cell.innerHTML = "<small>"+sums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallFightingFleetTotal +" / "+ overallFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);}function node(opt) {  function attr(name) {    var value = opt[name];    delete opt[name];    return value;  }  var expandos = { id: 1, className: 1, title: 1, type: 1, checked: 1 };  var id = opt.id;  var n = document.getElementById(id);  if (!n) {    var tag = attr("tag") || "div";    if ("string" == typeof tag)      n = document.createElement(tag);    else {      var t = document.createElement("div");      t.innerHTML = tag.toXMLString();      var ids = {};      for each (var n in $x(\'.//*[@id]\', t))        ids[n.id] = 1;      if (!n) ids = null;      var r = document.createRange();      r.selectNodeContents(t);      n = r.extractContents();      if (n.childNodes.length == 1)        n = n.firstChild;    }    var after = attr("after");    var before = opt.prepend ? opt.prepend.firstChild : attr("before");    var parent = attr("prepend") || attr("append") ||                   (before || after || {}).parentNode;    if (parent) {      if (before)        parent.insertBefore(n, before);      else if (after)        parent.insertBefore(n, after.nextSibling);      else        parent.appendChild(n);    }    if (id) n.id = id;  }  var html = attr("html");  if ("undefined" != typeof html) n.innerHTML = html;  var text = attr("text");  if ("undefined" != typeof text) n.textContent = text;  var style = attr("style");  if (style)    for (var prop in style)      n.style[prop] = style[prop];  for (prop in opt)    if (expandos[prop])      n[prop] = opt[prop];    else      n.setAttribute(prop, opt[prop]+"");  if (ids)    for (var id in ids)      ids[id] = document.getElementById(id);  return ids || n;}function enhanceConstructionPage() {  urbanAdjust = 0;  solarAdjust = 0;  gasAdjust = 0;  fusionAdjust = 0;  antimatterAdjust = 0;  researchAdjust = 0;  metalAdjust = 0;  crystalAdjust = 0;  roboticsAdjust = 0;  shipyardsAdjust = 0;  osAdjust = 0;  spaceportsAdjust = 0;  ccAdjust = 0;  naniteAdjust = 0;  androidAdjust = 0;  economicAdjust = 0;  terraformAdjust = 0;  mlpAdjust = 0;  orbitalbaseAdjust = 0;  jgAdjust = 0;  biosphereAdjust = 0;  capitalAdjust = 0;  barrackAdjust = 0;  laserAdjust = 0;  missileAdjust = 0;  plasmabaseAdjust = 0;  ionAdjust = 0;  photonAdjust = 0;  disruptorAdjust = 0;  deflectionAdjust = 0;  pshieldAdjust = 0;  pringAdjust = 0;  tableArray = document.getElementsByTagName("table")  for(i=0; i<tableArray.length; i++){  if(tableArray[i].innerHTML.match(/<th colspan=.2.>Construction Queue<.th>/)){  for(a=1; a<tableArray[i].childNodes[0].childNodes.length; a++){  if(!tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/<select name=.add_stack.>/)){  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Urban Structures/))  urbanAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Solar Plants/))  solarAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Gas Plants/))  gasAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Fusion Plants/))  fusionAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Antimatter Plants/))  antimatterAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Research Labs/))  researchAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Metal Refineries/))  metalAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Crystal Mines/))  crystalAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Robotic Factories/))  roboticsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Shipyards/) && !tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  shipyardsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  osAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Spaceports/))  spaceportsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Command Centers/))  ccAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Nanite Factories/))  naniteAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Androids Factories/))  androidAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Economic Centers/))  economicAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Terraform/))  terraformAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Multi-Level Platforms/))  mlpAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Base/))  orbitalbaseAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Jump Gate/))  jgAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Biosphere Modification/))  biosphereAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Capital/))  capitalAdjust++;}  }  }  }	table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;	var i_lastcolumn = 5;	var forms = document.getElementsByTagName(\'form\');	if (!table.innerHTML.match(/The research of this base is linked to/)){	if (table && table.childNodes.length > 4) {		table.childNodes[0].style.display=\'none\';		table.childNodes[2].style.display=\'none\';		for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {			if(!table.childNodes[nrow].innerHTML.match(/Research Labs linked to this base research./)){			table.childNodes[nrow+1].style.display=\'none\';			}		}	}	techmultipliers=GM_getValue(server+"techData", "0").split(",")	var energytechmultiplier = (techmultipliers[0]*0.05)+1;	var averageroute = GM_getValue(server+"averageRoute", "31");	var fertility = 0;	var uspopcost = 0;	var obpopcost = 0;	var obcostparentnode = 0;	var popcost = 0;	var areacost = 0;	var energycost = 0;	var econcost = 0;	var prodcost = 0;	var constcost = 0;	var flag = 0;	var bestAreaSignifier = node({tag: \'span\', html: \' <br /> (Best Area)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEconSignifier = node({tag: \'span\', html: \' <br /> (Best Econ)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestProdSignifier = node({tag: \'span\', html: \' <br /> (Best Prod)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestConstSignifier = node({tag: \'span\', html: \' <br /> (Best Const)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestPopSignifier = node({tag: \'span\', html: \' <br /> (Best Pop)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEnergySignifier = node({tag: \'span\', html: \' <br /> (Best Energy)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {		if(!table.childNodes[nrow].innerHTML.match(/linked to this base research./)){		var cname = table.childNodes[nrow].childNodes[1].firstChild.firstChild.firstChild.firstChild.nodeValue + table.childNodes[nrow].childNodes[1].firstChild.firstChild.childNodes[1].nodeValue;		if (location.search.indexOf(\'view=structures\')!=-1) {			table.childNodes[nrow].title = cname;			var td1help_res = table.childNodes[nrow+1].innerHTML.match(/(fertility|metal resource|crystals resource).\\((.+?)\\)/)			if (td1help_res) {			if (flag == 0){				if(td1help_res[1]=="fertility"){				var td1help = "&nbsp;(Fert "+td1help_res[2]+")"				}else if(td1help_res[1]=="metal resource"){				var td1help = "&nbsp;(Metal "+td1help_res[2]+")"				}else if(td1help_res[1]=="crystals resource"){				var td1help = "&nbsp;(Crystal "+td1help_res[2]+")"				}				var d = table.childNodes[nrow].childNodes[1].innerHTML + td1help;				table.childNodes[nrow].childNodes[1].innerHTML = d				}			}				if (cname==\'Terraform\') {				makeAdjustments(nrow, terraformAdjust)				terracost = parseInt(itemcost) / 5;					if(areacost == 0 || areacost > terracost){					areacost = terracost					table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Multi-Level Platforms\') {				adjust = mlpAdjust				makeAdjustments(nrow, mlpAdjust)					var cost = parseInt(itemcost) / 10;					if (cost < areacost) {						areacost = cost;						bestAreaSignifier.parentNode.removeChild(bestAreaSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Urban Structures\') {				makeAdjustments(nrow, urbanAdjust)          USLevel = table.childNodes[nrow].childNodes[1].innerHTML.match(/\\(Level [0-9]{1,}/);          USLevel = parseInt(USLevel[0].replace(/\\(Level /, ""));					fertility = parseInt(td1help_res[2]);					uspopcost = parseInt(itemcost);					uspopcost = (uspopcost+areacost) / fertility;					if (popcost == 0 || popcost > uspopcost){					popcost = uspopcost;					table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);					}				}				if (cname==\'Orbital Base\') {				makeAdjustments(nrow, orbitalbaseAdjust)					obpopcost = parseInt(itemcost) / 10;					obcostparentnode = table.childNodes[nrow].childNodes[2];					if (obpopcost && obpopcost < popcost) {						popcost = obpopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);								}				}								if (cname==\'Solar Plants\' || cname==\'Gas Plants\' || cname==\'Fusion Plants\' || cname==\'Antimatter Plants\') {				if(cname==\'Solar Plants\'){				adjust = solarAdjust				}else if(cname==\'Gas Plants\'){				adjust = gasAdjust				}else if(cname==\'Fusion Plants\'){				adjust = fusionAdjust				}else if(cname==\'Antimatter Plants\'){				adjust = antimatterAdjust				}makeAdjustments(nrow, adjust)					var c = parseInt(itemcost);					var e = parseInt(table.childNodes[nrow].childNodes[3].firstChild.nodeValue.slice(1));					c = (c + popcost + areacost) / (energytechmultiplier*e);					if (e>2){					if (!energycost)						energycost = c;					if (c <= energycost) {						energycost = c;						if (bestEnergySignifier.parentNode)							bestEnergySignifier.parentNode.removeChild(bestEnergySignifier);							table.childNodes[nrow].childNodes[2].appendChild(bestEnergySignifier);					}					}				}				if (cname == "Biosphere Modification"){makeAdjustments(nrow, biosphereAdjust)          var biopopcost = parseInt(itemcost);					biopopcost = (biopopcost+(24*energycost)+areacost)/USLevel										if (biopopcost < popcost) {						popcost = biopopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);																	}				}				if (cname == "Metal Refineries"){				makeAdjustments(nrow, metalAdjust)				var metal = parseInt(td1help_res[2]);				var metalcost = parseInt(itemcost);				metalprodcost = (metalcost + energycost + areacost + popcost)/ metal				metalconstcost = (metalcost + energycost + areacost + popcost)/ metal				metaleconcost = (metalcost + energycost + areacost + popcost)          	if(econcost == 0 || econcost > metaleconcost){          	econcost = metaleconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost == 0 || prodcost > metalprodcost){          	prodcost = metalprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost == 0 || constcost > metalconstcost){          	constcost = metalconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Crystals Mines"){				makeAdjustments(nrow, crystalAdjust)				var crystals = parseInt(td1help_res[2]);				var crystalcost = parseInt(itemcost);				crystalcost = (crystalcost + energycost + areacost)/ crystals          	if(econcost > crystalcost){          	econcost = crystalcost;													table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}			}				if (cname == "Robotic Factories"){				makeAdjustments(nrow, roboticsAdjust)				var robscost = parseInt(itemcost);				robsprodcost = (robscost + energycost + areacost + popcost)/ 2				robsconstcost = (robscost + energycost + areacost + popcost)/ 2				robseconcost = (robscost + energycost + areacost + popcost)          	if(econcost > robseconcost){          	econcost = robseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > robsprodcost){          	prodcost = robsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > robsconstcost){          	constcost = robsconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Shipyards"){				makeAdjustments(nrow, shipyardsAdjust)				var shipscost = parseInt(itemcost);				shipsprodcost = (shipscost + energycost + areacost + popcost)/ 2        shipseconcost = (shipscost + energycost + areacost + popcost)          	if(econcost > shipseconcost){          	econcost = shipseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > shipsprodcost){          	prodcost = shipsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Orbital Shipyards"){				makeAdjustments(nrow, osAdjust)				var oscost = parseInt(itemcost);				osprodcost = (oscost + (energycost*12) + popcost)/8        oseconcost = (oscost + (energycost*12) + popcost)/2          	if(econcost > oseconcost){          	econcost = oseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > osprodcost){          	prodcost = osprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Spaceports"){				makeAdjustments(nrow, spaceportsAdjust)				var Spcost = parseInt(itemcost);				Spcost = (Spcost + energycost + areacost)/ 2          	if(econcost > Spcost){          	econcost = Spcost;							table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}				if (cname == "Nanite Factories"){				makeAdjustments(nrow, naniteAdjust)				var nanicost = parseInt(itemcost);				naniprodcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				naniconstcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				nanieconcost = (nanicost + (energycost*2) + areacost + popcost) /2          	if(econcost > nanieconcost){          	econcost = nanieconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > naniprodcost){          	prodcost = naniprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > naniconstcost){          	constcost = naniconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Androids Factories"){				makeAdjustments(nrow, androidAdjust)				var andrcost = parseInt(itemcost);				andrprodcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andrconstcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andreconcost = (andrcost + (energycost*4) + areacost + popcost) /2          	if(econcost > andreconcost){          	econcost = andreconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > andrprodcost){          	prodcost = andrprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > andrconstcost){          	constcost = andrconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}								if (cname == "Economic Centers"){				makeAdjustments(nrow, economicAdjust)				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*2) + areacost + popcost) /3          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}        if (cname == "Capital"){        makeAdjustments(nrow, capitalAdjust)				basesArray = GM_getValue(server+"Bases")				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*12) + areacost + popcost) / (10+basesArray.length)          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}				        if (cname == "Research Labs"){        makeAdjustments(nrow, researchAdjust)				}					        if (cname == "Command Centers"){        makeAdjustments(nrow, ccAdjust)				}		if (flag == 0){				    	getOptionValue(cname);		if (v==1) {		buttontext=document.createElement("a")		buttontext.href="javascript:document.getElementsByName(\'add_stack\')[0].selectedIndex="+a+"; document.getElementsByTagName(\'form\')[1].submit()"		buttontext.innerHTML = "Queue"			if (buttontext) {			if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){			colnum=3			}else{			colnum=5			}				table.childNodes[nrow].childNodes[colnum].style.whiteSpace=\'nowrap\';				table.childNodes[nrow].childNodes[colnum].appendChild(buttontext);			}	}	if (flag == 0 && nrow==table.childNodes.length-1){						flag =1;						nrow = 1;						}		}}}}}function buttonToSelect(option, text, fallback_text) {}function makeAdjustments(nrow, adjustvar){adjust = adjustvar				if(table.childNodes[nrow].childNodes[6].innerHTML.match(/<span id="time/)){				adjust++ 				}				if(adjust>0){				basecost = parseInt(table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, ""))				time = getSeconds(table.childNodes[nrow].childNodes[5].firstChild.nodeValue)/basecost				time = secsToHMS(time*(Math.round(basecost*Math.pow(1.5, adjust))))				table.childNodes[nrow].childNodes[5].innerHTML = table.childNodes[nrow].childNodes[5].innerHTML + "<br />("+time+") "        table.childNodes[nrow].childNodes[1].innerHTML = table.childNodes[nrow].childNodes[1].innerHTML + " (+"+adjust+")"        table.childNodes[nrow].childNodes[2].firstChild.nodeValue = table.childNodes[nrow].childNodes[2].firstChild.nodeValue + " ("+Math.round((basecost*Math.pow(1.5, adjust)))+")"        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        itemcost = itemcost.replace(/[0-9]+\\(/,"")        itemcost = itemcost.replace(/\\)/, "")        }else{        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        }        }function secsToHMS(seconds){        secVar0 = Math.round(seconds);                            // The initial data, in seconds        minVar = Math.floor(secVar0/60);  // The minutes           hourVar = Math.floor(minVar/60);  // The minutes        minVar = minVar % 60;        secVar = secVar0 % 60;              // The balance of seconds        if(hourVar != 0){        return hourVar+"h "+(minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else if(minVar != 0){        return (minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else{        return (secVar<10?\'0\'+secVar:secVar)+"s"        }                }function getOptionValue(obj){v=0x = document.getElementsByName("add_stack")if(x[0]){x = x[0]for (i=0;i<x.length;i++)    {    if(x.options[i].text == obj){    v=1;	a=i    i = x.length    }    }    }    }/*function insertTimeTextBoxes(){    var inputs = document.forms[1].elements;    for(var i = 0; i < inputs.length; i++)    {        if(inputs[i].className == \'quant\')        {            var row = inputs[i].parentNode.parentNode;            //console.log(row);            var cell = document.createElement("td");            cell.setAttribute("align","center");            cell.innerHTML = \'<input type="text" value="" maxlength="5" size="5" name="\'+inputs[i].name+\' - Time" id="\'+inputs[i].name+\' - Time" class="quant" onchange="update(\\\'\'+inputs[i].name+\'\\\')"/>\';            row.appendChild(cell);            cell.addEventListener(\'keyup\',getConvertTimeToQuantityClosure(row),true);			//cell.addEventListener(\'blur\',onProductionTextBoxChanged,true);        }    }        var tbody = inputs[0].parentNode.parentNode.parentNode;    //console.log(tbody.childNodes[0].firstChild);    //Adjust colspan for top row and third row    tbody.childNodes[0].firstChild.setAttribute("colspan",7);    tbody.childNodes[2].firstChild.setAttribute("colspan",7);    //console.log(tbody.childNodes[1].firstChild);    //Insert column title    var titleCell = document.createElement("th");    titleCell.setAttribute("width","10%");    titleCell.textContent = "Time (h)"    tbody.childNodes[1].appendChild(titleCell);		titleCell.previousSibling.setAttribute("width","10%");    //adjust colspan for all help rows    var helpCells = document.evaluate(    "//td[@class=\'help\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(helpCells.snapshotLength);    for(var i=0;i<helpCells.snapshotLength;i++)    {        helpCells.snapshotItem(i).setAttribute("colspan",6);    }    //adjust colspan for all red rows    var redCells = document.evaluate(    "//td[@class=\'red\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(redCells.snapshotLength);    for(var i=0;i<redCells.snapshotLength;i++)    {        redCells.snapshotItem(i).setAttribute("colspan",2);    }    //adjust colspan for last two rows    document.getElementById("fast").addEventListener("click", function(){var inputs = document.forms[1].elements; for(var i = 0; i < inputs.length; i++){if(inputs[i].className == \'quant\'){if(inputs[i].value == ""){}else{var row = inputs[i].parentNode.parentNode; convertTimeToQuantity(row); unsafeWindow.update(inputs[i].name);}}}}, false)    tbody.childNodes[tbody.childNodes.length-1].firstChild.setAttribute("colspan",7);}*/function getConvertTimeToQuantityClosure(row){    function func(){        convertTimeToQuantity(row);    }    ;    return func;}function convertTimeToQuantity(row){	//console.log(row);    var credits = row.childNodes[2].textContent;    var time = row.childNodes[4].textContent;    var qtyInput = row.childNodes[5].firstChild;    var enteredTime;    try{        enteredTime = parseFloat(row.childNodes[6].firstChild.value);    }    catch(Exception)    {        return;    }    if(isNaN(enteredTime)){    enteredTime = 0    }else{    //console.log("Credits: "+credits+" Time: "+time+" qtyInput: "+ qtyInput.value);    //console.log("entered time: "+isNaN(enteredTime));    var totalSeconds = getSeconds(time);    if(totalSeconds != -1)    {        //console.log("Time " +getTimeDisplay(totalSeconds));        var enteredTimeInSeconds = enteredTime*60*60;        //console.log(enteredTimeInSeconds+" / " +totalSeconds);        if(enteredTimeInSeconds < totalSeconds){			qtyInput.value = "";		}else{			if(document.getElementById("fast").checked == true){			qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)*2			}else{				qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)			}		}    }    onProductionTextBoxKeyUp();    }}function getSeconds(timeString){    var regex = /((\\d|,| |\\.)*h)?\\W?((\\d|,| |\\.)*m)?\\W?((\\d|,| |\\.)*s)?/;    var result = regex.exec(timeString);    if(result)    {        //console.log(result);        var h = 0;var m=0;var s=0;        if(result[1] != null)        h = result[1].substring(0,result[1].indexOf("h"));        if(result[3] != null)        m = result[3].substring(0,result[3].indexOf("m"));        if(result[5] != null)        s = result[5].substring(0,result[5].indexOf("s"));        return h*60*60 + m*60 + s*1;    }    else return -1;}function getTimeDisplay(seconds){    var h = Math.floor(seconds/3600);    var m = Math.floor((seconds % 3600)/60);    var s = Math.floor((seconds % 3600) % 60);    var string = s+"s";    if(m>0 || h>0)		string = m+"m "+string;    if(h>0)		string = h+"h "+string;    return string;}var PRESET_KEYS = new Array("Fighters","Bombers","Heavy Bombers","Ion Bombers","Corvette","Recycler","Destroyer","Frigate","Ion Frigate","Scout Ship", "Outpost Ship","Cruiser","Carrier","Heavy Cruiser","Battleship","Fleet Carrier","Dreadnought","Titan","Leviathan","Death Star","Goods");function onProductionTextBoxKeyUp(){    var shipName;    var count=0,cost=0;    var productionCost = 0;    var totalTime = 0;    for(var i = 0;i <PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.log("Failed to find textBox for "+shipName+".");            continue;        }				if(textBox.value != "")        {            var row = textBox.parentNode.parentNode;            var time = row.childNodes[4].textContent;            //console.log(textBox.value);            count = parseInt(textBox.value);            cost = parseInt(textBox.parentNode.previousSibling.previousSibling.previousSibling.innerHTML.replace(/(,| |\\.)/g, ""));            totalTime+= getSeconds(time) * count;            //console.log(count + " " + shipName + "s @ " + cost);            productionCost += (cost * count);			//textBox.parentNode.nextSibling.value = "";        }    }    //console.log("total Time: "+getTimeDisplay(totalTime));    var fastProduction = document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.checked;    //console.info(fastProduction);    if(fastProduction)	{		productionCost *= 2;		totalTime /= 2;	}    //console.log("Text changed. Total production cost: " +productionCost);    var submitButton = document.evaluate(	    "//input[@type=\'submit\']",	    document,	    null,	    XPathResult.FIRST_ORDERED_NODE_TYPE,	    null).singleNodeValue;    if(productionCost > 0)		submitButton.value = "Submit";    else		submitButton.value = "Submit";}function registerTextBoxEventListeners(){    for(var i = 0;i < PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.info("Failed to find textBox for "+shipName+".");            continue;        }        textBox.addEventListener(\'keyup\',onProductionTextBoxKeyUp,false);		//textBox.addEventListener(\'blur\',onProductionTextBoxChanged,true);    }    document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'change\',onProductionTextBoxKeyUp,false);    //document.evaluate("//input[@type=\'reset\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'click\',onProductionTextBoxKeyUp,true);    document.evaluate("//form[@method=\'post\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'reset\',onProductionTextBoxKeyUp,false);}function productionHelperOnClick(num, box) {	num=num.replace("+", "")	num=num.replace(" ","")	num=num.replace("k","000")		document.getElementById(box).value = parseInt(document.getElementById(box).value) + parseInt(num);     calculateTotals();}function prodHelperEvent(e) {  if (e.shiftKey && (e.name == \'fast\')) {    for (i=0; i<empireLinks.length; i++) {    document.getElementById("fast_"+empireLinks[i]).checked = e.checked;    }  } else if (e.shiftKey && (e.name == \'unit\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("unit_"+empireLinks[i]).selectedIndex = e.selectedIndex;    }  } else if (e.shiftKey && (e.name == \'quant\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("quant_"+empireLinks[i]).value = e.value;    }  }  if ((e.name == \'fast\')||(e.name == \'unit\')||(e.name == \'quant\'))    calculateTotals();}function calculateTotals() {	var pcost = 0;  for (i=0; i<empireLinks.length; i++) {    n = (document.getElementById("fast_"+empireLinks[i]).checked) ? 2 : 1;    pcost += parseInt(ProductionGetCost[document.getElementById("unit_"+empireLinks[i]).selectedIndex] * document.getElementById("quant_"+empireLinks[i]).value * n);	}	document.getElementById(\'cost_all\').innerHTML = pcost+\' credits\';	var credits_left = parseInt(numcredits) - pcost;	document.getElementById(\'cost_all\').style.color = (credits_left < 0) ? \'red\' : \'\';}function resetForm() {  for (i=0; i<empireLinks.length; i++) {    document.getElementById("unit_"+empireLinks[i]).selectedIndex = 0;    document.getElementById("fast_"+empireLinks[i]).checked = false;    document.getElementById("quant_"+empireLinks[i]).value = 0;    returnto = i    calculateTotals();    i=returnto;  }}function startSubmitQueue() {  submitQueue(0);}function submitQueue(i) {    if (document.getElementById("quant_"+empireLinks[i]).value != 0) {      var postData = document.getElementById("unit_"+empireLinks[i]).value+"="+document.getElementById("quant_"+empireLinks[i]).value+"&post_back=true";      if (document.getElementById("fast_"+empireLinks[i]).checked)        postData += "&fast=true";      document.getElementById("quant_"+empireLinks[i]).value = \'ok\';      document.getElementById("quant_"+empireLinks[i]).style.backgroundColor = \'red\';      GM_xmlhttpRequest({        method: "POST",        url: serverurl+"base.aspx?base="+empireLinks[i]+"&view=production",        data: encodeURI(postData),        headers:{\'Content-type\':\'application/x-www-form-urlencoded\'},     		onreadystatechange: function(xhr) {if (xhr.readyState == "4") {endSubmitQueue(i, "1");}}      });    } else {      endSubmitQueue(i, "0");    }}function endSubmitQueue(i, value) {time=1000+Math.floor(Math.random()*1001)  if (i == empireLinks.length-1)    window.setTimeout(function(){ location.reload(true)}, time);  else  if(value == 0){  submitQueue(i+1)  }else{    window.setTimeout(function(){ submitQueue(i+1)}, time);    }}function productionHelper() {  var btn_details = [];  btn_details.push([1,\'+1 \']);  btn_details.push([5,\'+5 \']);  btn_details.push([10,\'+10 \']);  btn_details.push([25,\'+25 \']);  btn_details.push([100,\'+100 \']);  btn_details.push([250,\'+250 \']);  btn_details.push([1000,\'+1k \']);  table.rows[1].childNodes[4].innerHTML = \'Fast Prod\';  table.rows[1].childNodes[5].innerHTML = \'Unit Type\';  table.rows[1].childNodes[6].innerHTML = \'Quantity\';  table.rows[1].childNodes[3].innerHTML = \'Current Queue\';  a=0;  table.firstChild.style.display=\'none\';  for (i=2; i<table.rows.length; i=i+2) {    var currentRow = table.rows[i];		var res = /\\?base=((\\d|,| |\\.)+)/.exec(table.rows[i].childNodes[0].firstChild.href);	  table.rows[i+1].style.display = \'none\';	  empireLinks[a] = res[1];	  a++;	  currentRow.childNodes[3].innerHTML = currentRow.childNodes[5].innerHTML + "<br />" + table.rows[i+1].childNodes[3].innerHTML    currentRow.childNodes[4].innerHTML = "<input type=\'checkbox\' name=\'fast\' class=\'check\' id=\'fast_"+res[1]+"\' onfocus=\\"selectedBox=\'fast_"+res[1]+"\'\\" />";    currentRow.childNodes[6].innerHTML = "<input type=\'text\' name=\'quant\' class=\'quant\' id=\'quant_"+res[1]+"\' size=\'5\' maxlength=\'5\' value=\'0\' onfocus=\\"selectedBox=\'quant_"+res[1]+"\'\\" />";    var html = "<select name=\'unit\' id=\'unit_"+res[1]+"\' onfocus=\\"selectedBox=\'unit_"+res[1]+"\'\\"><option value=\'Fighters\'>Fighters</option><option value=\'Bombers\'>Bombers</option>";    html += "<option value=\'Heavy Bombers\'>Heavy Bombers</option><option value=\'Ion Bombers\'>Ion Bombers</option><option value=\'Corvette\'>Corvette</option>";    html += "<option value=\'Recycler\'>Recycler</option><option value=\'Destroyer\'>Destroyer</option><option value=\'Frigate\'>Frigate</option>"    html += "<option value=\'Ion Frigate\'>Ion Frigate</option><option value=\'Scout Ship\'>Scout Ship</option><option value=\'Outpost Ship\'>Outpost Ship</option>";    html += "<option value=\'Cruiser\'>Cruiser</option><option value=\'Carrier\'>Carrier</option><option value=\'Heavy Cruiser\'>Heavy Cruiser</option>";    html += "<option value=\'Battleship\'>Battleship</option><option value=\'Fleet Carrier\'>Fleet Carrier</option><option value=\'Dreadnought\'>Dreadnought</option>";    html += "<option value=\'Titan\'>Titan</option><option value=\'Leviathan\'>Leviathan</option><option value=\'Death Star\'>Death Star</option></select>";    currentRow.childNodes[5].innerHTML = html;    document.getElementById("unit_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("quant_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("fast_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    for(c=0; c<7; c++) {      var num = btn_details[c][0];      l = document.createElement("a");		l.href = "javascript:void(1);";		l.id= i + btn_details[c][1];		l.innerHTML = btn_details[c][1];            l.name = "quant_"+res[1];      currentRow.childNodes[6].appendChild(l);      document.getElementById(i + btn_details[c][1]).addEventListener(\'click\', function(){ productionHelperOnClick(this.innerHTML, this.name );}, true);    }  }  l = document.createElement("tr");  l.id="extrarow1";  table.appendChild(l);  l = document.createElement("td");		l.innerHTML = "0 credits";      l.className = \'help\';      l.align = "right";      l.id="cost_all"      document.getElementById("extrarow1").appendChild(l);      document.getElementById("cost_all").colSpan="7";      l = document.createElement("tr");      l.id="extrarow2";      table.appendChild(l);      l = document.createElement("td");      l.className = \'help\';      l.align = "right";          l.id="prodHelperButtons"      document.getElementById("extrarow2").appendChild(l);      document.getElementById("prodHelperButtons").colSpan="7";      l = document.createElement("input");      l.type = "reset";      l.id = "resetButton";      l.value = "Reset";      document.getElementById("prodHelperButtons").appendChild(l);      l = document.createElement("input");      l.type = "submit";      l.id = "submitButton";      l.value = "submit";      document.getElementById("prodHelperButtons").appendChild(l);   document.getElementById("submitButton").addEventListener(\'click\', function(){ startSubmitQueue();}, true);  document.getElementById("resetButton").addEventListener(\'click\', function(){ resetForm();}, true);}function productionHelperButton() {		table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;		var prodTitle = table.childNodes[1].childNodes[5];		scoutButton = document.createElement("a");		scoutButton.href = "javascript:void(1);";		scoutButton.id= "prodHelperButton";		scoutButton.innerHTML=" [&#177;]";		scoutButton.title = "Production Helper"		prodTitle.appendChild(scoutButton)		document.getElementById(\'prodHelperButton\').addEventListener(\'click\', function() {productionHelper();}, true);	}function saveTechData(){    //console.log("Saving tech data");    var techData = new Array();    var rows = document.evaluate(    "//tr[@align=\'center\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log("Tech rows: "+ rows.snapshotLength);    for (var i = 0; i < rows.snapshotLength; i++)    {        var techNameCell = document.evaluate(        "th[1]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        var techValueCell = document.evaluate(        "td[4]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        if(techNameCell.snapshotLength > 0)        {            var techValue = parseInt(techValueCell.snapshotItem(0).innerHTML.replace(/(,| |\\.)/g, ""));            var techName = techNameCell.snapshotItem(0).innerHTML;            //console.log(techName +": "+techValue);            techData[i] = techValue;        }    }    GM_setValue(server+"techData",techData.join());}/* function scannerGrab(){tableArray = document.getElementsByTagName("table")for(i=0; i<tableArray.length; i++){if(tableArray[i].innerHTML.match(/<th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=fleet">Fleet<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=player">Player<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=destination">Destination<\\/a><\\/th><th width="20%"><a href="empire.aspx\\?view=scanners&amp;order=arrival">Arrival<\\/a><\\/th><th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=size">Size<\\/a><\\/th>/)){table = tableArray[i]fleetId = []fleetName = []fleetOwner = []ownerId = []fleetDest = []fleetArrive = []fleetSize = []for(a=1; a<table.rows.length; a++){fleetId[a-1] = table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=/, "") fleetId[a-1] = fleetId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetName[a-1]=table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetName[a-1]=fleetName[a-1].replace(/<\\/a>/, "");fleetOwner[a-1]=table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=[0-9]{1,}">/, "")fleetOwner[a-1]=fleetOwner[a-1].replace(/<\\/a>/, "");ownerId[a-1] =table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=/, "")ownerId[a-1] = ownerId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetDest[a-1]=table.rows[a].childNodes[2].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)fleetArrive[a-1]=parseInt(table.rows[a].childNodes[3].title)+Math.round(new Date().getTime()/1000.0)fleetSize[a-1]=table.rows[a].childNodes[4].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetSize[a-1]=fleetSize[a-1].replace(/<\\/a>(.*?)/, "");fleetSize[a-1]=fleetSize[a-1].replace(/(,| |.)/, "");}sendData = "&fleetId="+fleetId+"&fleetName="+fleetName+"&fleetOwner="+fleetOwner+"&ownerId="+ownerId+"&fleetDest="+fleetDest+"&fleetArrive="+fleetArrive+"&fleetSize="+fleetSize+"&seenBy="+document.getElementById(\'account\').parentNode.childNodes[1].innerHTML.replace(/[A-Za-z]./, \'\')if(GIAServers.inArray(server)){sendtoserver(sendData, "scanners.php")}}}}*/// If NS -- that is, !IE -- then set up for mouse capturedocument.captureEvents(Event.MOUSEMOVE)// Set-up to use getMouseXY function onMouseMovedocument.addEventListener("mousemove", function(e) {getMouseXY(e)}, true);// Temporary variables to hold mouse x-y pos.svar tempX = 0var tempY = 0// Main function to retrieve mouse x-y pos.sfunction getMouseXY(e) {// grab the x-y pos.s if browser is NS    tempX = e.pageX    tempY = e.pageY  // catch possible negative values in NS4  if (tempX < 0){tempX = 0}  if (tempY < 0){tempY = 0}  // show the position values in the form named Show  // in the text fields named MouseX and MouseY  return true}function linkEventListeners(){if(GIAServers.inArray(server)){linkArray=document.getElementsByTagName("a")for(i=0; i<linkArray.length; i++){if(linkArray[i].href.match(/map.aspx\\?(.*?)loc=E[0-9]{2}:[0-9]{2}:[0-9]{2}/)){linkArray[i].addEventListener("mouseover", function(e) {showBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""), tempX, tempY)}, true);linkArray[i].addEventListener("mouseout", function() {hideBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""))}, true);}}}}function linkChange(){	linkArray=document.getElementsByTagName(\'a\')	for(i=0; i < linkArray.length; i++){		linkArray[i].target = "_blank"	}}  ////////////////////////////////////////// /// Execution //////////////////////////////////////////////////////////////////////if(document.location.href.match(/astroempires.com/)){replaceTime();if(document.location.href.match(/loc=[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){	if(document.body.innerHTML.match(/<th colspan=.4.>Base<\\/th>/)){	if(GIAServers.inArray(server)){	centerArray=document.getElementsByTagName(\'center\')	for(i=0; i<centerArray.length; i++){	if(centerArray[i].innerHTML.match(/Astro Type:/)){	baseLink = document.body.innerHTML.match(/base.aspx\\?base=[0-9]{1,}/)[0]	sourceDiv = document.createElement("div")	sourceDiv.id="baseDiv";	sourceDiv.innerHTML="Visit the <a href=\\""+baseLink+"\\">base page</a> to add this base to GIA.<br /><br />";	centerArray[i].appendChild(sourceDiv)	}	}	}	}}else if(document.location.href.match(/[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}/)){	debrisShow()}else if(document.location.href.match(/http:\\/\\/(.+?)\\.astroempires\\.com\\/base\\.aspx\\?base=[0-9]{1,}$/)){	if(window.parent.document.location.href != document.location.href){	baseDetails();	}}else if(document.location.href.match(/empire.aspx$/) || document.location.href.match(/empire.aspx\\?view=bases_events$/)){	productionHelperButton();}else if(document.location.href.match(/view=scanners/)){	scannerFormat();}else if(window.location.href.match(/empire.aspx\\?view=fleets/)){        sumShips();}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=structures/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=defenses/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){	if(!document.location.href.match(/&info=/)){enhanceConstructionPage();}}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=production/)){insertTimeTextBoxes()}if(window.location.href.indexOf(\'view=move\')==-1 && window.location.href.indexOf(\'view=fleets\')==-1 &&		window.location.href.indexOf(\'view=production\')==-1 && window.location.href.indexOf(\'view=structures\')==-1 &&		window.location.href.indexOf(\'view=trade\')==-1 && window.location.href.indexOf(\'view=research\')==-1){		formatVariousNumbers();	}	}',
                                                           'max_memory_size' => 262144,
                                                           'auto_upgrade' => 1
                                                         }, 'Mojo::Asset::Memory' ),
                                       'pre_buffer' => '',
                                       'buffer' => '',
                                       'events' => {
                                                     'read' => [
                                                                 $VAR1->{'content'}{'read'}
                                                               ]
                                                   }
                                     }, 'Mojo::Content::Single' ),
                 'state' => 'finished',
                 'raw_size' => 0,
                 'finished' => 1
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:55:51 2014] [error] Can't locate object method "content" via package "Mojo::Asset::Memory" at /home/nate/src/git/AstroEmpires/ae_web/script/../lib/AeWeb/Controller/Main.pm line 24.

[Wed Oct 22 13:55:51 2014] [debug] Template "exception.development.html.ep" not found.
[Wed Oct 22 13:55:51 2014] [debug] Template "exception.html.ep" not found.
[Wed Oct 22 13:55:51 2014] [debug] Rendering cached inline template "3e3201ab0667c1fc7f39089209f0435c".
[Wed Oct 22 13:55:51 2014] [debug] Rendering cached inline template "b2d451b47e2053ce583cbfdf7bcc6006".
[Wed Oct 22 13:55:51 2014] [debug] 500 Internal Server Error (0.045341s, 22.055/s).
[Wed Oct 22 13:56:37 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 13:56:37 2014] [debug] wtf
[Wed Oct 22 13:56:37 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 13:56:46 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:56:46 2014] [debug] POST "/ae/gia".
[Wed Oct 22 13:56:46 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 13:56:46 2014] [debug] $VAR1 = bless( {
                 'max_message_size' => 10485760,
                 'version' => '1.0',
                 'events' => {},
                 'buffer' => '',
                 'env' => {
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'SERVER_NAME' => 0,
                            'REQUEST_METHOD' => 'POST',
                            'PATH_INFO' => '/ae/gia',
                            'psgi.multithread' => '',
                            'psgix.input.buffered' => 1,
                            'QUERY_STRING' => '',
                            'HTTP_ACCEPT' => '*/*',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'CONTENT_LENGTH' => '63681',
                            'HTTP_HOST' => 'localhost',
                            'HTTP_CONNECTION' => 'close',
                            'psgi.nonblocking' => '',
                            'psgi.errors' => *::STDERR,
                            'psgi.multiprocess' => '',
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'SCRIPT_NAME' => '',
                            'psgi.streaming' => 1,
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'SERVER_PORT' => 5000,
                            'psgi.run_once' => '',
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'psgix.io' => bless( \*Symbol::GEN1, 'IO::Socket::INET' ),
                            'psgi.url_scheme' => 'http',
                            'REQUEST_URI' => '/ae/gia',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'REMOTE_ADDR' => '127.0.0.1',
                            'psgix.harakiri' => 1,
                            'psgi.input' => bless( \*{'Stream::Buffered::PerlIO::$io'}, 'FileHandle' ),
                            'REMOTE_PORT' => 54491
                          },
                 'raw_size' => 0,
                 'state' => 'finished',
                 'finished' => 1,
                 'url' => bless( {
                                   'base' => bless( {
                                                      'host' => 'localhost',
                                                      'path' => bless( {
                                                                         'leading_slash' => '',
                                                                         'trailing_slash' => '',
                                                                         'charset' => 'UTF-8',
                                                                         'parts' => []
                                                                       }, 'Mojo::Path' ),
                                                      'port' => '',
                                                      'scheme' => 'HTTP'
                                                    }, 'Mojo::URL' ),
                                   'path' => bless( {
                                                      'path' => '/ae/gia',
                                                      'charset' => 'UTF-8'
                                                    }, 'Mojo::Path' )
                                 }, 'Mojo::URL' ),
                 'method' => 'POST',
                 'content' => bless( {
                                       'read' => sub { "DUMMY" },
                                       'raw_size' => 63681,
                                       'state' => 'finished',
                                       'body' => 2,
                                       'pre_buffer' => '',
                                       'asset' => bless( {
                                                           'auto_upgrade' => 1,
                                                           'max_memory_size' => 262144,
                                                           'content' => '// ==UserScript==// @name           GIA Script (Modified)// @author          Luke Bonaccorsi AKA SpeedySurfer// @namespace       http://gears.speedysurfer.co.uk// @description     Scouts for bases in the current region// @license         Creative Commons Attribution License// @include        http://*.astroempires.com/*// @exclude        http://*.astroempires.com/login.aspx// @exclude        http://*.astroempires.com/home.aspx// ==/UserScript==/* * This file is a Greasemonkey user script. To install it, you need  * the Firefox plugin "Greasemonkey" (URL: http://greasemonkey.mozdev.org/) * After you installed the extension, restart Firefox and revisit  * this script. Now you will see a new menu item "Install User Script" * in your tools menu. *  * To uninstall this script, go to your "Tools" menu and select  * "Manage User Scripts", then select this script from the list * and click uninstall :-) * * Creative Commons Attribution License (--> or Public Domain) * http://creativecommons.org/licenses/by/2.5/*/  ////////////////////////////////////////// /// Variables //////////////////////////////////////////////////////////////////////if (document.location.href.match(/(.+?)astroempires.com/)){var server=document.location.href.match(/\\/(.+?).astroempires.com/)[1]server = server.replace(/\\//, "")var serverurl= "http://"+server+".astroempires.com/"}if(document.location.href.match(/astroempires.com/)){var empireLinks = []; var ProductionGetCost = [5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000]; var numcredits = document.evaluate(    "/html/body/table/tbody/tr/th/table/tbody/tr[2]/th[2]",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    numcredits = numcredits.snapshotItem(0).innerHTML;var FT_INDEX = 0;var BO_INDEX = 1;var HB_INDEX = 2;var IB_INDEX = 3;var CV_INDEX = 4;var RC_INDEX = 5;var DE_INDEX = 6;var FR_INDEX = 7;var IF_INDEX = 8;var SS_INDEX = 9;var OS_INDEX = 10;var CR_INDEX = 11;var CA_INDEX = 12;var HC_INDEX = 13;var BC_INDEX = 14;var FC_INDEX = 15;var DN_INDEX = 16;var TI_INDEX = 17;var LE_INDEX = 18;var DS_INDEX = 19;var BARRACKS_INDEX = 20;var LASER_TURRETS_INDEX = 21;var MISSLE_TURRETS_INDEX = 22;var PLASMA_TURRENTS_INDEX = 23;var ION_TURRETS_INDEX = 24;var PHOTON_TURRETS_INDEX = 25;var DISRUPTOR_TURRETS_INDEX = 26;var DEFLECTION_SHIELDS_INDEX = 27;var PLANETARY_SHIELD_INDEX = 28;var PLANETARY_RING_INDEX = 29;var fightingShips = "11111011100101101111";var shipValues = new Array(5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000);var shipHangarValues = new Array(0,0,0,0,0,0,0,4,4,0,0,4,60,8,40,400,200,1000,4000,10000);var GIAServers = new Array("bravo");}  ////////////////////////////////////////// /// Misc /////////////////////////////////////////////////////////////////////////Array.prototype.inArray = function (value)// Returns true if the passed value is found in the// array. Returns false if it is not.{var i;for (i=0; i < this.length; i++) {// Matches identical (===), not just similar (==).if (this[i] === value) {return true;}}return false;};function replaceTime(){	  for(n=1;n<=500;n++)	  {		elem=document.getElementById(\'time\'+n);	    if (!elem)	    {	       break;	    }	    elem.id = \'blah\'+n;	    s=elem.title;	    var newElement, endTime;	    var d = new Date();	    var now = new Date();	    if (elem)	    {	       if(s<=0)	       {		 endTime="-"	       }	       else	       {		 d.setTime(d.getTime()+(s*1000));		 tempdate = new Date();		 tempdate.setDate(tempdate.getDate()+1)		 if(now.toLocaleDateString() == d.toLocaleDateString() )		 {		    endTime="Today @ "+d.formatDate(\'H:i:s\');		 }		 else if(tempdate.toLocaleDateString() == d.toLocaleDateString())		 {		    endTime="Tomorrow @ "+d.formatDate(\'H:i:s\');		 }		 else		 {		    endTime=d.formatDate(\'D jS M @ H:i:s\');		 }	       }	       elem.innerHTML = "<b><span id=\'time"+n+"\' title=\'"+ s +"\'>-</span></b><br><nobr><span id=\'done"+n+"\' style=\'font-size: xx-small; color: "+getAgeCol(s)+"\'>" + endTime + "</span></nobr>"	    }	  }};  // formatDate :// a PHP date like function, for formatting date strings// authored by Svend Tofte <www.svendtofte.com>// the code is in the public domain//// see http://www.svendtofte.com/javascript/javascript-date-string-formatting/// and http://www.php.net/date//// thanks to//  - Daniel Berlin <mail@daniel-berlin.de>,//    major overhaul and improvements//  - Matt Bannon,//    correcting some stupid bugs in my days-in-the-months list!//  - levon ghazaryan. pointing out an error in z switch.//  - Andy Pemberton. pointing out error in c switch//// input : format string// time : epoch time (seconds, and optional)//// if time is not passed, formatting is based on// the current "this" date object\'s set time.//// supported switches are// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L),// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z//// unsupported (as compared to date in PHP 5.1.3)// T, e, oDate.prototype.formatDate = function (input,time) {    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday",                       "Thursday", "Friday", "Saturday"];    var daysShort =   ["Sun", "Mon", "Tue", "Wed",                       "Thu", "Fri", "Sat"];    var monthsShort = ["Jan", "Feb", "Mar", "Apr",                       "May", "Jun", "Jul", "Aug", "Sep",                       "Oct", "Nov", "Dec"];    var monthsLong =  ["January", "February", "March", "April",                       "May", "June", "July", "August", "September",                       "October", "November", "December"];    var switches = { // switches object        a : function () {            // Lowercase Ante meridiem and Post meridiem            return date.getHours() > 11? "pm" : "am";        },        A : function () {            // Uppercase Ante meridiem and Post meridiem            return (this.a().toUpperCase ());        },        B : function (){            // Swatch internet time. code simply grabbed from ppk,            // since I was feeling lazy:            // http://www.xs4all.nl/~ppk/js/beat.html            var off = (date.getTimezoneOffset() + 60)*60;            var theSeconds = (date.getHours() * 3600) +                             (date.getMinutes() * 60) +                              date.getSeconds() + off;            var beat = Math.floor(theSeconds/86.4);            if (beat > 1000) beat -= 1000;            if (beat < 0) beat += 1000;            if ((String(beat)).length == 1) beat = "00"+beat;            if ((String(beat)).length == 2) beat = "0"+beat;            return beat;        },        c : function () {            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" +                    this.H() + ":" + this.i() + ":" + this.s() + this.P());        },        d : function () {            // Day of the month, 2 digits with leading zeros            var j = String(this.j());            return (j.length == 1 ? "0"+j : j);        },        D : function () {            // A textual representation of a day, three letters            return daysShort[date.getDay()];        },        F : function () {            // A full textual representation of a month            return monthsLong[date.getMonth()];        },        g : function () {           // 12-hour format of an hour without leading zeros, 1 through 12!           if (date.getHours() == 0) {               return 12;           } else {               return date.getHours()>12 ? date.getHours()-12 : date.getHours();           }       },        G : function () {            // 24-hour format of an hour without leading zeros            return date.getHours();        },        h : function () {            // 12-hour format of an hour with leading zeros            var g = String(this.g());            return (g.length == 1 ? "0"+g : g);        },        H : function () {            // 24-hour format of an hour with leading zeros            var G = String(this.G());            return (G.length == 1 ? "0"+G : G);        },        i : function () {            // Minutes with leading zeros            var min = String (date.getMinutes ());            return (min.length == 1 ? "0" + min : min);        },        I : function () {            // Whether or not the date is in daylight saving time (DST)            // note that this has no bearing in actual DST mechanics,            // and is just a pure guess. buyer beware.            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");            return (noDST.getTimezoneOffset () ==                    date.getTimezoneOffset () ? 0 : 1);        },        j : function () {            // Day of the month without leading zeros            return date.getDate();        },        l : function () {            // A full textual representation of the day of the week            return daysLong[date.getDay()];        },        L : function () {            // leap year or not. 1 if leap year, 0 if not.            // the logic should match iso\'s 8601 standard.            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html            var Y = this.Y();            if (                (Y % 4 == 0 && Y % 100 != 0) ||                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)                ) {                return 1;            } else {                return 0;            }        },        m : function () {            // Numeric representation of a month, with leading zeros            var n = String(this.n());            return (n.length == 1 ? "0"+n : n);        },        M : function () {            // A short textual representation of a month, three letters            return monthsShort[date.getMonth()];        },        n : function () {            // Numeric representation of a month, without leading zeros            return date.getMonth()+1;        },        N : function () {            // ISO-8601 numeric representation of the day of the week            var w = this.w();            return (w == 0 ? 7 : w);        },        O : function () {            // Difference to Greenwich time (GMT) in hours            var os = Math.abs(date.getTimezoneOffset());            var h = String(Math.floor(os/60));            var m = String(os%60);            h.length == 1? h = "0"+h:1;            m.length == 1? m = "0"+m:1;            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;        },        P : function () {            // Difference to GMT, with colon between hours and minutes            var O = this.O();            return (O.substr(0, 3) + ":" + O.substr(3, 2));        },        r : function () {            // RFC 822 formatted date            var r; // result            //  Thu         ,     21               Dec              2000            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +            //    16          :    01          :    07               0200            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();            return r;        },        s : function () {            // Seconds, with leading zeros            var sec = String (date.getSeconds ());            return (sec.length == 1 ? "0" + sec : sec);        },        S : function () {            // English ordinal suffix for the day of the month, 2 characters            switch (date.getDate ()) {                case  1: return ("st");                case  2: return ("nd");                case  3: return ("rd");                case 21: return ("st");                case 22: return ("nd");                case 23: return ("rd");                case 31: return ("st");                default: return ("th");            }        },        t : function () {            // thanks to Matt Bannon for some much needed code-fixes here!            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];            if (this.L()==1 && this.n()==2) return 29; // ~leap day            return daysinmonths[this.n()];        },        U : function () {            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)            return Math.round(date.getTime()/1000);        },        w : function () {            // Numeric representation of the day of the week            return date.getDay();        },        W : function () {            // Weeknumber, as per ISO specification:            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            var DoW = this.N ();            var DoY = this.z ();            // If the day is 3 days before New Year\'s Eve and is Thursday or earlier,            // it\'s week 1 of next year.            var daysToNY = 364 + this.L () - DoY;            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {                return 1;            }            // If the day is within 3 days after New Year\'s Eve and is Friday or later,            // it belongs to the old year.            if (DoY <= 2 && DoW >= 5) {                return new Date (this.Y () - 1, 11, 31).formatDate ("W");            }            var nyDoW = new Date (this.Y (), 0, 1).getDay ();            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier                return (1 + Math.floor ((DoY + nyDoW) / 7));            } else {  // First day of the year is a Friday or later                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));            }        },        y : function () {            // A two-digit representation of a year            var y = String(this.Y());            return y.substring(y.length-2,y.length);        },        Y : function () {            // A full numeric representation of a year, 4 digits            // we first check, if getFullYear is supported. if it            // is, we just use that. ppks code is nice, but wont            // work with dates outside 1900-2038, or something like that            if (date.getFullYear) {                var newDate = new Date("January 1 2001 00:00:00 +0000");                var x = newDate .getFullYear();                if (x == 2001) {                    // i trust the method now                    return date.getFullYear();                }            }            // else, do this:            // codes thanks to ppk:            // http://www.xs4all.nl/~ppk/js/introdate.html            var x = date.getYear();            var y = x % 100;            y += (y < 38) ? 2000 : 1900;            return y;        },        z : function () {            // The day of the year, zero indexed! 0 through 366            var s = "January 1 " + this.Y() + " 00:00:00 GMT" + this.O();            var t = new Date(s);            var diff = date.getTime() - t.getTime();            return Math.floor(diff/1000/60/60/24);        },        Z : function () {            // Timezone offset in seconds            return (date.getTimezoneOffset () * -60);        }    }    function getSwitch(str) {        if (switches[str] != undefined) {            return switches[str]();        } else {            return str;        }    }    var date;    if (time) {        var date = new Date (time);    } else {        var date = this;    }    var formatString = input.split("");    var i = 0;    while (i < formatString.length) {        if (formatString[i] == "%") {            // this is our way of allowing users to escape stuff            formatString.splice(i,1);        } else {            formatString[i] = getSwitch(formatString[i]);        }        i++;    }    return formatString.join("");}// Some (not all) predefined format strings from PHP 5.1.1, which// offer standard date representations.// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants//// Atom      "2005-08-15T15:52:01+00:00"Date.DATE_ATOM    = "Y-m-d%TH:i:sP";// ISO-8601  "2005-08-15T15:52:01+0000"Date.DATE_ISO8601 = "Y-m-d%TH:i:sO";// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"Date.DATE_RFC2822 = "D, d M Y H:i:s O";// W3C       "2005-08-15 15:52:01+00:00"Date.DATE_W3C     = "Y-m-d%TH:i:sP";function getAgeCol(age) {		var col = \'#461B7E\'; // 72 hours +		if (age <= 3600)			col = \'#FFFFFF\'; // 1 hour		else if (age <=10800)			col = \'#FFFFFF\'; // 3 hours		else if (age <=21600)			col = \'#9E7BFF\'; // 6 hours		else if (age <=43200)			col = \'#9172EC\'; // 12 hours		else if (age <=86400)			col = \'#8467D7\'; // 24 hours		else if (age <=172800)			col = \'#7A5DC7\'; // 48 hours		else if (age <=259200)			col = \'#461B7E\'; // 72 hours		return col;}function debrisShow(){	spanArray = document.getElementsByTagName("span")	for(i=0; i<spanArray.length; i++){		if(spanArray[i].getAttribute("class") == "gray"){		spanArray[i].innerHTML = spanArray[i].title		}	}}function formatVariousNumbers(){	var debrisElement = document.evaluate(    "//center[contains(text(),\'Debris\')]",    document,    null,    XPathResult.FIRST_ORDERED_NODE_TYPE,    null).singleNodeValue;    if(debrisElement !=null)    {        var debrisMessage = debrisElement.textContent;        console.log(debrisMessage);        var indexOfText = debrisMessage.indexOf(" credits");        var valueText = debrisMessage.substring(0,indexOfText);        var value = commaFormat(parseInt(valueText));        //console.log(valueText+" new value:" +value.toString());        //console.log(debrisElement.textContent + " -< " + debrisElement.textContent.replace(valueText,value.toString()));        debrisElement.textContent = debrisElement.textContent.replace(valueText,value.toString());    }}function scannerFormat(){	baseArray=document.getElementsByTagName("a")	bases = GM_getValue(server+"Bases")	for(i=0; i<baseArray.length; i++){		if(baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){			basecoord=baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)			if(bases.match(basecoord)){			baseArray[i].setAttribute("style", "color: red; font-weight: normal;")			}		}	}}var galaxyInfoArrays = new Array();function getGalaxyInfoArray(galaxy){	if(galaxyInfoArrays[galaxy]==undefined)	{		var newArray = new Array(20);		for(var i = 0; i < 20;i++)		{			newArray[i] = 0;		}		galaxyInfoArrays[galaxy] = new Array(galaxy,0,newArray,0,0);//[galaxy number],[mobile fleet count],[mobilefleetarray],[total fighting fleet],[total fleet],	}	return galaxyInfoArrays[galaxy];}function isBase(base){	bases = GM_getValue(server+"Bases")    if(bases==null)    return false;    if(bases.match(base)){        return true;    }else{    return false;	}}function insertTotalsRow(node,sums,mobileSums,fleetCount,mobileFleetCount,overallFleetTotal,overallFightingFleetTotal,overallMobileFleetTotal,overallMobileFightingFleetTotal){    	//GALAXY ROWS	for(var i = 0;i<galaxyInfoArrays.length;i++)	{		var galaxyInfoArray = galaxyInfoArrays[i];		if(galaxyInfoArray==undefined || galaxyInfoArray[1] == 0)			continue;				var sumRow = document.createElement("tr");	    sumRow.setAttribute(\'align\',\'center\');	    	    var element = sumRow.insertCell(0);	    element.textContent = "Mobile Fleets ("+i+")";	    element = sumRow.insertCell(1);	    element.textContent = galaxyInfoArray[1];	    		var galaxyFleetSums = galaxyInfoArray[2];		for(var k = 0; k < 20; k++)	    {	        //console.log(sums[k]);	        var cell = document.createElement("td");	        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	        if(galaxyFleetSums[k] > 0)				cell.innerHTML = "<small>"+galaxyFleetSums[k]+"</small>";	        //console.log(element);	        sumRow.insertBefore(cell,null);	    }	    //Add totals cell	    var cell = document.createElement("td");	    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	    cell.innerHTML =galaxyInfoArray[3] +" / "+ galaxyInfoArray[4];	    //console.log(element);	    sumRow.insertBefore(cell,null);	    node.insertBefore(sumRow,null);	}	//MOBILE ROW	var sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    var element = sumRow.insertCell(0);    element.textContent = "Total Mobile Fleets";    element = sumRow.insertCell(1);    element.textContent = mobileFleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(mobileSums[k] > 0)			cell.innerHTML = "<small>"+mobileSums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallMobileFightingFleetTotal +" / "+ overallMobileFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);    //TOTAL ROW    sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    element = sumRow.insertCell(0);    element.textContent = "Total Fleets";    element = sumRow.insertCell(1);    element.textContent = fleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(sums[k] > 0)			cell.innerHTML = "<small>"+sums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallFightingFleetTotal +" / "+ overallFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);}function node(opt) {  function attr(name) {    var value = opt[name];    delete opt[name];    return value;  }  var expandos = { id: 1, className: 1, title: 1, type: 1, checked: 1 };  var id = opt.id;  var n = document.getElementById(id);  if (!n) {    var tag = attr("tag") || "div";    if ("string" == typeof tag)      n = document.createElement(tag);    else {      var t = document.createElement("div");      t.innerHTML = tag.toXMLString();      var ids = {};      for each (var n in $x(\'.//*[@id]\', t))        ids[n.id] = 1;      if (!n) ids = null;      var r = document.createRange();      r.selectNodeContents(t);      n = r.extractContents();      if (n.childNodes.length == 1)        n = n.firstChild;    }    var after = attr("after");    var before = opt.prepend ? opt.prepend.firstChild : attr("before");    var parent = attr("prepend") || attr("append") ||                   (before || after || {}).parentNode;    if (parent) {      if (before)        parent.insertBefore(n, before);      else if (after)        parent.insertBefore(n, after.nextSibling);      else        parent.appendChild(n);    }    if (id) n.id = id;  }  var html = attr("html");  if ("undefined" != typeof html) n.innerHTML = html;  var text = attr("text");  if ("undefined" != typeof text) n.textContent = text;  var style = attr("style");  if (style)    for (var prop in style)      n.style[prop] = style[prop];  for (prop in opt)    if (expandos[prop])      n[prop] = opt[prop];    else      n.setAttribute(prop, opt[prop]+"");  if (ids)    for (var id in ids)      ids[id] = document.getElementById(id);  return ids || n;}function enhanceConstructionPage() {  urbanAdjust = 0;  solarAdjust = 0;  gasAdjust = 0;  fusionAdjust = 0;  antimatterAdjust = 0;  researchAdjust = 0;  metalAdjust = 0;  crystalAdjust = 0;  roboticsAdjust = 0;  shipyardsAdjust = 0;  osAdjust = 0;  spaceportsAdjust = 0;  ccAdjust = 0;  naniteAdjust = 0;  androidAdjust = 0;  economicAdjust = 0;  terraformAdjust = 0;  mlpAdjust = 0;  orbitalbaseAdjust = 0;  jgAdjust = 0;  biosphereAdjust = 0;  capitalAdjust = 0;  barrackAdjust = 0;  laserAdjust = 0;  missileAdjust = 0;  plasmabaseAdjust = 0;  ionAdjust = 0;  photonAdjust = 0;  disruptorAdjust = 0;  deflectionAdjust = 0;  pshieldAdjust = 0;  pringAdjust = 0;  tableArray = document.getElementsByTagName("table")  for(i=0; i<tableArray.length; i++){  if(tableArray[i].innerHTML.match(/<th colspan=.2.>Construction Queue<.th>/)){  for(a=1; a<tableArray[i].childNodes[0].childNodes.length; a++){  if(!tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/<select name=.add_stack.>/)){  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Urban Structures/))  urbanAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Solar Plants/))  solarAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Gas Plants/))  gasAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Fusion Plants/))  fusionAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Antimatter Plants/))  antimatterAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Research Labs/))  researchAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Metal Refineries/))  metalAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Crystal Mines/))  crystalAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Robotic Factories/))  roboticsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Shipyards/) && !tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  shipyardsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  osAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Spaceports/))  spaceportsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Command Centers/))  ccAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Nanite Factories/))  naniteAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Androids Factories/))  androidAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Economic Centers/))  economicAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Terraform/))  terraformAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Multi-Level Platforms/))  mlpAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Base/))  orbitalbaseAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Jump Gate/))  jgAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Biosphere Modification/))  biosphereAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Capital/))  capitalAdjust++;}  }  }  }	table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;	var i_lastcolumn = 5;	var forms = document.getElementsByTagName(\'form\');	if (!table.innerHTML.match(/The research of this base is linked to/)){	if (table && table.childNodes.length > 4) {		table.childNodes[0].style.display=\'none\';		table.childNodes[2].style.display=\'none\';		for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {			if(!table.childNodes[nrow].innerHTML.match(/Research Labs linked to this base research./)){			table.childNodes[nrow+1].style.display=\'none\';			}		}	}	techmultipliers=GM_getValue(server+"techData", "0").split(",")	var energytechmultiplier = (techmultipliers[0]*0.05)+1;	var averageroute = GM_getValue(server+"averageRoute", "31");	var fertility = 0;	var uspopcost = 0;	var obpopcost = 0;	var obcostparentnode = 0;	var popcost = 0;	var areacost = 0;	var energycost = 0;	var econcost = 0;	var prodcost = 0;	var constcost = 0;	var flag = 0;	var bestAreaSignifier = node({tag: \'span\', html: \' <br /> (Best Area)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEconSignifier = node({tag: \'span\', html: \' <br /> (Best Econ)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestProdSignifier = node({tag: \'span\', html: \' <br /> (Best Prod)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestConstSignifier = node({tag: \'span\', html: \' <br /> (Best Const)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestPopSignifier = node({tag: \'span\', html: \' <br /> (Best Pop)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEnergySignifier = node({tag: \'span\', html: \' <br /> (Best Energy)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {		if(!table.childNodes[nrow].innerHTML.match(/linked to this base research./)){		var cname = table.childNodes[nrow].childNodes[1].firstChild.firstChild.firstChild.firstChild.nodeValue + table.childNodes[nrow].childNodes[1].firstChild.firstChild.childNodes[1].nodeValue;		if (location.search.indexOf(\'view=structures\')!=-1) {			table.childNodes[nrow].title = cname;			var td1help_res = table.childNodes[nrow+1].innerHTML.match(/(fertility|metal resource|crystals resource).\\((.+?)\\)/)			if (td1help_res) {			if (flag == 0){				if(td1help_res[1]=="fertility"){				var td1help = "&nbsp;(Fert "+td1help_res[2]+")"				}else if(td1help_res[1]=="metal resource"){				var td1help = "&nbsp;(Metal "+td1help_res[2]+")"				}else if(td1help_res[1]=="crystals resource"){				var td1help = "&nbsp;(Crystal "+td1help_res[2]+")"				}				var d = table.childNodes[nrow].childNodes[1].innerHTML + td1help;				table.childNodes[nrow].childNodes[1].innerHTML = d				}			}				if (cname==\'Terraform\') {				makeAdjustments(nrow, terraformAdjust)				terracost = parseInt(itemcost) / 5;					if(areacost == 0 || areacost > terracost){					areacost = terracost					table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Multi-Level Platforms\') {				adjust = mlpAdjust				makeAdjustments(nrow, mlpAdjust)					var cost = parseInt(itemcost) / 10;					if (cost < areacost) {						areacost = cost;						bestAreaSignifier.parentNode.removeChild(bestAreaSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Urban Structures\') {				makeAdjustments(nrow, urbanAdjust)          USLevel = table.childNodes[nrow].childNodes[1].innerHTML.match(/\\(Level [0-9]{1,}/);          USLevel = parseInt(USLevel[0].replace(/\\(Level /, ""));					fertility = parseInt(td1help_res[2]);					uspopcost = parseInt(itemcost);					uspopcost = (uspopcost+areacost) / fertility;					if (popcost == 0 || popcost > uspopcost){					popcost = uspopcost;					table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);					}				}				if (cname==\'Orbital Base\') {				makeAdjustments(nrow, orbitalbaseAdjust)					obpopcost = parseInt(itemcost) / 10;					obcostparentnode = table.childNodes[nrow].childNodes[2];					if (obpopcost && obpopcost < popcost) {						popcost = obpopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);								}				}								if (cname==\'Solar Plants\' || cname==\'Gas Plants\' || cname==\'Fusion Plants\' || cname==\'Antimatter Plants\') {				if(cname==\'Solar Plants\'){				adjust = solarAdjust				}else if(cname==\'Gas Plants\'){				adjust = gasAdjust				}else if(cname==\'Fusion Plants\'){				adjust = fusionAdjust				}else if(cname==\'Antimatter Plants\'){				adjust = antimatterAdjust				}makeAdjustments(nrow, adjust)					var c = parseInt(itemcost);					var e = parseInt(table.childNodes[nrow].childNodes[3].firstChild.nodeValue.slice(1));					c = (c + popcost + areacost) / (energytechmultiplier*e);					if (e>2){					if (!energycost)						energycost = c;					if (c <= energycost) {						energycost = c;						if (bestEnergySignifier.parentNode)							bestEnergySignifier.parentNode.removeChild(bestEnergySignifier);							table.childNodes[nrow].childNodes[2].appendChild(bestEnergySignifier);					}					}				}				if (cname == "Biosphere Modification"){makeAdjustments(nrow, biosphereAdjust)          var biopopcost = parseInt(itemcost);					biopopcost = (biopopcost+(24*energycost)+areacost)/USLevel										if (biopopcost < popcost) {						popcost = biopopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);																	}				}				if (cname == "Metal Refineries"){				makeAdjustments(nrow, metalAdjust)				var metal = parseInt(td1help_res[2]);				var metalcost = parseInt(itemcost);				metalprodcost = (metalcost + energycost + areacost + popcost)/ metal				metalconstcost = (metalcost + energycost + areacost + popcost)/ metal				metaleconcost = (metalcost + energycost + areacost + popcost)          	if(econcost == 0 || econcost > metaleconcost){          	econcost = metaleconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost == 0 || prodcost > metalprodcost){          	prodcost = metalprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost == 0 || constcost > metalconstcost){          	constcost = metalconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Crystals Mines"){				makeAdjustments(nrow, crystalAdjust)				var crystals = parseInt(td1help_res[2]);				var crystalcost = parseInt(itemcost);				crystalcost = (crystalcost + energycost + areacost)/ crystals          	if(econcost > crystalcost){          	econcost = crystalcost;													table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}			}				if (cname == "Robotic Factories"){				makeAdjustments(nrow, roboticsAdjust)				var robscost = parseInt(itemcost);				robsprodcost = (robscost + energycost + areacost + popcost)/ 2				robsconstcost = (robscost + energycost + areacost + popcost)/ 2				robseconcost = (robscost + energycost + areacost + popcost)          	if(econcost > robseconcost){          	econcost = robseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > robsprodcost){          	prodcost = robsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > robsconstcost){          	constcost = robsconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Shipyards"){				makeAdjustments(nrow, shipyardsAdjust)				var shipscost = parseInt(itemcost);				shipsprodcost = (shipscost + energycost + areacost + popcost)/ 2        shipseconcost = (shipscost + energycost + areacost + popcost)          	if(econcost > shipseconcost){          	econcost = shipseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > shipsprodcost){          	prodcost = shipsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Orbital Shipyards"){				makeAdjustments(nrow, osAdjust)				var oscost = parseInt(itemcost);				osprodcost = (oscost + (energycost*12) + popcost)/8        oseconcost = (oscost + (energycost*12) + popcost)/2          	if(econcost > oseconcost){          	econcost = oseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > osprodcost){          	prodcost = osprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Spaceports"){				makeAdjustments(nrow, spaceportsAdjust)				var Spcost = parseInt(itemcost);				Spcost = (Spcost + energycost + areacost)/ 2          	if(econcost > Spcost){          	econcost = Spcost;							table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}				if (cname == "Nanite Factories"){				makeAdjustments(nrow, naniteAdjust)				var nanicost = parseInt(itemcost);				naniprodcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				naniconstcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				nanieconcost = (nanicost + (energycost*2) + areacost + popcost) /2          	if(econcost > nanieconcost){          	econcost = nanieconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > naniprodcost){          	prodcost = naniprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > naniconstcost){          	constcost = naniconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Androids Factories"){				makeAdjustments(nrow, androidAdjust)				var andrcost = parseInt(itemcost);				andrprodcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andrconstcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andreconcost = (andrcost + (energycost*4) + areacost + popcost) /2          	if(econcost > andreconcost){          	econcost = andreconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > andrprodcost){          	prodcost = andrprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > andrconstcost){          	constcost = andrconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}								if (cname == "Economic Centers"){				makeAdjustments(nrow, economicAdjust)				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*2) + areacost + popcost) /3          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}        if (cname == "Capital"){        makeAdjustments(nrow, capitalAdjust)				basesArray = GM_getValue(server+"Bases")				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*12) + areacost + popcost) / (10+basesArray.length)          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}				        if (cname == "Research Labs"){        makeAdjustments(nrow, researchAdjust)				}					        if (cname == "Command Centers"){        makeAdjustments(nrow, ccAdjust)				}		if (flag == 0){				    	getOptionValue(cname);		if (v==1) {		buttontext=document.createElement("a")		buttontext.href="javascript:document.getElementsByName(\'add_stack\')[0].selectedIndex="+a+"; document.getElementsByTagName(\'form\')[1].submit()"		buttontext.innerHTML = "Queue"			if (buttontext) {			if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){			colnum=3			}else{			colnum=5			}				table.childNodes[nrow].childNodes[colnum].style.whiteSpace=\'nowrap\';				table.childNodes[nrow].childNodes[colnum].appendChild(buttontext);			}	}	if (flag == 0 && nrow==table.childNodes.length-1){						flag =1;						nrow = 1;						}		}}}}}function buttonToSelect(option, text, fallback_text) {}function makeAdjustments(nrow, adjustvar){adjust = adjustvar				if(table.childNodes[nrow].childNodes[6].innerHTML.match(/<span id="time/)){				adjust++ 				}				if(adjust>0){				basecost = parseInt(table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, ""))				time = getSeconds(table.childNodes[nrow].childNodes[5].firstChild.nodeValue)/basecost				time = secsToHMS(time*(Math.round(basecost*Math.pow(1.5, adjust))))				table.childNodes[nrow].childNodes[5].innerHTML = table.childNodes[nrow].childNodes[5].innerHTML + "<br />("+time+") "        table.childNodes[nrow].childNodes[1].innerHTML = table.childNodes[nrow].childNodes[1].innerHTML + " (+"+adjust+")"        table.childNodes[nrow].childNodes[2].firstChild.nodeValue = table.childNodes[nrow].childNodes[2].firstChild.nodeValue + " ("+Math.round((basecost*Math.pow(1.5, adjust)))+")"        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        itemcost = itemcost.replace(/[0-9]+\\(/,"")        itemcost = itemcost.replace(/\\)/, "")        }else{        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        }        }function secsToHMS(seconds){        secVar0 = Math.round(seconds);                            // The initial data, in seconds        minVar = Math.floor(secVar0/60);  // The minutes           hourVar = Math.floor(minVar/60);  // The minutes        minVar = minVar % 60;        secVar = secVar0 % 60;              // The balance of seconds        if(hourVar != 0){        return hourVar+"h "+(minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else if(minVar != 0){        return (minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else{        return (secVar<10?\'0\'+secVar:secVar)+"s"        }                }function getOptionValue(obj){v=0x = document.getElementsByName("add_stack")if(x[0]){x = x[0]for (i=0;i<x.length;i++)    {    if(x.options[i].text == obj){    v=1;	a=i    i = x.length    }    }    }    }/*function insertTimeTextBoxes(){    var inputs = document.forms[1].elements;    for(var i = 0; i < inputs.length; i++)    {        if(inputs[i].className == \'quant\')        {            var row = inputs[i].parentNode.parentNode;            //console.log(row);            var cell = document.createElement("td");            cell.setAttribute("align","center");            cell.innerHTML = \'<input type="text" value="" maxlength="5" size="5" name="\'+inputs[i].name+\' - Time" id="\'+inputs[i].name+\' - Time" class="quant" onchange="update(\\\'\'+inputs[i].name+\'\\\')"/>\';            row.appendChild(cell);            cell.addEventListener(\'keyup\',getConvertTimeToQuantityClosure(row),true);			//cell.addEventListener(\'blur\',onProductionTextBoxChanged,true);        }    }        var tbody = inputs[0].parentNode.parentNode.parentNode;    //console.log(tbody.childNodes[0].firstChild);    //Adjust colspan for top row and third row    tbody.childNodes[0].firstChild.setAttribute("colspan",7);    tbody.childNodes[2].firstChild.setAttribute("colspan",7);    //console.log(tbody.childNodes[1].firstChild);    //Insert column title    var titleCell = document.createElement("th");    titleCell.setAttribute("width","10%");    titleCell.textContent = "Time (h)"    tbody.childNodes[1].appendChild(titleCell);		titleCell.previousSibling.setAttribute("width","10%");    //adjust colspan for all help rows    var helpCells = document.evaluate(    "//td[@class=\'help\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(helpCells.snapshotLength);    for(var i=0;i<helpCells.snapshotLength;i++)    {        helpCells.snapshotItem(i).setAttribute("colspan",6);    }    //adjust colspan for all red rows    var redCells = document.evaluate(    "//td[@class=\'red\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(redCells.snapshotLength);    for(var i=0;i<redCells.snapshotLength;i++)    {        redCells.snapshotItem(i).setAttribute("colspan",2);    }    //adjust colspan for last two rows    document.getElementById("fast").addEventListener("click", function(){var inputs = document.forms[1].elements; for(var i = 0; i < inputs.length; i++){if(inputs[i].className == \'quant\'){if(inputs[i].value == ""){}else{var row = inputs[i].parentNode.parentNode; convertTimeToQuantity(row); unsafeWindow.update(inputs[i].name);}}}}, false)    tbody.childNodes[tbody.childNodes.length-1].firstChild.setAttribute("colspan",7);}*/function getConvertTimeToQuantityClosure(row){    function func(){        convertTimeToQuantity(row);    }    ;    return func;}function convertTimeToQuantity(row){	//console.log(row);    var credits = row.childNodes[2].textContent;    var time = row.childNodes[4].textContent;    var qtyInput = row.childNodes[5].firstChild;    var enteredTime;    try{        enteredTime = parseFloat(row.childNodes[6].firstChild.value);    }    catch(Exception)    {        return;    }    if(isNaN(enteredTime)){    enteredTime = 0    }else{    //console.log("Credits: "+credits+" Time: "+time+" qtyInput: "+ qtyInput.value);    //console.log("entered time: "+isNaN(enteredTime));    var totalSeconds = getSeconds(time);    if(totalSeconds != -1)    {        //console.log("Time " +getTimeDisplay(totalSeconds));        var enteredTimeInSeconds = enteredTime*60*60;        //console.log(enteredTimeInSeconds+" / " +totalSeconds);        if(enteredTimeInSeconds < totalSeconds){			qtyInput.value = "";		}else{			if(document.getElementById("fast").checked == true){			qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)*2			}else{				qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)			}		}    }    onProductionTextBoxKeyUp();    }}function getSeconds(timeString){    var regex = /((\\d|,| |\\.)*h)?\\W?((\\d|,| |\\.)*m)?\\W?((\\d|,| |\\.)*s)?/;    var result = regex.exec(timeString);    if(result)    {        //console.log(result);        var h = 0;var m=0;var s=0;        if(result[1] != null)        h = result[1].substring(0,result[1].indexOf("h"));        if(result[3] != null)        m = result[3].substring(0,result[3].indexOf("m"));        if(result[5] != null)        s = result[5].substring(0,result[5].indexOf("s"));        return h*60*60 + m*60 + s*1;    }    else return -1;}function getTimeDisplay(seconds){    var h = Math.floor(seconds/3600);    var m = Math.floor((seconds % 3600)/60);    var s = Math.floor((seconds % 3600) % 60);    var string = s+"s";    if(m>0 || h>0)		string = m+"m "+string;    if(h>0)		string = h+"h "+string;    return string;}var PRESET_KEYS = new Array("Fighters","Bombers","Heavy Bombers","Ion Bombers","Corvette","Recycler","Destroyer","Frigate","Ion Frigate","Scout Ship", "Outpost Ship","Cruiser","Carrier","Heavy Cruiser","Battleship","Fleet Carrier","Dreadnought","Titan","Leviathan","Death Star","Goods");function onProductionTextBoxKeyUp(){    var shipName;    var count=0,cost=0;    var productionCost = 0;    var totalTime = 0;    for(var i = 0;i <PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.log("Failed to find textBox for "+shipName+".");            continue;        }				if(textBox.value != "")        {            var row = textBox.parentNode.parentNode;            var time = row.childNodes[4].textContent;            //console.log(textBox.value);            count = parseInt(textBox.value);            cost = parseInt(textBox.parentNode.previousSibling.previousSibling.previousSibling.innerHTML.replace(/(,| |\\.)/g, ""));            totalTime+= getSeconds(time) * count;            //console.log(count + " " + shipName + "s @ " + cost);            productionCost += (cost * count);			//textBox.parentNode.nextSibling.value = "";        }    }    //console.log("total Time: "+getTimeDisplay(totalTime));    var fastProduction = document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.checked;    //console.info(fastProduction);    if(fastProduction)	{		productionCost *= 2;		totalTime /= 2;	}    //console.log("Text changed. Total production cost: " +productionCost);    var submitButton = document.evaluate(	    "//input[@type=\'submit\']",	    document,	    null,	    XPathResult.FIRST_ORDERED_NODE_TYPE,	    null).singleNodeValue;    if(productionCost > 0)		submitButton.value = "Submit";    else		submitButton.value = "Submit";}function registerTextBoxEventListeners(){    for(var i = 0;i < PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.info("Failed to find textBox for "+shipName+".");            continue;        }        textBox.addEventListener(\'keyup\',onProductionTextBoxKeyUp,false);		//textBox.addEventListener(\'blur\',onProductionTextBoxChanged,true);    }    document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'change\',onProductionTextBoxKeyUp,false);    //document.evaluate("//input[@type=\'reset\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'click\',onProductionTextBoxKeyUp,true);    document.evaluate("//form[@method=\'post\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'reset\',onProductionTextBoxKeyUp,false);}function productionHelperOnClick(num, box) {	num=num.replace("+", "")	num=num.replace(" ","")	num=num.replace("k","000")		document.getElementById(box).value = parseInt(document.getElementById(box).value) + parseInt(num);     calculateTotals();}function prodHelperEvent(e) {  if (e.shiftKey && (e.name == \'fast\')) {    for (i=0; i<empireLinks.length; i++) {    document.getElementById("fast_"+empireLinks[i]).checked = e.checked;    }  } else if (e.shiftKey && (e.name == \'unit\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("unit_"+empireLinks[i]).selectedIndex = e.selectedIndex;    }  } else if (e.shiftKey && (e.name == \'quant\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("quant_"+empireLinks[i]).value = e.value;    }  }  if ((e.name == \'fast\')||(e.name == \'unit\')||(e.name == \'quant\'))    calculateTotals();}function calculateTotals() {	var pcost = 0;  for (i=0; i<empireLinks.length; i++) {    n = (document.getElementById("fast_"+empireLinks[i]).checked) ? 2 : 1;    pcost += parseInt(ProductionGetCost[document.getElementById("unit_"+empireLinks[i]).selectedIndex] * document.getElementById("quant_"+empireLinks[i]).value * n);	}	document.getElementById(\'cost_all\').innerHTML = pcost+\' credits\';	var credits_left = parseInt(numcredits) - pcost;	document.getElementById(\'cost_all\').style.color = (credits_left < 0) ? \'red\' : \'\';}function resetForm() {  for (i=0; i<empireLinks.length; i++) {    document.getElementById("unit_"+empireLinks[i]).selectedIndex = 0;    document.getElementById("fast_"+empireLinks[i]).checked = false;    document.getElementById("quant_"+empireLinks[i]).value = 0;    returnto = i    calculateTotals();    i=returnto;  }}function startSubmitQueue() {  submitQueue(0);}function submitQueue(i) {    if (document.getElementById("quant_"+empireLinks[i]).value != 0) {      var postData = document.getElementById("unit_"+empireLinks[i]).value+"="+document.getElementById("quant_"+empireLinks[i]).value+"&post_back=true";      if (document.getElementById("fast_"+empireLinks[i]).checked)        postData += "&fast=true";      document.getElementById("quant_"+empireLinks[i]).value = \'ok\';      document.getElementById("quant_"+empireLinks[i]).style.backgroundColor = \'red\';      GM_xmlhttpRequest({        method: "POST",        url: serverurl+"base.aspx?base="+empireLinks[i]+"&view=production",        data: encodeURI(postData),        headers:{\'Content-type\':\'application/x-www-form-urlencoded\'},     		onreadystatechange: function(xhr) {if (xhr.readyState == "4") {endSubmitQueue(i, "1");}}      });    } else {      endSubmitQueue(i, "0");    }}function endSubmitQueue(i, value) {time=1000+Math.floor(Math.random()*1001)  if (i == empireLinks.length-1)    window.setTimeout(function(){ location.reload(true)}, time);  else  if(value == 0){  submitQueue(i+1)  }else{    window.setTimeout(function(){ submitQueue(i+1)}, time);    }}function productionHelper() {  var btn_details = [];  btn_details.push([1,\'+1 \']);  btn_details.push([5,\'+5 \']);  btn_details.push([10,\'+10 \']);  btn_details.push([25,\'+25 \']);  btn_details.push([100,\'+100 \']);  btn_details.push([250,\'+250 \']);  btn_details.push([1000,\'+1k \']);  table.rows[1].childNodes[4].innerHTML = \'Fast Prod\';  table.rows[1].childNodes[5].innerHTML = \'Unit Type\';  table.rows[1].childNodes[6].innerHTML = \'Quantity\';  table.rows[1].childNodes[3].innerHTML = \'Current Queue\';  a=0;  table.firstChild.style.display=\'none\';  for (i=2; i<table.rows.length; i=i+2) {    var currentRow = table.rows[i];		var res = /\\?base=((\\d|,| |\\.)+)/.exec(table.rows[i].childNodes[0].firstChild.href);	  table.rows[i+1].style.display = \'none\';	  empireLinks[a] = res[1];	  a++;	  currentRow.childNodes[3].innerHTML = currentRow.childNodes[5].innerHTML + "<br />" + table.rows[i+1].childNodes[3].innerHTML    currentRow.childNodes[4].innerHTML = "<input type=\'checkbox\' name=\'fast\' class=\'check\' id=\'fast_"+res[1]+"\' onfocus=\\"selectedBox=\'fast_"+res[1]+"\'\\" />";    currentRow.childNodes[6].innerHTML = "<input type=\'text\' name=\'quant\' class=\'quant\' id=\'quant_"+res[1]+"\' size=\'5\' maxlength=\'5\' value=\'0\' onfocus=\\"selectedBox=\'quant_"+res[1]+"\'\\" />";    var html = "<select name=\'unit\' id=\'unit_"+res[1]+"\' onfocus=\\"selectedBox=\'unit_"+res[1]+"\'\\"><option value=\'Fighters\'>Fighters</option><option value=\'Bombers\'>Bombers</option>";    html += "<option value=\'Heavy Bombers\'>Heavy Bombers</option><option value=\'Ion Bombers\'>Ion Bombers</option><option value=\'Corvette\'>Corvette</option>";    html += "<option value=\'Recycler\'>Recycler</option><option value=\'Destroyer\'>Destroyer</option><option value=\'Frigate\'>Frigate</option>"    html += "<option value=\'Ion Frigate\'>Ion Frigate</option><option value=\'Scout Ship\'>Scout Ship</option><option value=\'Outpost Ship\'>Outpost Ship</option>";    html += "<option value=\'Cruiser\'>Cruiser</option><option value=\'Carrier\'>Carrier</option><option value=\'Heavy Cruiser\'>Heavy Cruiser</option>";    html += "<option value=\'Battleship\'>Battleship</option><option value=\'Fleet Carrier\'>Fleet Carrier</option><option value=\'Dreadnought\'>Dreadnought</option>";    html += "<option value=\'Titan\'>Titan</option><option value=\'Leviathan\'>Leviathan</option><option value=\'Death Star\'>Death Star</option></select>";    currentRow.childNodes[5].innerHTML = html;    document.getElementById("unit_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("quant_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("fast_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    for(c=0; c<7; c++) {      var num = btn_details[c][0];      l = document.createElement("a");		l.href = "javascript:void(1);";		l.id= i + btn_details[c][1];		l.innerHTML = btn_details[c][1];            l.name = "quant_"+res[1];      currentRow.childNodes[6].appendChild(l);      document.getElementById(i + btn_details[c][1]).addEventListener(\'click\', function(){ productionHelperOnClick(this.innerHTML, this.name );}, true);    }  }  l = document.createElement("tr");  l.id="extrarow1";  table.appendChild(l);  l = document.createElement("td");		l.innerHTML = "0 credits";      l.className = \'help\';      l.align = "right";      l.id="cost_all"      document.getElementById("extrarow1").appendChild(l);      document.getElementById("cost_all").colSpan="7";      l = document.createElement("tr");      l.id="extrarow2";      table.appendChild(l);      l = document.createElement("td");      l.className = \'help\';      l.align = "right";          l.id="prodHelperButtons"      document.getElementById("extrarow2").appendChild(l);      document.getElementById("prodHelperButtons").colSpan="7";      l = document.createElement("input");      l.type = "reset";      l.id = "resetButton";      l.value = "Reset";      document.getElementById("prodHelperButtons").appendChild(l);      l = document.createElement("input");      l.type = "submit";      l.id = "submitButton";      l.value = "submit";      document.getElementById("prodHelperButtons").appendChild(l);   document.getElementById("submitButton").addEventListener(\'click\', function(){ startSubmitQueue();}, true);  document.getElementById("resetButton").addEventListener(\'click\', function(){ resetForm();}, true);}function productionHelperButton() {		table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;		var prodTitle = table.childNodes[1].childNodes[5];		scoutButton = document.createElement("a");		scoutButton.href = "javascript:void(1);";		scoutButton.id= "prodHelperButton";		scoutButton.innerHTML=" [&#177;]";		scoutButton.title = "Production Helper"		prodTitle.appendChild(scoutButton)		document.getElementById(\'prodHelperButton\').addEventListener(\'click\', function() {productionHelper();}, true);	}function saveTechData(){    //console.log("Saving tech data");    var techData = new Array();    var rows = document.evaluate(    "//tr[@align=\'center\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log("Tech rows: "+ rows.snapshotLength);    for (var i = 0; i < rows.snapshotLength; i++)    {        var techNameCell = document.evaluate(        "th[1]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        var techValueCell = document.evaluate(        "td[4]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        if(techNameCell.snapshotLength > 0)        {            var techValue = parseInt(techValueCell.snapshotItem(0).innerHTML.replace(/(,| |\\.)/g, ""));            var techName = techNameCell.snapshotItem(0).innerHTML;            //console.log(techName +": "+techValue);            techData[i] = techValue;        }    }    GM_setValue(server+"techData",techData.join());}/* function scannerGrab(){tableArray = document.getElementsByTagName("table")for(i=0; i<tableArray.length; i++){if(tableArray[i].innerHTML.match(/<th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=fleet">Fleet<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=player">Player<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=destination">Destination<\\/a><\\/th><th width="20%"><a href="empire.aspx\\?view=scanners&amp;order=arrival">Arrival<\\/a><\\/th><th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=size">Size<\\/a><\\/th>/)){table = tableArray[i]fleetId = []fleetName = []fleetOwner = []ownerId = []fleetDest = []fleetArrive = []fleetSize = []for(a=1; a<table.rows.length; a++){fleetId[a-1] = table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=/, "") fleetId[a-1] = fleetId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetName[a-1]=table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetName[a-1]=fleetName[a-1].replace(/<\\/a>/, "");fleetOwner[a-1]=table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=[0-9]{1,}">/, "")fleetOwner[a-1]=fleetOwner[a-1].replace(/<\\/a>/, "");ownerId[a-1] =table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=/, "")ownerId[a-1] = ownerId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetDest[a-1]=table.rows[a].childNodes[2].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)fleetArrive[a-1]=parseInt(table.rows[a].childNodes[3].title)+Math.round(new Date().getTime()/1000.0)fleetSize[a-1]=table.rows[a].childNodes[4].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetSize[a-1]=fleetSize[a-1].replace(/<\\/a>(.*?)/, "");fleetSize[a-1]=fleetSize[a-1].replace(/(,| |.)/, "");}sendData = "&fleetId="+fleetId+"&fleetName="+fleetName+"&fleetOwner="+fleetOwner+"&ownerId="+ownerId+"&fleetDest="+fleetDest+"&fleetArrive="+fleetArrive+"&fleetSize="+fleetSize+"&seenBy="+document.getElementById(\'account\').parentNode.childNodes[1].innerHTML.replace(/[A-Za-z]./, \'\')if(GIAServers.inArray(server)){sendtoserver(sendData, "scanners.php")}}}}*/// If NS -- that is, !IE -- then set up for mouse capturedocument.captureEvents(Event.MOUSEMOVE)// Set-up to use getMouseXY function onMouseMovedocument.addEventListener("mousemove", function(e) {getMouseXY(e)}, true);// Temporary variables to hold mouse x-y pos.svar tempX = 0var tempY = 0// Main function to retrieve mouse x-y pos.sfunction getMouseXY(e) {// grab the x-y pos.s if browser is NS    tempX = e.pageX    tempY = e.pageY  // catch possible negative values in NS4  if (tempX < 0){tempX = 0}  if (tempY < 0){tempY = 0}  // show the position values in the form named Show  // in the text fields named MouseX and MouseY  return true}function linkEventListeners(){if(GIAServers.inArray(server)){linkArray=document.getElementsByTagName("a")for(i=0; i<linkArray.length; i++){if(linkArray[i].href.match(/map.aspx\\?(.*?)loc=E[0-9]{2}:[0-9]{2}:[0-9]{2}/)){linkArray[i].addEventListener("mouseover", function(e) {showBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""), tempX, tempY)}, true);linkArray[i].addEventListener("mouseout", function() {hideBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""))}, true);}}}}function linkChange(){	linkArray=document.getElementsByTagName(\'a\')	for(i=0; i < linkArray.length; i++){		linkArray[i].target = "_blank"	}}  ////////////////////////////////////////// /// Execution //////////////////////////////////////////////////////////////////////if(document.location.href.match(/astroempires.com/)){replaceTime();if(document.location.href.match(/loc=[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){	if(document.body.innerHTML.match(/<th colspan=.4.>Base<\\/th>/)){	if(GIAServers.inArray(server)){	centerArray=document.getElementsByTagName(\'center\')	for(i=0; i<centerArray.length; i++){	if(centerArray[i].innerHTML.match(/Astro Type:/)){	baseLink = document.body.innerHTML.match(/base.aspx\\?base=[0-9]{1,}/)[0]	sourceDiv = document.createElement("div")	sourceDiv.id="baseDiv";	sourceDiv.innerHTML="Visit the <a href=\\""+baseLink+"\\">base page</a> to add this base to GIA.<br /><br />";	centerArray[i].appendChild(sourceDiv)	}	}	}	}}else if(document.location.href.match(/[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}/)){	debrisShow()}else if(document.location.href.match(/http:\\/\\/(.+?)\\.astroempires\\.com\\/base\\.aspx\\?base=[0-9]{1,}$/)){	if(window.parent.document.location.href != document.location.href){	baseDetails();	}}else if(document.location.href.match(/empire.aspx$/) || document.location.href.match(/empire.aspx\\?view=bases_events$/)){	productionHelperButton();}else if(document.location.href.match(/view=scanners/)){	scannerFormat();}else if(window.location.href.match(/empire.aspx\\?view=fleets/)){        sumShips();}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=structures/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=defenses/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){	if(!document.location.href.match(/&info=/)){enhanceConstructionPage();}}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=production/)){insertTimeTextBoxes()}if(window.location.href.indexOf(\'view=move\')==-1 && window.location.href.indexOf(\'view=fleets\')==-1 &&		window.location.href.indexOf(\'view=production\')==-1 && window.location.href.indexOf(\'view=structures\')==-1 &&		window.location.href.indexOf(\'view=trade\')==-1 && window.location.href.indexOf(\'view=research\')==-1){		formatVariousNumbers();	}	}'
                                                         }, 'Mojo::Asset::Memory' ),
                                       'events' => {
                                                     'read' => [
                                                                 $VAR1->{'content'}{'read'}
                                                               ]
                                                   },
                                       'buffer' => '',
                                       'headers' => bless( {
                                                             'normalcase' => {
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-real-ip' => 'X-REAL-IP'
                                                                             },
                                                             'headers' => {
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ],
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'content-length' => [
                                                                                                  '63681'
                                                                                                ],
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ]
                                                                          }
                                                           }, 'Mojo::Headers' ),
                                       'size' => 63681,
                                       'real_size' => 63681,
                                       'auto_upgrade' => 1
                                     }, 'Mojo::Content::Single' )
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:56:46 2014] [debug] 200 OK (0.106334s, 9.404/s).
[Wed Oct 22 13:59:46 2014] [debug] $VAR1 = [];

[Wed Oct 22 13:59:46 2014] [debug] POST "/ae/gia".
[Wed Oct 22 13:59:46 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 13:59:46 2014] [debug] $VAR1 = bless( {
                 'max_message_size' => 10485760,
                 'version' => '1.0',
                 'events' => {},
                 'buffer' => '',
                 'env' => {
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'HTTP_ACCEPT' => '*/*',
                            'psgix.input.buffered' => 1,
                            'QUERY_STRING' => '',
                            'HTTP_HOST' => 'localhost',
                            'CONTENT_LENGTH' => '63681',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'REQUEST_METHOD' => 'POST',
                            'SERVER_NAME' => 0,
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'psgi.multithread' => '',
                            'PATH_INFO' => '/ae/gia',
                            'psgi.errors' => *::STDERR,
                            'psgi.nonblocking' => '',
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'psgi.multiprocess' => '',
                            'HTTP_CONNECTION' => 'close',
                            'psgi.run_once' => '',
                            'SERVER_PORT' => 5000,
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'psgix.io' => bless( \*Symbol::GEN2, 'IO::Socket::INET' ),
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'psgi.streaming' => 1,
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'SCRIPT_NAME' => '',
                            'psgix.harakiri' => 1,
                            'REMOTE_ADDR' => '127.0.0.1',
                            'REMOTE_PORT' => 54493,
                            'psgi.input' => bless( \*{'Stream::Buffered::PerlIO::$io'}, 'FileHandle' ),
                            'psgi.url_scheme' => 'http',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'REQUEST_URI' => '/ae/gia'
                          },
                 'raw_size' => 0,
                 'state' => 'finished',
                 'finished' => 1,
                 'url' => bless( {
                                   'base' => bless( {
                                                      'host' => 'localhost',
                                                      'port' => '',
                                                      'scheme' => 'HTTP',
                                                      'path' => bless( {
                                                                         'leading_slash' => '',
                                                                         'trailing_slash' => '',
                                                                         'charset' => 'UTF-8',
                                                                         'parts' => []
                                                                       }, 'Mojo::Path' )
                                                    }, 'Mojo::URL' ),
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia'
                                                    }, 'Mojo::Path' )
                                 }, 'Mojo::URL' ),
                 'method' => 'POST',
                 'content' => bless( {
                                       'read' => sub { "DUMMY" },
                                       'body' => 2,
                                       'state' => 'finished',
                                       'raw_size' => 63681,
                                       'real_size' => 63681,
                                       'size' => 63681,
                                       'auto_upgrade' => 1,
                                       'headers' => bless( {
                                                             'normalcase' => {
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-real-ip' => 'X-REAL-IP'
                                                                             },
                                                             'headers' => {
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'content-length' => [
                                                                                                  '63681'
                                                                                                ],
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ],
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ]
                                                                          }
                                                           }, 'Mojo::Headers' ),
                                       'pre_buffer' => '',
                                       'asset' => bless( {
                                                           'max_memory_size' => 262144,
                                                           'auto_upgrade' => 1,
                                                           'content' => '// ==UserScript==// @name           GIA Script (Modified)// @author          Luke Bonaccorsi AKA SpeedySurfer// @namespace       http://gears.speedysurfer.co.uk// @description     Scouts for bases in the current region// @license         Creative Commons Attribution License// @include        http://*.astroempires.com/*// @exclude        http://*.astroempires.com/login.aspx// @exclude        http://*.astroempires.com/home.aspx// ==/UserScript==/* * This file is a Greasemonkey user script. To install it, you need  * the Firefox plugin "Greasemonkey" (URL: http://greasemonkey.mozdev.org/) * After you installed the extension, restart Firefox and revisit  * this script. Now you will see a new menu item "Install User Script" * in your tools menu. *  * To uninstall this script, go to your "Tools" menu and select  * "Manage User Scripts", then select this script from the list * and click uninstall :-) * * Creative Commons Attribution License (--> or Public Domain) * http://creativecommons.org/licenses/by/2.5/*/  ////////////////////////////////////////// /// Variables //////////////////////////////////////////////////////////////////////if (document.location.href.match(/(.+?)astroempires.com/)){var server=document.location.href.match(/\\/(.+?).astroempires.com/)[1]server = server.replace(/\\//, "")var serverurl= "http://"+server+".astroempires.com/"}if(document.location.href.match(/astroempires.com/)){var empireLinks = []; var ProductionGetCost = [5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000]; var numcredits = document.evaluate(    "/html/body/table/tbody/tr/th/table/tbody/tr[2]/th[2]",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    numcredits = numcredits.snapshotItem(0).innerHTML;var FT_INDEX = 0;var BO_INDEX = 1;var HB_INDEX = 2;var IB_INDEX = 3;var CV_INDEX = 4;var RC_INDEX = 5;var DE_INDEX = 6;var FR_INDEX = 7;var IF_INDEX = 8;var SS_INDEX = 9;var OS_INDEX = 10;var CR_INDEX = 11;var CA_INDEX = 12;var HC_INDEX = 13;var BC_INDEX = 14;var FC_INDEX = 15;var DN_INDEX = 16;var TI_INDEX = 17;var LE_INDEX = 18;var DS_INDEX = 19;var BARRACKS_INDEX = 20;var LASER_TURRETS_INDEX = 21;var MISSLE_TURRETS_INDEX = 22;var PLASMA_TURRENTS_INDEX = 23;var ION_TURRETS_INDEX = 24;var PHOTON_TURRETS_INDEX = 25;var DISRUPTOR_TURRETS_INDEX = 26;var DEFLECTION_SHIELDS_INDEX = 27;var PLANETARY_SHIELD_INDEX = 28;var PLANETARY_RING_INDEX = 29;var fightingShips = "11111011100101101111";var shipValues = new Array(5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000);var shipHangarValues = new Array(0,0,0,0,0,0,0,4,4,0,0,4,60,8,40,400,200,1000,4000,10000);var GIAServers = new Array("bravo");}  ////////////////////////////////////////// /// Misc /////////////////////////////////////////////////////////////////////////Array.prototype.inArray = function (value)// Returns true if the passed value is found in the// array. Returns false if it is not.{var i;for (i=0; i < this.length; i++) {// Matches identical (===), not just similar (==).if (this[i] === value) {return true;}}return false;};function replaceTime(){	  for(n=1;n<=500;n++)	  {		elem=document.getElementById(\'time\'+n);	    if (!elem)	    {	       break;	    }	    elem.id = \'blah\'+n;	    s=elem.title;	    var newElement, endTime;	    var d = new Date();	    var now = new Date();	    if (elem)	    {	       if(s<=0)	       {		 endTime="-"	       }	       else	       {		 d.setTime(d.getTime()+(s*1000));		 tempdate = new Date();		 tempdate.setDate(tempdate.getDate()+1)		 if(now.toLocaleDateString() == d.toLocaleDateString() )		 {		    endTime="Today @ "+d.formatDate(\'H:i:s\');		 }		 else if(tempdate.toLocaleDateString() == d.toLocaleDateString())		 {		    endTime="Tomorrow @ "+d.formatDate(\'H:i:s\');		 }		 else		 {		    endTime=d.formatDate(\'D jS M @ H:i:s\');		 }	       }	       elem.innerHTML = "<b><span id=\'time"+n+"\' title=\'"+ s +"\'>-</span></b><br><nobr><span id=\'done"+n+"\' style=\'font-size: xx-small; color: "+getAgeCol(s)+"\'>" + endTime + "</span></nobr>"	    }	  }};  // formatDate :// a PHP date like function, for formatting date strings// authored by Svend Tofte <www.svendtofte.com>// the code is in the public domain//// see http://www.svendtofte.com/javascript/javascript-date-string-formatting/// and http://www.php.net/date//// thanks to//  - Daniel Berlin <mail@daniel-berlin.de>,//    major overhaul and improvements//  - Matt Bannon,//    correcting some stupid bugs in my days-in-the-months list!//  - levon ghazaryan. pointing out an error in z switch.//  - Andy Pemberton. pointing out error in c switch//// input : format string// time : epoch time (seconds, and optional)//// if time is not passed, formatting is based on// the current "this" date object\'s set time.//// supported switches are// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L),// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z//// unsupported (as compared to date in PHP 5.1.3)// T, e, oDate.prototype.formatDate = function (input,time) {    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday",                       "Thursday", "Friday", "Saturday"];    var daysShort =   ["Sun", "Mon", "Tue", "Wed",                       "Thu", "Fri", "Sat"];    var monthsShort = ["Jan", "Feb", "Mar", "Apr",                       "May", "Jun", "Jul", "Aug", "Sep",                       "Oct", "Nov", "Dec"];    var monthsLong =  ["January", "February", "March", "April",                       "May", "June", "July", "August", "September",                       "October", "November", "December"];    var switches = { // switches object        a : function () {            // Lowercase Ante meridiem and Post meridiem            return date.getHours() > 11? "pm" : "am";        },        A : function () {            // Uppercase Ante meridiem and Post meridiem            return (this.a().toUpperCase ());        },        B : function (){            // Swatch internet time. code simply grabbed from ppk,            // since I was feeling lazy:            // http://www.xs4all.nl/~ppk/js/beat.html            var off = (date.getTimezoneOffset() + 60)*60;            var theSeconds = (date.getHours() * 3600) +                             (date.getMinutes() * 60) +                              date.getSeconds() + off;            var beat = Math.floor(theSeconds/86.4);            if (beat > 1000) beat -= 1000;            if (beat < 0) beat += 1000;            if ((String(beat)).length == 1) beat = "00"+beat;            if ((String(beat)).length == 2) beat = "0"+beat;            return beat;        },        c : function () {            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" +                    this.H() + ":" + this.i() + ":" + this.s() + this.P());        },        d : function () {            // Day of the month, 2 digits with leading zeros            var j = String(this.j());            return (j.length == 1 ? "0"+j : j);        },        D : function () {            // A textual representation of a day, three letters            return daysShort[date.getDay()];        },        F : function () {            // A full textual representation of a month            return monthsLong[date.getMonth()];        },        g : function () {           // 12-hour format of an hour without leading zeros, 1 through 12!           if (date.getHours() == 0) {               return 12;           } else {               return date.getHours()>12 ? date.getHours()-12 : date.getHours();           }       },        G : function () {            // 24-hour format of an hour without leading zeros            return date.getHours();        },        h : function () {            // 12-hour format of an hour with leading zeros            var g = String(this.g());            return (g.length == 1 ? "0"+g : g);        },        H : function () {            // 24-hour format of an hour with leading zeros            var G = String(this.G());            return (G.length == 1 ? "0"+G : G);        },        i : function () {            // Minutes with leading zeros            var min = String (date.getMinutes ());            return (min.length == 1 ? "0" + min : min);        },        I : function () {            // Whether or not the date is in daylight saving time (DST)            // note that this has no bearing in actual DST mechanics,            // and is just a pure guess. buyer beware.            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");            return (noDST.getTimezoneOffset () ==                    date.getTimezoneOffset () ? 0 : 1);        },        j : function () {            // Day of the month without leading zeros            return date.getDate();        },        l : function () {            // A full textual representation of the day of the week            return daysLong[date.getDay()];        },        L : function () {            // leap year or not. 1 if leap year, 0 if not.            // the logic should match iso\'s 8601 standard.            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html            var Y = this.Y();            if (                (Y % 4 == 0 && Y % 100 != 0) ||                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)                ) {                return 1;            } else {                return 0;            }        },        m : function () {            // Numeric representation of a month, with leading zeros            var n = String(this.n());            return (n.length == 1 ? "0"+n : n);        },        M : function () {            // A short textual representation of a month, three letters            return monthsShort[date.getMonth()];        },        n : function () {            // Numeric representation of a month, without leading zeros            return date.getMonth()+1;        },        N : function () {            // ISO-8601 numeric representation of the day of the week            var w = this.w();            return (w == 0 ? 7 : w);        },        O : function () {            // Difference to Greenwich time (GMT) in hours            var os = Math.abs(date.getTimezoneOffset());            var h = String(Math.floor(os/60));            var m = String(os%60);            h.length == 1? h = "0"+h:1;            m.length == 1? m = "0"+m:1;            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;        },        P : function () {            // Difference to GMT, with colon between hours and minutes            var O = this.O();            return (O.substr(0, 3) + ":" + O.substr(3, 2));        },        r : function () {            // RFC 822 formatted date            var r; // result            //  Thu         ,     21               Dec              2000            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +            //    16          :    01          :    07               0200            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();            return r;        },        s : function () {            // Seconds, with leading zeros            var sec = String (date.getSeconds ());            return (sec.length == 1 ? "0" + sec : sec);        },        S : function () {            // English ordinal suffix for the day of the month, 2 characters            switch (date.getDate ()) {                case  1: return ("st");                case  2: return ("nd");                case  3: return ("rd");                case 21: return ("st");                case 22: return ("nd");                case 23: return ("rd");                case 31: return ("st");                default: return ("th");            }        },        t : function () {            // thanks to Matt Bannon for some much needed code-fixes here!            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];            if (this.L()==1 && this.n()==2) return 29; // ~leap day            return daysinmonths[this.n()];        },        U : function () {            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)            return Math.round(date.getTime()/1000);        },        w : function () {            // Numeric representation of the day of the week            return date.getDay();        },        W : function () {            // Weeknumber, as per ISO specification:            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            var DoW = this.N ();            var DoY = this.z ();            // If the day is 3 days before New Year\'s Eve and is Thursday or earlier,            // it\'s week 1 of next year.            var daysToNY = 364 + this.L () - DoY;            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {                return 1;            }            // If the day is within 3 days after New Year\'s Eve and is Friday or later,            // it belongs to the old year.            if (DoY <= 2 && DoW >= 5) {                return new Date (this.Y () - 1, 11, 31).formatDate ("W");            }            var nyDoW = new Date (this.Y (), 0, 1).getDay ();            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier                return (1 + Math.floor ((DoY + nyDoW) / 7));            } else {  // First day of the year is a Friday or later                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));            }        },        y : function () {            // A two-digit representation of a year            var y = String(this.Y());            return y.substring(y.length-2,y.length);        },        Y : function () {            // A full numeric representation of a year, 4 digits            // we first check, if getFullYear is supported. if it            // is, we just use that. ppks code is nice, but wont            // work with dates outside 1900-2038, or something like that            if (date.getFullYear) {                var newDate = new Date("January 1 2001 00:00:00 +0000");                var x = newDate .getFullYear();                if (x == 2001) {                    // i trust the method now                    return date.getFullYear();                }            }            // else, do this:            // codes thanks to ppk:            // http://www.xs4all.nl/~ppk/js/introdate.html            var x = date.getYear();            var y = x % 100;            y += (y < 38) ? 2000 : 1900;            return y;        },        z : function () {            // The day of the year, zero indexed! 0 through 366            var s = "January 1 " + this.Y() + " 00:00:00 GMT" + this.O();            var t = new Date(s);            var diff = date.getTime() - t.getTime();            return Math.floor(diff/1000/60/60/24);        },        Z : function () {            // Timezone offset in seconds            return (date.getTimezoneOffset () * -60);        }    }    function getSwitch(str) {        if (switches[str] != undefined) {            return switches[str]();        } else {            return str;        }    }    var date;    if (time) {        var date = new Date (time);    } else {        var date = this;    }    var formatString = input.split("");    var i = 0;    while (i < formatString.length) {        if (formatString[i] == "%") {            // this is our way of allowing users to escape stuff            formatString.splice(i,1);        } else {            formatString[i] = getSwitch(formatString[i]);        }        i++;    }    return formatString.join("");}// Some (not all) predefined format strings from PHP 5.1.1, which// offer standard date representations.// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants//// Atom      "2005-08-15T15:52:01+00:00"Date.DATE_ATOM    = "Y-m-d%TH:i:sP";// ISO-8601  "2005-08-15T15:52:01+0000"Date.DATE_ISO8601 = "Y-m-d%TH:i:sO";// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"Date.DATE_RFC2822 = "D, d M Y H:i:s O";// W3C       "2005-08-15 15:52:01+00:00"Date.DATE_W3C     = "Y-m-d%TH:i:sP";function getAgeCol(age) {		var col = \'#461B7E\'; // 72 hours +		if (age <= 3600)			col = \'#FFFFFF\'; // 1 hour		else if (age <=10800)			col = \'#FFFFFF\'; // 3 hours		else if (age <=21600)			col = \'#9E7BFF\'; // 6 hours		else if (age <=43200)			col = \'#9172EC\'; // 12 hours		else if (age <=86400)			col = \'#8467D7\'; // 24 hours		else if (age <=172800)			col = \'#7A5DC7\'; // 48 hours		else if (age <=259200)			col = \'#461B7E\'; // 72 hours		return col;}function debrisShow(){	spanArray = document.getElementsByTagName("span")	for(i=0; i<spanArray.length; i++){		if(spanArray[i].getAttribute("class") == "gray"){		spanArray[i].innerHTML = spanArray[i].title		}	}}function formatVariousNumbers(){	var debrisElement = document.evaluate(    "//center[contains(text(),\'Debris\')]",    document,    null,    XPathResult.FIRST_ORDERED_NODE_TYPE,    null).singleNodeValue;    if(debrisElement !=null)    {        var debrisMessage = debrisElement.textContent;        console.log(debrisMessage);        var indexOfText = debrisMessage.indexOf(" credits");        var valueText = debrisMessage.substring(0,indexOfText);        var value = commaFormat(parseInt(valueText));        //console.log(valueText+" new value:" +value.toString());        //console.log(debrisElement.textContent + " -< " + debrisElement.textContent.replace(valueText,value.toString()));        debrisElement.textContent = debrisElement.textContent.replace(valueText,value.toString());    }}function scannerFormat(){	baseArray=document.getElementsByTagName("a")	bases = GM_getValue(server+"Bases")	for(i=0; i<baseArray.length; i++){		if(baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){			basecoord=baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)			if(bases.match(basecoord)){			baseArray[i].setAttribute("style", "color: red; font-weight: normal;")			}		}	}}var galaxyInfoArrays = new Array();function getGalaxyInfoArray(galaxy){	if(galaxyInfoArrays[galaxy]==undefined)	{		var newArray = new Array(20);		for(var i = 0; i < 20;i++)		{			newArray[i] = 0;		}		galaxyInfoArrays[galaxy] = new Array(galaxy,0,newArray,0,0);//[galaxy number],[mobile fleet count],[mobilefleetarray],[total fighting fleet],[total fleet],	}	return galaxyInfoArrays[galaxy];}function isBase(base){	bases = GM_getValue(server+"Bases")    if(bases==null)    return false;    if(bases.match(base)){        return true;    }else{    return false;	}}function insertTotalsRow(node,sums,mobileSums,fleetCount,mobileFleetCount,overallFleetTotal,overallFightingFleetTotal,overallMobileFleetTotal,overallMobileFightingFleetTotal){    	//GALAXY ROWS	for(var i = 0;i<galaxyInfoArrays.length;i++)	{		var galaxyInfoArray = galaxyInfoArrays[i];		if(galaxyInfoArray==undefined || galaxyInfoArray[1] == 0)			continue;				var sumRow = document.createElement("tr");	    sumRow.setAttribute(\'align\',\'center\');	    	    var element = sumRow.insertCell(0);	    element.textContent = "Mobile Fleets ("+i+")";	    element = sumRow.insertCell(1);	    element.textContent = galaxyInfoArray[1];	    		var galaxyFleetSums = galaxyInfoArray[2];		for(var k = 0; k < 20; k++)	    {	        //console.log(sums[k]);	        var cell = document.createElement("td");	        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	        if(galaxyFleetSums[k] > 0)				cell.innerHTML = "<small>"+galaxyFleetSums[k]+"</small>";	        //console.log(element);	        sumRow.insertBefore(cell,null);	    }	    //Add totals cell	    var cell = document.createElement("td");	    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	    cell.innerHTML =galaxyInfoArray[3] +" / "+ galaxyInfoArray[4];	    //console.log(element);	    sumRow.insertBefore(cell,null);	    node.insertBefore(sumRow,null);	}	//MOBILE ROW	var sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    var element = sumRow.insertCell(0);    element.textContent = "Total Mobile Fleets";    element = sumRow.insertCell(1);    element.textContent = mobileFleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(mobileSums[k] > 0)			cell.innerHTML = "<small>"+mobileSums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallMobileFightingFleetTotal +" / "+ overallMobileFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);    //TOTAL ROW    sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    element = sumRow.insertCell(0);    element.textContent = "Total Fleets";    element = sumRow.insertCell(1);    element.textContent = fleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(sums[k] > 0)			cell.innerHTML = "<small>"+sums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallFightingFleetTotal +" / "+ overallFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);}function node(opt) {  function attr(name) {    var value = opt[name];    delete opt[name];    return value;  }  var expandos = { id: 1, className: 1, title: 1, type: 1, checked: 1 };  var id = opt.id;  var n = document.getElementById(id);  if (!n) {    var tag = attr("tag") || "div";    if ("string" == typeof tag)      n = document.createElement(tag);    else {      var t = document.createElement("div");      t.innerHTML = tag.toXMLString();      var ids = {};      for each (var n in $x(\'.//*[@id]\', t))        ids[n.id] = 1;      if (!n) ids = null;      var r = document.createRange();      r.selectNodeContents(t);      n = r.extractContents();      if (n.childNodes.length == 1)        n = n.firstChild;    }    var after = attr("after");    var before = opt.prepend ? opt.prepend.firstChild : attr("before");    var parent = attr("prepend") || attr("append") ||                   (before || after || {}).parentNode;    if (parent) {      if (before)        parent.insertBefore(n, before);      else if (after)        parent.insertBefore(n, after.nextSibling);      else        parent.appendChild(n);    }    if (id) n.id = id;  }  var html = attr("html");  if ("undefined" != typeof html) n.innerHTML = html;  var text = attr("text");  if ("undefined" != typeof text) n.textContent = text;  var style = attr("style");  if (style)    for (var prop in style)      n.style[prop] = style[prop];  for (prop in opt)    if (expandos[prop])      n[prop] = opt[prop];    else      n.setAttribute(prop, opt[prop]+"");  if (ids)    for (var id in ids)      ids[id] = document.getElementById(id);  return ids || n;}function enhanceConstructionPage() {  urbanAdjust = 0;  solarAdjust = 0;  gasAdjust = 0;  fusionAdjust = 0;  antimatterAdjust = 0;  researchAdjust = 0;  metalAdjust = 0;  crystalAdjust = 0;  roboticsAdjust = 0;  shipyardsAdjust = 0;  osAdjust = 0;  spaceportsAdjust = 0;  ccAdjust = 0;  naniteAdjust = 0;  androidAdjust = 0;  economicAdjust = 0;  terraformAdjust = 0;  mlpAdjust = 0;  orbitalbaseAdjust = 0;  jgAdjust = 0;  biosphereAdjust = 0;  capitalAdjust = 0;  barrackAdjust = 0;  laserAdjust = 0;  missileAdjust = 0;  plasmabaseAdjust = 0;  ionAdjust = 0;  photonAdjust = 0;  disruptorAdjust = 0;  deflectionAdjust = 0;  pshieldAdjust = 0;  pringAdjust = 0;  tableArray = document.getElementsByTagName("table")  for(i=0; i<tableArray.length; i++){  if(tableArray[i].innerHTML.match(/<th colspan=.2.>Construction Queue<.th>/)){  for(a=1; a<tableArray[i].childNodes[0].childNodes.length; a++){  if(!tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/<select name=.add_stack.>/)){  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Urban Structures/))  urbanAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Solar Plants/))  solarAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Gas Plants/))  gasAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Fusion Plants/))  fusionAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Antimatter Plants/))  antimatterAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Research Labs/))  researchAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Metal Refineries/))  metalAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Crystal Mines/))  crystalAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Robotic Factories/))  roboticsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Shipyards/) && !tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  shipyardsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  osAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Spaceports/))  spaceportsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Command Centers/))  ccAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Nanite Factories/))  naniteAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Androids Factories/))  androidAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Economic Centers/))  economicAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Terraform/))  terraformAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Multi-Level Platforms/))  mlpAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Base/))  orbitalbaseAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Jump Gate/))  jgAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Biosphere Modification/))  biosphereAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Capital/))  capitalAdjust++;}  }  }  }	table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;	var i_lastcolumn = 5;	var forms = document.getElementsByTagName(\'form\');	if (!table.innerHTML.match(/The research of this base is linked to/)){	if (table && table.childNodes.length > 4) {		table.childNodes[0].style.display=\'none\';		table.childNodes[2].style.display=\'none\';		for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {			if(!table.childNodes[nrow].innerHTML.match(/Research Labs linked to this base research./)){			table.childNodes[nrow+1].style.display=\'none\';			}		}	}	techmultipliers=GM_getValue(server+"techData", "0").split(",")	var energytechmultiplier = (techmultipliers[0]*0.05)+1;	var averageroute = GM_getValue(server+"averageRoute", "31");	var fertility = 0;	var uspopcost = 0;	var obpopcost = 0;	var obcostparentnode = 0;	var popcost = 0;	var areacost = 0;	var energycost = 0;	var econcost = 0;	var prodcost = 0;	var constcost = 0;	var flag = 0;	var bestAreaSignifier = node({tag: \'span\', html: \' <br /> (Best Area)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEconSignifier = node({tag: \'span\', html: \' <br /> (Best Econ)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestProdSignifier = node({tag: \'span\', html: \' <br /> (Best Prod)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestConstSignifier = node({tag: \'span\', html: \' <br /> (Best Const)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestPopSignifier = node({tag: \'span\', html: \' <br /> (Best Pop)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEnergySignifier = node({tag: \'span\', html: \' <br /> (Best Energy)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {		if(!table.childNodes[nrow].innerHTML.match(/linked to this base research./)){		var cname = table.childNodes[nrow].childNodes[1].firstChild.firstChild.firstChild.firstChild.nodeValue + table.childNodes[nrow].childNodes[1].firstChild.firstChild.childNodes[1].nodeValue;		if (location.search.indexOf(\'view=structures\')!=-1) {			table.childNodes[nrow].title = cname;			var td1help_res = table.childNodes[nrow+1].innerHTML.match(/(fertility|metal resource|crystals resource).\\((.+?)\\)/)			if (td1help_res) {			if (flag == 0){				if(td1help_res[1]=="fertility"){				var td1help = "&nbsp;(Fert "+td1help_res[2]+")"				}else if(td1help_res[1]=="metal resource"){				var td1help = "&nbsp;(Metal "+td1help_res[2]+")"				}else if(td1help_res[1]=="crystals resource"){				var td1help = "&nbsp;(Crystal "+td1help_res[2]+")"				}				var d = table.childNodes[nrow].childNodes[1].innerHTML + td1help;				table.childNodes[nrow].childNodes[1].innerHTML = d				}			}				if (cname==\'Terraform\') {				makeAdjustments(nrow, terraformAdjust)				terracost = parseInt(itemcost) / 5;					if(areacost == 0 || areacost > terracost){					areacost = terracost					table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Multi-Level Platforms\') {				adjust = mlpAdjust				makeAdjustments(nrow, mlpAdjust)					var cost = parseInt(itemcost) / 10;					if (cost < areacost) {						areacost = cost;						bestAreaSignifier.parentNode.removeChild(bestAreaSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Urban Structures\') {				makeAdjustments(nrow, urbanAdjust)          USLevel = table.childNodes[nrow].childNodes[1].innerHTML.match(/\\(Level [0-9]{1,}/);          USLevel = parseInt(USLevel[0].replace(/\\(Level /, ""));					fertility = parseInt(td1help_res[2]);					uspopcost = parseInt(itemcost);					uspopcost = (uspopcost+areacost) / fertility;					if (popcost == 0 || popcost > uspopcost){					popcost = uspopcost;					table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);					}				}				if (cname==\'Orbital Base\') {				makeAdjustments(nrow, orbitalbaseAdjust)					obpopcost = parseInt(itemcost) / 10;					obcostparentnode = table.childNodes[nrow].childNodes[2];					if (obpopcost && obpopcost < popcost) {						popcost = obpopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);								}				}								if (cname==\'Solar Plants\' || cname==\'Gas Plants\' || cname==\'Fusion Plants\' || cname==\'Antimatter Plants\') {				if(cname==\'Solar Plants\'){				adjust = solarAdjust				}else if(cname==\'Gas Plants\'){				adjust = gasAdjust				}else if(cname==\'Fusion Plants\'){				adjust = fusionAdjust				}else if(cname==\'Antimatter Plants\'){				adjust = antimatterAdjust				}makeAdjustments(nrow, adjust)					var c = parseInt(itemcost);					var e = parseInt(table.childNodes[nrow].childNodes[3].firstChild.nodeValue.slice(1));					c = (c + popcost + areacost) / (energytechmultiplier*e);					if (e>2){					if (!energycost)						energycost = c;					if (c <= energycost) {						energycost = c;						if (bestEnergySignifier.parentNode)							bestEnergySignifier.parentNode.removeChild(bestEnergySignifier);							table.childNodes[nrow].childNodes[2].appendChild(bestEnergySignifier);					}					}				}				if (cname == "Biosphere Modification"){makeAdjustments(nrow, biosphereAdjust)          var biopopcost = parseInt(itemcost);					biopopcost = (biopopcost+(24*energycost)+areacost)/USLevel										if (biopopcost < popcost) {						popcost = biopopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);																	}				}				if (cname == "Metal Refineries"){				makeAdjustments(nrow, metalAdjust)				var metal = parseInt(td1help_res[2]);				var metalcost = parseInt(itemcost);				metalprodcost = (metalcost + energycost + areacost + popcost)/ metal				metalconstcost = (metalcost + energycost + areacost + popcost)/ metal				metaleconcost = (metalcost + energycost + areacost + popcost)          	if(econcost == 0 || econcost > metaleconcost){          	econcost = metaleconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost == 0 || prodcost > metalprodcost){          	prodcost = metalprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost == 0 || constcost > metalconstcost){          	constcost = metalconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Crystals Mines"){				makeAdjustments(nrow, crystalAdjust)				var crystals = parseInt(td1help_res[2]);				var crystalcost = parseInt(itemcost);				crystalcost = (crystalcost + energycost + areacost)/ crystals          	if(econcost > crystalcost){          	econcost = crystalcost;													table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}			}				if (cname == "Robotic Factories"){				makeAdjustments(nrow, roboticsAdjust)				var robscost = parseInt(itemcost);				robsprodcost = (robscost + energycost + areacost + popcost)/ 2				robsconstcost = (robscost + energycost + areacost + popcost)/ 2				robseconcost = (robscost + energycost + areacost + popcost)          	if(econcost > robseconcost){          	econcost = robseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > robsprodcost){          	prodcost = robsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > robsconstcost){          	constcost = robsconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Shipyards"){				makeAdjustments(nrow, shipyardsAdjust)				var shipscost = parseInt(itemcost);				shipsprodcost = (shipscost + energycost + areacost + popcost)/ 2        shipseconcost = (shipscost + energycost + areacost + popcost)          	if(econcost > shipseconcost){          	econcost = shipseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > shipsprodcost){          	prodcost = shipsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Orbital Shipyards"){				makeAdjustments(nrow, osAdjust)				var oscost = parseInt(itemcost);				osprodcost = (oscost + (energycost*12) + popcost)/8        oseconcost = (oscost + (energycost*12) + popcost)/2          	if(econcost > oseconcost){          	econcost = oseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > osprodcost){          	prodcost = osprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Spaceports"){				makeAdjustments(nrow, spaceportsAdjust)				var Spcost = parseInt(itemcost);				Spcost = (Spcost + energycost + areacost)/ 2          	if(econcost > Spcost){          	econcost = Spcost;							table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}				if (cname == "Nanite Factories"){				makeAdjustments(nrow, naniteAdjust)				var nanicost = parseInt(itemcost);				naniprodcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				naniconstcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				nanieconcost = (nanicost + (energycost*2) + areacost + popcost) /2          	if(econcost > nanieconcost){          	econcost = nanieconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > naniprodcost){          	prodcost = naniprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > naniconstcost){          	constcost = naniconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Androids Factories"){				makeAdjustments(nrow, androidAdjust)				var andrcost = parseInt(itemcost);				andrprodcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andrconstcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andreconcost = (andrcost + (energycost*4) + areacost + popcost) /2          	if(econcost > andreconcost){          	econcost = andreconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > andrprodcost){          	prodcost = andrprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > andrconstcost){          	constcost = andrconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}								if (cname == "Economic Centers"){				makeAdjustments(nrow, economicAdjust)				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*2) + areacost + popcost) /3          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}        if (cname == "Capital"){        makeAdjustments(nrow, capitalAdjust)				basesArray = GM_getValue(server+"Bases")				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*12) + areacost + popcost) / (10+basesArray.length)          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}				        if (cname == "Research Labs"){        makeAdjustments(nrow, researchAdjust)				}					        if (cname == "Command Centers"){        makeAdjustments(nrow, ccAdjust)				}		if (flag == 0){				    	getOptionValue(cname);		if (v==1) {		buttontext=document.createElement("a")		buttontext.href="javascript:document.getElementsByName(\'add_stack\')[0].selectedIndex="+a+"; document.getElementsByTagName(\'form\')[1].submit()"		buttontext.innerHTML = "Queue"			if (buttontext) {			if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){			colnum=3			}else{			colnum=5			}				table.childNodes[nrow].childNodes[colnum].style.whiteSpace=\'nowrap\';				table.childNodes[nrow].childNodes[colnum].appendChild(buttontext);			}	}	if (flag == 0 && nrow==table.childNodes.length-1){						flag =1;						nrow = 1;						}		}}}}}function buttonToSelect(option, text, fallback_text) {}function makeAdjustments(nrow, adjustvar){adjust = adjustvar				if(table.childNodes[nrow].childNodes[6].innerHTML.match(/<span id="time/)){				adjust++ 				}				if(adjust>0){				basecost = parseInt(table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, ""))				time = getSeconds(table.childNodes[nrow].childNodes[5].firstChild.nodeValue)/basecost				time = secsToHMS(time*(Math.round(basecost*Math.pow(1.5, adjust))))				table.childNodes[nrow].childNodes[5].innerHTML = table.childNodes[nrow].childNodes[5].innerHTML + "<br />("+time+") "        table.childNodes[nrow].childNodes[1].innerHTML = table.childNodes[nrow].childNodes[1].innerHTML + " (+"+adjust+")"        table.childNodes[nrow].childNodes[2].firstChild.nodeValue = table.childNodes[nrow].childNodes[2].firstChild.nodeValue + " ("+Math.round((basecost*Math.pow(1.5, adjust)))+")"        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        itemcost = itemcost.replace(/[0-9]+\\(/,"")        itemcost = itemcost.replace(/\\)/, "")        }else{        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        }        }function secsToHMS(seconds){        secVar0 = Math.round(seconds);                            // The initial data, in seconds        minVar = Math.floor(secVar0/60);  // The minutes           hourVar = Math.floor(minVar/60);  // The minutes        minVar = minVar % 60;        secVar = secVar0 % 60;              // The balance of seconds        if(hourVar != 0){        return hourVar+"h "+(minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else if(minVar != 0){        return (minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else{        return (secVar<10?\'0\'+secVar:secVar)+"s"        }                }function getOptionValue(obj){v=0x = document.getElementsByName("add_stack")if(x[0]){x = x[0]for (i=0;i<x.length;i++)    {    if(x.options[i].text == obj){    v=1;	a=i    i = x.length    }    }    }    }/*function insertTimeTextBoxes(){    var inputs = document.forms[1].elements;    for(var i = 0; i < inputs.length; i++)    {        if(inputs[i].className == \'quant\')        {            var row = inputs[i].parentNode.parentNode;            //console.log(row);            var cell = document.createElement("td");            cell.setAttribute("align","center");            cell.innerHTML = \'<input type="text" value="" maxlength="5" size="5" name="\'+inputs[i].name+\' - Time" id="\'+inputs[i].name+\' - Time" class="quant" onchange="update(\\\'\'+inputs[i].name+\'\\\')"/>\';            row.appendChild(cell);            cell.addEventListener(\'keyup\',getConvertTimeToQuantityClosure(row),true);			//cell.addEventListener(\'blur\',onProductionTextBoxChanged,true);        }    }        var tbody = inputs[0].parentNode.parentNode.parentNode;    //console.log(tbody.childNodes[0].firstChild);    //Adjust colspan for top row and third row    tbody.childNodes[0].firstChild.setAttribute("colspan",7);    tbody.childNodes[2].firstChild.setAttribute("colspan",7);    //console.log(tbody.childNodes[1].firstChild);    //Insert column title    var titleCell = document.createElement("th");    titleCell.setAttribute("width","10%");    titleCell.textContent = "Time (h)"    tbody.childNodes[1].appendChild(titleCell);		titleCell.previousSibling.setAttribute("width","10%");    //adjust colspan for all help rows    var helpCells = document.evaluate(    "//td[@class=\'help\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(helpCells.snapshotLength);    for(var i=0;i<helpCells.snapshotLength;i++)    {        helpCells.snapshotItem(i).setAttribute("colspan",6);    }    //adjust colspan for all red rows    var redCells = document.evaluate(    "//td[@class=\'red\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(redCells.snapshotLength);    for(var i=0;i<redCells.snapshotLength;i++)    {        redCells.snapshotItem(i).setAttribute("colspan",2);    }    //adjust colspan for last two rows    document.getElementById("fast").addEventListener("click", function(){var inputs = document.forms[1].elements; for(var i = 0; i < inputs.length; i++){if(inputs[i].className == \'quant\'){if(inputs[i].value == ""){}else{var row = inputs[i].parentNode.parentNode; convertTimeToQuantity(row); unsafeWindow.update(inputs[i].name);}}}}, false)    tbody.childNodes[tbody.childNodes.length-1].firstChild.setAttribute("colspan",7);}*/function getConvertTimeToQuantityClosure(row){    function func(){        convertTimeToQuantity(row);    }    ;    return func;}function convertTimeToQuantity(row){	//console.log(row);    var credits = row.childNodes[2].textContent;    var time = row.childNodes[4].textContent;    var qtyInput = row.childNodes[5].firstChild;    var enteredTime;    try{        enteredTime = parseFloat(row.childNodes[6].firstChild.value);    }    catch(Exception)    {        return;    }    if(isNaN(enteredTime)){    enteredTime = 0    }else{    //console.log("Credits: "+credits+" Time: "+time+" qtyInput: "+ qtyInput.value);    //console.log("entered time: "+isNaN(enteredTime));    var totalSeconds = getSeconds(time);    if(totalSeconds != -1)    {        //console.log("Time " +getTimeDisplay(totalSeconds));        var enteredTimeInSeconds = enteredTime*60*60;        //console.log(enteredTimeInSeconds+" / " +totalSeconds);        if(enteredTimeInSeconds < totalSeconds){			qtyInput.value = "";		}else{			if(document.getElementById("fast").checked == true){			qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)*2			}else{				qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)			}		}    }    onProductionTextBoxKeyUp();    }}function getSeconds(timeString){    var regex = /((\\d|,| |\\.)*h)?\\W?((\\d|,| |\\.)*m)?\\W?((\\d|,| |\\.)*s)?/;    var result = regex.exec(timeString);    if(result)    {        //console.log(result);        var h = 0;var m=0;var s=0;        if(result[1] != null)        h = result[1].substring(0,result[1].indexOf("h"));        if(result[3] != null)        m = result[3].substring(0,result[3].indexOf("m"));        if(result[5] != null)        s = result[5].substring(0,result[5].indexOf("s"));        return h*60*60 + m*60 + s*1;    }    else return -1;}function getTimeDisplay(seconds){    var h = Math.floor(seconds/3600);    var m = Math.floor((seconds % 3600)/60);    var s = Math.floor((seconds % 3600) % 60);    var string = s+"s";    if(m>0 || h>0)		string = m+"m "+string;    if(h>0)		string = h+"h "+string;    return string;}var PRESET_KEYS = new Array("Fighters","Bombers","Heavy Bombers","Ion Bombers","Corvette","Recycler","Destroyer","Frigate","Ion Frigate","Scout Ship", "Outpost Ship","Cruiser","Carrier","Heavy Cruiser","Battleship","Fleet Carrier","Dreadnought","Titan","Leviathan","Death Star","Goods");function onProductionTextBoxKeyUp(){    var shipName;    var count=0,cost=0;    var productionCost = 0;    var totalTime = 0;    for(var i = 0;i <PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.log("Failed to find textBox for "+shipName+".");            continue;        }				if(textBox.value != "")        {            var row = textBox.parentNode.parentNode;            var time = row.childNodes[4].textContent;            //console.log(textBox.value);            count = parseInt(textBox.value);            cost = parseInt(textBox.parentNode.previousSibling.previousSibling.previousSibling.innerHTML.replace(/(,| |\\.)/g, ""));            totalTime+= getSeconds(time) * count;            //console.log(count + " " + shipName + "s @ " + cost);            productionCost += (cost * count);			//textBox.parentNode.nextSibling.value = "";        }    }    //console.log("total Time: "+getTimeDisplay(totalTime));    var fastProduction = document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.checked;    //console.info(fastProduction);    if(fastProduction)	{		productionCost *= 2;		totalTime /= 2;	}    //console.log("Text changed. Total production cost: " +productionCost);    var submitButton = document.evaluate(	    "//input[@type=\'submit\']",	    document,	    null,	    XPathResult.FIRST_ORDERED_NODE_TYPE,	    null).singleNodeValue;    if(productionCost > 0)		submitButton.value = "Submit";    else		submitButton.value = "Submit";}function registerTextBoxEventListeners(){    for(var i = 0;i < PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.info("Failed to find textBox for "+shipName+".");            continue;        }        textBox.addEventListener(\'keyup\',onProductionTextBoxKeyUp,false);		//textBox.addEventListener(\'blur\',onProductionTextBoxChanged,true);    }    document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'change\',onProductionTextBoxKeyUp,false);    //document.evaluate("//input[@type=\'reset\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'click\',onProductionTextBoxKeyUp,true);    document.evaluate("//form[@method=\'post\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'reset\',onProductionTextBoxKeyUp,false);}function productionHelperOnClick(num, box) {	num=num.replace("+", "")	num=num.replace(" ","")	num=num.replace("k","000")		document.getElementById(box).value = parseInt(document.getElementById(box).value) + parseInt(num);     calculateTotals();}function prodHelperEvent(e) {  if (e.shiftKey && (e.name == \'fast\')) {    for (i=0; i<empireLinks.length; i++) {    document.getElementById("fast_"+empireLinks[i]).checked = e.checked;    }  } else if (e.shiftKey && (e.name == \'unit\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("unit_"+empireLinks[i]).selectedIndex = e.selectedIndex;    }  } else if (e.shiftKey && (e.name == \'quant\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("quant_"+empireLinks[i]).value = e.value;    }  }  if ((e.name == \'fast\')||(e.name == \'unit\')||(e.name == \'quant\'))    calculateTotals();}function calculateTotals() {	var pcost = 0;  for (i=0; i<empireLinks.length; i++) {    n = (document.getElementById("fast_"+empireLinks[i]).checked) ? 2 : 1;    pcost += parseInt(ProductionGetCost[document.getElementById("unit_"+empireLinks[i]).selectedIndex] * document.getElementById("quant_"+empireLinks[i]).value * n);	}	document.getElementById(\'cost_all\').innerHTML = pcost+\' credits\';	var credits_left = parseInt(numcredits) - pcost;	document.getElementById(\'cost_all\').style.color = (credits_left < 0) ? \'red\' : \'\';}function resetForm() {  for (i=0; i<empireLinks.length; i++) {    document.getElementById("unit_"+empireLinks[i]).selectedIndex = 0;    document.getElementById("fast_"+empireLinks[i]).checked = false;    document.getElementById("quant_"+empireLinks[i]).value = 0;    returnto = i    calculateTotals();    i=returnto;  }}function startSubmitQueue() {  submitQueue(0);}function submitQueue(i) {    if (document.getElementById("quant_"+empireLinks[i]).value != 0) {      var postData = document.getElementById("unit_"+empireLinks[i]).value+"="+document.getElementById("quant_"+empireLinks[i]).value+"&post_back=true";      if (document.getElementById("fast_"+empireLinks[i]).checked)        postData += "&fast=true";      document.getElementById("quant_"+empireLinks[i]).value = \'ok\';      document.getElementById("quant_"+empireLinks[i]).style.backgroundColor = \'red\';      GM_xmlhttpRequest({        method: "POST",        url: serverurl+"base.aspx?base="+empireLinks[i]+"&view=production",        data: encodeURI(postData),        headers:{\'Content-type\':\'application/x-www-form-urlencoded\'},     		onreadystatechange: function(xhr) {if (xhr.readyState == "4") {endSubmitQueue(i, "1");}}      });    } else {      endSubmitQueue(i, "0");    }}function endSubmitQueue(i, value) {time=1000+Math.floor(Math.random()*1001)  if (i == empireLinks.length-1)    window.setTimeout(function(){ location.reload(true)}, time);  else  if(value == 0){  submitQueue(i+1)  }else{    window.setTimeout(function(){ submitQueue(i+1)}, time);    }}function productionHelper() {  var btn_details = [];  btn_details.push([1,\'+1 \']);  btn_details.push([5,\'+5 \']);  btn_details.push([10,\'+10 \']);  btn_details.push([25,\'+25 \']);  btn_details.push([100,\'+100 \']);  btn_details.push([250,\'+250 \']);  btn_details.push([1000,\'+1k \']);  table.rows[1].childNodes[4].innerHTML = \'Fast Prod\';  table.rows[1].childNodes[5].innerHTML = \'Unit Type\';  table.rows[1].childNodes[6].innerHTML = \'Quantity\';  table.rows[1].childNodes[3].innerHTML = \'Current Queue\';  a=0;  table.firstChild.style.display=\'none\';  for (i=2; i<table.rows.length; i=i+2) {    var currentRow = table.rows[i];		var res = /\\?base=((\\d|,| |\\.)+)/.exec(table.rows[i].childNodes[0].firstChild.href);	  table.rows[i+1].style.display = \'none\';	  empireLinks[a] = res[1];	  a++;	  currentRow.childNodes[3].innerHTML = currentRow.childNodes[5].innerHTML + "<br />" + table.rows[i+1].childNodes[3].innerHTML    currentRow.childNodes[4].innerHTML = "<input type=\'checkbox\' name=\'fast\' class=\'check\' id=\'fast_"+res[1]+"\' onfocus=\\"selectedBox=\'fast_"+res[1]+"\'\\" />";    currentRow.childNodes[6].innerHTML = "<input type=\'text\' name=\'quant\' class=\'quant\' id=\'quant_"+res[1]+"\' size=\'5\' maxlength=\'5\' value=\'0\' onfocus=\\"selectedBox=\'quant_"+res[1]+"\'\\" />";    var html = "<select name=\'unit\' id=\'unit_"+res[1]+"\' onfocus=\\"selectedBox=\'unit_"+res[1]+"\'\\"><option value=\'Fighters\'>Fighters</option><option value=\'Bombers\'>Bombers</option>";    html += "<option value=\'Heavy Bombers\'>Heavy Bombers</option><option value=\'Ion Bombers\'>Ion Bombers</option><option value=\'Corvette\'>Corvette</option>";    html += "<option value=\'Recycler\'>Recycler</option><option value=\'Destroyer\'>Destroyer</option><option value=\'Frigate\'>Frigate</option>"    html += "<option value=\'Ion Frigate\'>Ion Frigate</option><option value=\'Scout Ship\'>Scout Ship</option><option value=\'Outpost Ship\'>Outpost Ship</option>";    html += "<option value=\'Cruiser\'>Cruiser</option><option value=\'Carrier\'>Carrier</option><option value=\'Heavy Cruiser\'>Heavy Cruiser</option>";    html += "<option value=\'Battleship\'>Battleship</option><option value=\'Fleet Carrier\'>Fleet Carrier</option><option value=\'Dreadnought\'>Dreadnought</option>";    html += "<option value=\'Titan\'>Titan</option><option value=\'Leviathan\'>Leviathan</option><option value=\'Death Star\'>Death Star</option></select>";    currentRow.childNodes[5].innerHTML = html;    document.getElementById("unit_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("quant_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("fast_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    for(c=0; c<7; c++) {      var num = btn_details[c][0];      l = document.createElement("a");		l.href = "javascript:void(1);";		l.id= i + btn_details[c][1];		l.innerHTML = btn_details[c][1];            l.name = "quant_"+res[1];      currentRow.childNodes[6].appendChild(l);      document.getElementById(i + btn_details[c][1]).addEventListener(\'click\', function(){ productionHelperOnClick(this.innerHTML, this.name );}, true);    }  }  l = document.createElement("tr");  l.id="extrarow1";  table.appendChild(l);  l = document.createElement("td");		l.innerHTML = "0 credits";      l.className = \'help\';      l.align = "right";      l.id="cost_all"      document.getElementById("extrarow1").appendChild(l);      document.getElementById("cost_all").colSpan="7";      l = document.createElement("tr");      l.id="extrarow2";      table.appendChild(l);      l = document.createElement("td");      l.className = \'help\';      l.align = "right";          l.id="prodHelperButtons"      document.getElementById("extrarow2").appendChild(l);      document.getElementById("prodHelperButtons").colSpan="7";      l = document.createElement("input");      l.type = "reset";      l.id = "resetButton";      l.value = "Reset";      document.getElementById("prodHelperButtons").appendChild(l);      l = document.createElement("input");      l.type = "submit";      l.id = "submitButton";      l.value = "submit";      document.getElementById("prodHelperButtons").appendChild(l);   document.getElementById("submitButton").addEventListener(\'click\', function(){ startSubmitQueue();}, true);  document.getElementById("resetButton").addEventListener(\'click\', function(){ resetForm();}, true);}function productionHelperButton() {		table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;		var prodTitle = table.childNodes[1].childNodes[5];		scoutButton = document.createElement("a");		scoutButton.href = "javascript:void(1);";		scoutButton.id= "prodHelperButton";		scoutButton.innerHTML=" [&#177;]";		scoutButton.title = "Production Helper"		prodTitle.appendChild(scoutButton)		document.getElementById(\'prodHelperButton\').addEventListener(\'click\', function() {productionHelper();}, true);	}function saveTechData(){    //console.log("Saving tech data");    var techData = new Array();    var rows = document.evaluate(    "//tr[@align=\'center\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log("Tech rows: "+ rows.snapshotLength);    for (var i = 0; i < rows.snapshotLength; i++)    {        var techNameCell = document.evaluate(        "th[1]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        var techValueCell = document.evaluate(        "td[4]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        if(techNameCell.snapshotLength > 0)        {            var techValue = parseInt(techValueCell.snapshotItem(0).innerHTML.replace(/(,| |\\.)/g, ""));            var techName = techNameCell.snapshotItem(0).innerHTML;            //console.log(techName +": "+techValue);            techData[i] = techValue;        }    }    GM_setValue(server+"techData",techData.join());}/* function scannerGrab(){tableArray = document.getElementsByTagName("table")for(i=0; i<tableArray.length; i++){if(tableArray[i].innerHTML.match(/<th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=fleet">Fleet<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=player">Player<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=destination">Destination<\\/a><\\/th><th width="20%"><a href="empire.aspx\\?view=scanners&amp;order=arrival">Arrival<\\/a><\\/th><th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=size">Size<\\/a><\\/th>/)){table = tableArray[i]fleetId = []fleetName = []fleetOwner = []ownerId = []fleetDest = []fleetArrive = []fleetSize = []for(a=1; a<table.rows.length; a++){fleetId[a-1] = table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=/, "") fleetId[a-1] = fleetId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetName[a-1]=table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetName[a-1]=fleetName[a-1].replace(/<\\/a>/, "");fleetOwner[a-1]=table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=[0-9]{1,}">/, "")fleetOwner[a-1]=fleetOwner[a-1].replace(/<\\/a>/, "");ownerId[a-1] =table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=/, "")ownerId[a-1] = ownerId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetDest[a-1]=table.rows[a].childNodes[2].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)fleetArrive[a-1]=parseInt(table.rows[a].childNodes[3].title)+Math.round(new Date().getTime()/1000.0)fleetSize[a-1]=table.rows[a].childNodes[4].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetSize[a-1]=fleetSize[a-1].replace(/<\\/a>(.*?)/, "");fleetSize[a-1]=fleetSize[a-1].replace(/(,| |.)/, "");}sendData = "&fleetId="+fleetId+"&fleetName="+fleetName+"&fleetOwner="+fleetOwner+"&ownerId="+ownerId+"&fleetDest="+fleetDest+"&fleetArrive="+fleetArrive+"&fleetSize="+fleetSize+"&seenBy="+document.getElementById(\'account\').parentNode.childNodes[1].innerHTML.replace(/[A-Za-z]./, \'\')if(GIAServers.inArray(server)){sendtoserver(sendData, "scanners.php")}}}}*/// If NS -- that is, !IE -- then set up for mouse capturedocument.captureEvents(Event.MOUSEMOVE)// Set-up to use getMouseXY function onMouseMovedocument.addEventListener("mousemove", function(e) {getMouseXY(e)}, true);// Temporary variables to hold mouse x-y pos.svar tempX = 0var tempY = 0// Main function to retrieve mouse x-y pos.sfunction getMouseXY(e) {// grab the x-y pos.s if browser is NS    tempX = e.pageX    tempY = e.pageY  // catch possible negative values in NS4  if (tempX < 0){tempX = 0}  if (tempY < 0){tempY = 0}  // show the position values in the form named Show  // in the text fields named MouseX and MouseY  return true}function linkEventListeners(){if(GIAServers.inArray(server)){linkArray=document.getElementsByTagName("a")for(i=0; i<linkArray.length; i++){if(linkArray[i].href.match(/map.aspx\\?(.*?)loc=E[0-9]{2}:[0-9]{2}:[0-9]{2}/)){linkArray[i].addEventListener("mouseover", function(e) {showBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""), tempX, tempY)}, true);linkArray[i].addEventListener("mouseout", function() {hideBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""))}, true);}}}}function linkChange(){	linkArray=document.getElementsByTagName(\'a\')	for(i=0; i < linkArray.length; i++){		linkArray[i].target = "_blank"	}}  ////////////////////////////////////////// /// Execution //////////////////////////////////////////////////////////////////////if(document.location.href.match(/astroempires.com/)){replaceTime();if(document.location.href.match(/loc=[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){	if(document.body.innerHTML.match(/<th colspan=.4.>Base<\\/th>/)){	if(GIAServers.inArray(server)){	centerArray=document.getElementsByTagName(\'center\')	for(i=0; i<centerArray.length; i++){	if(centerArray[i].innerHTML.match(/Astro Type:/)){	baseLink = document.body.innerHTML.match(/base.aspx\\?base=[0-9]{1,}/)[0]	sourceDiv = document.createElement("div")	sourceDiv.id="baseDiv";	sourceDiv.innerHTML="Visit the <a href=\\""+baseLink+"\\">base page</a> to add this base to GIA.<br /><br />";	centerArray[i].appendChild(sourceDiv)	}	}	}	}}else if(document.location.href.match(/[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}/)){	debrisShow()}else if(document.location.href.match(/http:\\/\\/(.+?)\\.astroempires\\.com\\/base\\.aspx\\?base=[0-9]{1,}$/)){	if(window.parent.document.location.href != document.location.href){	baseDetails();	}}else if(document.location.href.match(/empire.aspx$/) || document.location.href.match(/empire.aspx\\?view=bases_events$/)){	productionHelperButton();}else if(document.location.href.match(/view=scanners/)){	scannerFormat();}else if(window.location.href.match(/empire.aspx\\?view=fleets/)){        sumShips();}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=structures/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=defenses/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){	if(!document.location.href.match(/&info=/)){enhanceConstructionPage();}}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=production/)){insertTimeTextBoxes()}if(window.location.href.indexOf(\'view=move\')==-1 && window.location.href.indexOf(\'view=fleets\')==-1 &&		window.location.href.indexOf(\'view=production\')==-1 && window.location.href.indexOf(\'view=structures\')==-1 &&		window.location.href.indexOf(\'view=trade\')==-1 && window.location.href.indexOf(\'view=research\')==-1){		formatVariousNumbers();	}	}'
                                                         }, 'Mojo::Asset::Memory' ),
                                       'events' => {
                                                     'read' => [
                                                                 $VAR1->{'content'}{'read'}
                                                               ]
                                                   },
                                       'buffer' => ''
                                     }, 'Mojo::Content::Single' )
               }, 'Mojo::Message::Request' );

[Wed Oct 22 13:59:46 2014] [debug] 200 OK (0.003726s, 268.384/s).
[Wed Oct 22 14:08:54 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 14:08:54 2014] [debug] wtf
[Wed Oct 22 14:08:54 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 14:08:59 2014] [debug] $VAR1 = [];

[Wed Oct 22 14:08:59 2014] [debug] POST "/ae/gia".
[Wed Oct 22 14:08:59 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 14:08:59 2014] [debug] $VAR1 = bless( {
                 'max_message_size' => 10485760,
                 'events' => {},
                 'buffer' => '',
                 'version' => '1.0',
                 'env' => {
                            'HTTP_CONNECTION' => 'close',
                            'psgi.multiprocess' => '',
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'psgi.nonblocking' => '',
                            'psgi.errors' => *::STDERR,
                            'psgi.multithread' => '',
                            'PATH_INFO' => '/ae/gia',
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'REQUEST_METHOD' => 'POST',
                            'SERVER_NAME' => 0,
                            'HTTP_HOST' => 'localhost',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'CONTENT_LENGTH' => '63681',
                            'HTTP_ACCEPT' => '*/*',
                            'QUERY_STRING' => '',
                            'psgix.input.buffered' => 1,
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'REQUEST_URI' => '/ae/gia',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'psgi.url_scheme' => 'http',
                            'psgi.input' => bless( \*{'Stream::Buffered::PerlIO::$io'}, 'FileHandle' ),
                            'REMOTE_PORT' => 54505,
                            'REMOTE_ADDR' => '127.0.0.1',
                            'psgix.harakiri' => 1,
                            'SCRIPT_NAME' => '',
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'psgi.streaming' => 1,
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'psgix.io' => bless( \*Symbol::GEN1, 'IO::Socket::INET' ),
                            'SERVER_PORT' => 5000,
                            'psgi.run_once' => ''
                          },
                 'state' => 'finished',
                 'raw_size' => 0,
                 'finished' => 1,
                 'url' => bless( {
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia'
                                                    }, 'Mojo::Path' ),
                                   'base' => bless( {
                                                      'host' => 'localhost',
                                                      'path' => bless( {
                                                                         'trailing_slash' => '',
                                                                         'charset' => 'UTF-8',
                                                                         'parts' => [],
                                                                         'leading_slash' => ''
                                                                       }, 'Mojo::Path' ),
                                                      'scheme' => 'HTTP',
                                                      'port' => ''
                                                    }, 'Mojo::URL' )
                                 }, 'Mojo::URL' ),
                 'method' => 'POST',
                 'content' => bless( {
                                       'real_size' => 63681,
                                       'size' => 63681,
                                       'auto_upgrade' => 1,
                                       'headers' => bless( {
                                                             'normalcase' => {
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT'
                                                                             },
                                                             'headers' => {
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'content-length' => [
                                                                                                  '63681'
                                                                                                ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ],
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ]
                                                                          }
                                                           }, 'Mojo::Headers' ),
                                       'asset' => bless( {
                                                           'auto_upgrade' => 1,
                                                           'max_memory_size' => 262144,
                                                           'content' => '// ==UserScript==// @name           GIA Script (Modified)// @author          Luke Bonaccorsi AKA SpeedySurfer// @namespace       http://gears.speedysurfer.co.uk// @description     Scouts for bases in the current region// @license         Creative Commons Attribution License// @include        http://*.astroempires.com/*// @exclude        http://*.astroempires.com/login.aspx// @exclude        http://*.astroempires.com/home.aspx// ==/UserScript==/* * This file is a Greasemonkey user script. To install it, you need  * the Firefox plugin "Greasemonkey" (URL: http://greasemonkey.mozdev.org/) * After you installed the extension, restart Firefox and revisit  * this script. Now you will see a new menu item "Install User Script" * in your tools menu. *  * To uninstall this script, go to your "Tools" menu and select  * "Manage User Scripts", then select this script from the list * and click uninstall :-) * * Creative Commons Attribution License (--> or Public Domain) * http://creativecommons.org/licenses/by/2.5/*/  ////////////////////////////////////////// /// Variables //////////////////////////////////////////////////////////////////////if (document.location.href.match(/(.+?)astroempires.com/)){var server=document.location.href.match(/\\/(.+?).astroempires.com/)[1]server = server.replace(/\\//, "")var serverurl= "http://"+server+".astroempires.com/"}if(document.location.href.match(/astroempires.com/)){var empireLinks = []; var ProductionGetCost = [5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000]; var numcredits = document.evaluate(    "/html/body/table/tbody/tr/th/table/tbody/tr[2]/th[2]",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    numcredits = numcredits.snapshotItem(0).innerHTML;var FT_INDEX = 0;var BO_INDEX = 1;var HB_INDEX = 2;var IB_INDEX = 3;var CV_INDEX = 4;var RC_INDEX = 5;var DE_INDEX = 6;var FR_INDEX = 7;var IF_INDEX = 8;var SS_INDEX = 9;var OS_INDEX = 10;var CR_INDEX = 11;var CA_INDEX = 12;var HC_INDEX = 13;var BC_INDEX = 14;var FC_INDEX = 15;var DN_INDEX = 16;var TI_INDEX = 17;var LE_INDEX = 18;var DS_INDEX = 19;var BARRACKS_INDEX = 20;var LASER_TURRETS_INDEX = 21;var MISSLE_TURRETS_INDEX = 22;var PLASMA_TURRENTS_INDEX = 23;var ION_TURRETS_INDEX = 24;var PHOTON_TURRETS_INDEX = 25;var DISRUPTOR_TURRETS_INDEX = 26;var DEFLECTION_SHIELDS_INDEX = 27;var PLANETARY_SHIELD_INDEX = 28;var PLANETARY_RING_INDEX = 29;var fightingShips = "11111011100101101111";var shipValues = new Array(5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000);var shipHangarValues = new Array(0,0,0,0,0,0,0,4,4,0,0,4,60,8,40,400,200,1000,4000,10000);var GIAServers = new Array("bravo");}  ////////////////////////////////////////// /// Misc /////////////////////////////////////////////////////////////////////////Array.prototype.inArray = function (value)// Returns true if the passed value is found in the// array. Returns false if it is not.{var i;for (i=0; i < this.length; i++) {// Matches identical (===), not just similar (==).if (this[i] === value) {return true;}}return false;};function replaceTime(){	  for(n=1;n<=500;n++)	  {		elem=document.getElementById(\'time\'+n);	    if (!elem)	    {	       break;	    }	    elem.id = \'blah\'+n;	    s=elem.title;	    var newElement, endTime;	    var d = new Date();	    var now = new Date();	    if (elem)	    {	       if(s<=0)	       {		 endTime="-"	       }	       else	       {		 d.setTime(d.getTime()+(s*1000));		 tempdate = new Date();		 tempdate.setDate(tempdate.getDate()+1)		 if(now.toLocaleDateString() == d.toLocaleDateString() )		 {		    endTime="Today @ "+d.formatDate(\'H:i:s\');		 }		 else if(tempdate.toLocaleDateString() == d.toLocaleDateString())		 {		    endTime="Tomorrow @ "+d.formatDate(\'H:i:s\');		 }		 else		 {		    endTime=d.formatDate(\'D jS M @ H:i:s\');		 }	       }	       elem.innerHTML = "<b><span id=\'time"+n+"\' title=\'"+ s +"\'>-</span></b><br><nobr><span id=\'done"+n+"\' style=\'font-size: xx-small; color: "+getAgeCol(s)+"\'>" + endTime + "</span></nobr>"	    }	  }};  // formatDate :// a PHP date like function, for formatting date strings// authored by Svend Tofte <www.svendtofte.com>// the code is in the public domain//// see http://www.svendtofte.com/javascript/javascript-date-string-formatting/// and http://www.php.net/date//// thanks to//  - Daniel Berlin <mail@daniel-berlin.de>,//    major overhaul and improvements//  - Matt Bannon,//    correcting some stupid bugs in my days-in-the-months list!//  - levon ghazaryan. pointing out an error in z switch.//  - Andy Pemberton. pointing out error in c switch//// input : format string// time : epoch time (seconds, and optional)//// if time is not passed, formatting is based on// the current "this" date object\'s set time.//// supported switches are// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L),// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z//// unsupported (as compared to date in PHP 5.1.3)// T, e, oDate.prototype.formatDate = function (input,time) {    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday",                       "Thursday", "Friday", "Saturday"];    var daysShort =   ["Sun", "Mon", "Tue", "Wed",                       "Thu", "Fri", "Sat"];    var monthsShort = ["Jan", "Feb", "Mar", "Apr",                       "May", "Jun", "Jul", "Aug", "Sep",                       "Oct", "Nov", "Dec"];    var monthsLong =  ["January", "February", "March", "April",                       "May", "June", "July", "August", "September",                       "October", "November", "December"];    var switches = { // switches object        a : function () {            // Lowercase Ante meridiem and Post meridiem            return date.getHours() > 11? "pm" : "am";        },        A : function () {            // Uppercase Ante meridiem and Post meridiem            return (this.a().toUpperCase ());        },        B : function (){            // Swatch internet time. code simply grabbed from ppk,            // since I was feeling lazy:            // http://www.xs4all.nl/~ppk/js/beat.html            var off = (date.getTimezoneOffset() + 60)*60;            var theSeconds = (date.getHours() * 3600) +                             (date.getMinutes() * 60) +                              date.getSeconds() + off;            var beat = Math.floor(theSeconds/86.4);            if (beat > 1000) beat -= 1000;            if (beat < 0) beat += 1000;            if ((String(beat)).length == 1) beat = "00"+beat;            if ((String(beat)).length == 2) beat = "0"+beat;            return beat;        },        c : function () {            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" +                    this.H() + ":" + this.i() + ":" + this.s() + this.P());        },        d : function () {            // Day of the month, 2 digits with leading zeros            var j = String(this.j());            return (j.length == 1 ? "0"+j : j);        },        D : function () {            // A textual representation of a day, three letters            return daysShort[date.getDay()];        },        F : function () {            // A full textual representation of a month            return monthsLong[date.getMonth()];        },        g : function () {           // 12-hour format of an hour without leading zeros, 1 through 12!           if (date.getHours() == 0) {               return 12;           } else {               return date.getHours()>12 ? date.getHours()-12 : date.getHours();           }       },        G : function () {            // 24-hour format of an hour without leading zeros            return date.getHours();        },        h : function () {            // 12-hour format of an hour with leading zeros            var g = String(this.g());            return (g.length == 1 ? "0"+g : g);        },        H : function () {            // 24-hour format of an hour with leading zeros            var G = String(this.G());            return (G.length == 1 ? "0"+G : G);        },        i : function () {            // Minutes with leading zeros            var min = String (date.getMinutes ());            return (min.length == 1 ? "0" + min : min);        },        I : function () {            // Whether or not the date is in daylight saving time (DST)            // note that this has no bearing in actual DST mechanics,            // and is just a pure guess. buyer beware.            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");            return (noDST.getTimezoneOffset () ==                    date.getTimezoneOffset () ? 0 : 1);        },        j : function () {            // Day of the month without leading zeros            return date.getDate();        },        l : function () {            // A full textual representation of the day of the week            return daysLong[date.getDay()];        },        L : function () {            // leap year or not. 1 if leap year, 0 if not.            // the logic should match iso\'s 8601 standard.            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html            var Y = this.Y();            if (                (Y % 4 == 0 && Y % 100 != 0) ||                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)                ) {                return 1;            } else {                return 0;            }        },        m : function () {            // Numeric representation of a month, with leading zeros            var n = String(this.n());            return (n.length == 1 ? "0"+n : n);        },        M : function () {            // A short textual representation of a month, three letters            return monthsShort[date.getMonth()];        },        n : function () {            // Numeric representation of a month, without leading zeros            return date.getMonth()+1;        },        N : function () {            // ISO-8601 numeric representation of the day of the week            var w = this.w();            return (w == 0 ? 7 : w);        },        O : function () {            // Difference to Greenwich time (GMT) in hours            var os = Math.abs(date.getTimezoneOffset());            var h = String(Math.floor(os/60));            var m = String(os%60);            h.length == 1? h = "0"+h:1;            m.length == 1? m = "0"+m:1;            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;        },        P : function () {            // Difference to GMT, with colon between hours and minutes            var O = this.O();            return (O.substr(0, 3) + ":" + O.substr(3, 2));        },        r : function () {            // RFC 822 formatted date            var r; // result            //  Thu         ,     21               Dec              2000            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +            //    16          :    01          :    07               0200            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();            return r;        },        s : function () {            // Seconds, with leading zeros            var sec = String (date.getSeconds ());            return (sec.length == 1 ? "0" + sec : sec);        },        S : function () {            // English ordinal suffix for the day of the month, 2 characters            switch (date.getDate ()) {                case  1: return ("st");                case  2: return ("nd");                case  3: return ("rd");                case 21: return ("st");                case 22: return ("nd");                case 23: return ("rd");                case 31: return ("st");                default: return ("th");            }        },        t : function () {            // thanks to Matt Bannon for some much needed code-fixes here!            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];            if (this.L()==1 && this.n()==2) return 29; // ~leap day            return daysinmonths[this.n()];        },        U : function () {            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)            return Math.round(date.getTime()/1000);        },        w : function () {            // Numeric representation of the day of the week            return date.getDay();        },        W : function () {            // Weeknumber, as per ISO specification:            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            var DoW = this.N ();            var DoY = this.z ();            // If the day is 3 days before New Year\'s Eve and is Thursday or earlier,            // it\'s week 1 of next year.            var daysToNY = 364 + this.L () - DoY;            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {                return 1;            }            // If the day is within 3 days after New Year\'s Eve and is Friday or later,            // it belongs to the old year.            if (DoY <= 2 && DoW >= 5) {                return new Date (this.Y () - 1, 11, 31).formatDate ("W");            }            var nyDoW = new Date (this.Y (), 0, 1).getDay ();            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier                return (1 + Math.floor ((DoY + nyDoW) / 7));            } else {  // First day of the year is a Friday or later                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));            }        },        y : function () {            // A two-digit representation of a year            var y = String(this.Y());            return y.substring(y.length-2,y.length);        },        Y : function () {            // A full numeric representation of a year, 4 digits            // we first check, if getFullYear is supported. if it            // is, we just use that. ppks code is nice, but wont            // work with dates outside 1900-2038, or something like that            if (date.getFullYear) {                var newDate = new Date("January 1 2001 00:00:00 +0000");                var x = newDate .getFullYear();                if (x == 2001) {                    // i trust the method now                    return date.getFullYear();                }            }            // else, do this:            // codes thanks to ppk:            // http://www.xs4all.nl/~ppk/js/introdate.html            var x = date.getYear();            var y = x % 100;            y += (y < 38) ? 2000 : 1900;            return y;        },        z : function () {            // The day of the year, zero indexed! 0 through 366            var s = "January 1 " + this.Y() + " 00:00:00 GMT" + this.O();            var t = new Date(s);            var diff = date.getTime() - t.getTime();            return Math.floor(diff/1000/60/60/24);        },        Z : function () {            // Timezone offset in seconds            return (date.getTimezoneOffset () * -60);        }    }    function getSwitch(str) {        if (switches[str] != undefined) {            return switches[str]();        } else {            return str;        }    }    var date;    if (time) {        var date = new Date (time);    } else {        var date = this;    }    var formatString = input.split("");    var i = 0;    while (i < formatString.length) {        if (formatString[i] == "%") {            // this is our way of allowing users to escape stuff            formatString.splice(i,1);        } else {            formatString[i] = getSwitch(formatString[i]);        }        i++;    }    return formatString.join("");}// Some (not all) predefined format strings from PHP 5.1.1, which// offer standard date representations.// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants//// Atom      "2005-08-15T15:52:01+00:00"Date.DATE_ATOM    = "Y-m-d%TH:i:sP";// ISO-8601  "2005-08-15T15:52:01+0000"Date.DATE_ISO8601 = "Y-m-d%TH:i:sO";// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"Date.DATE_RFC2822 = "D, d M Y H:i:s O";// W3C       "2005-08-15 15:52:01+00:00"Date.DATE_W3C     = "Y-m-d%TH:i:sP";function getAgeCol(age) {		var col = \'#461B7E\'; // 72 hours +		if (age <= 3600)			col = \'#FFFFFF\'; // 1 hour		else if (age <=10800)			col = \'#FFFFFF\'; // 3 hours		else if (age <=21600)			col = \'#9E7BFF\'; // 6 hours		else if (age <=43200)			col = \'#9172EC\'; // 12 hours		else if (age <=86400)			col = \'#8467D7\'; // 24 hours		else if (age <=172800)			col = \'#7A5DC7\'; // 48 hours		else if (age <=259200)			col = \'#461B7E\'; // 72 hours		return col;}function debrisShow(){	spanArray = document.getElementsByTagName("span")	for(i=0; i<spanArray.length; i++){		if(spanArray[i].getAttribute("class") == "gray"){		spanArray[i].innerHTML = spanArray[i].title		}	}}function formatVariousNumbers(){	var debrisElement = document.evaluate(    "//center[contains(text(),\'Debris\')]",    document,    null,    XPathResult.FIRST_ORDERED_NODE_TYPE,    null).singleNodeValue;    if(debrisElement !=null)    {        var debrisMessage = debrisElement.textContent;        console.log(debrisMessage);        var indexOfText = debrisMessage.indexOf(" credits");        var valueText = debrisMessage.substring(0,indexOfText);        var value = commaFormat(parseInt(valueText));        //console.log(valueText+" new value:" +value.toString());        //console.log(debrisElement.textContent + " -< " + debrisElement.textContent.replace(valueText,value.toString()));        debrisElement.textContent = debrisElement.textContent.replace(valueText,value.toString());    }}function scannerFormat(){	baseArray=document.getElementsByTagName("a")	bases = GM_getValue(server+"Bases")	for(i=0; i<baseArray.length; i++){		if(baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){			basecoord=baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)			if(bases.match(basecoord)){			baseArray[i].setAttribute("style", "color: red; font-weight: normal;")			}		}	}}var galaxyInfoArrays = new Array();function getGalaxyInfoArray(galaxy){	if(galaxyInfoArrays[galaxy]==undefined)	{		var newArray = new Array(20);		for(var i = 0; i < 20;i++)		{			newArray[i] = 0;		}		galaxyInfoArrays[galaxy] = new Array(galaxy,0,newArray,0,0);//[galaxy number],[mobile fleet count],[mobilefleetarray],[total fighting fleet],[total fleet],	}	return galaxyInfoArrays[galaxy];}function isBase(base){	bases = GM_getValue(server+"Bases")    if(bases==null)    return false;    if(bases.match(base)){        return true;    }else{    return false;	}}function insertTotalsRow(node,sums,mobileSums,fleetCount,mobileFleetCount,overallFleetTotal,overallFightingFleetTotal,overallMobileFleetTotal,overallMobileFightingFleetTotal){    	//GALAXY ROWS	for(var i = 0;i<galaxyInfoArrays.length;i++)	{		var galaxyInfoArray = galaxyInfoArrays[i];		if(galaxyInfoArray==undefined || galaxyInfoArray[1] == 0)			continue;				var sumRow = document.createElement("tr");	    sumRow.setAttribute(\'align\',\'center\');	    	    var element = sumRow.insertCell(0);	    element.textContent = "Mobile Fleets ("+i+")";	    element = sumRow.insertCell(1);	    element.textContent = galaxyInfoArray[1];	    		var galaxyFleetSums = galaxyInfoArray[2];		for(var k = 0; k < 20; k++)	    {	        //console.log(sums[k]);	        var cell = document.createElement("td");	        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	        if(galaxyFleetSums[k] > 0)				cell.innerHTML = "<small>"+galaxyFleetSums[k]+"</small>";	        //console.log(element);	        sumRow.insertBefore(cell,null);	    }	    //Add totals cell	    var cell = document.createElement("td");	    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	    cell.innerHTML =galaxyInfoArray[3] +" / "+ galaxyInfoArray[4];	    //console.log(element);	    sumRow.insertBefore(cell,null);	    node.insertBefore(sumRow,null);	}	//MOBILE ROW	var sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    var element = sumRow.insertCell(0);    element.textContent = "Total Mobile Fleets";    element = sumRow.insertCell(1);    element.textContent = mobileFleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(mobileSums[k] > 0)			cell.innerHTML = "<small>"+mobileSums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallMobileFightingFleetTotal +" / "+ overallMobileFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);    //TOTAL ROW    sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    element = sumRow.insertCell(0);    element.textContent = "Total Fleets";    element = sumRow.insertCell(1);    element.textContent = fleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(sums[k] > 0)			cell.innerHTML = "<small>"+sums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallFightingFleetTotal +" / "+ overallFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);}function node(opt) {  function attr(name) {    var value = opt[name];    delete opt[name];    return value;  }  var expandos = { id: 1, className: 1, title: 1, type: 1, checked: 1 };  var id = opt.id;  var n = document.getElementById(id);  if (!n) {    var tag = attr("tag") || "div";    if ("string" == typeof tag)      n = document.createElement(tag);    else {      var t = document.createElement("div");      t.innerHTML = tag.toXMLString();      var ids = {};      for each (var n in $x(\'.//*[@id]\', t))        ids[n.id] = 1;      if (!n) ids = null;      var r = document.createRange();      r.selectNodeContents(t);      n = r.extractContents();      if (n.childNodes.length == 1)        n = n.firstChild;    }    var after = attr("after");    var before = opt.prepend ? opt.prepend.firstChild : attr("before");    var parent = attr("prepend") || attr("append") ||                   (before || after || {}).parentNode;    if (parent) {      if (before)        parent.insertBefore(n, before);      else if (after)        parent.insertBefore(n, after.nextSibling);      else        parent.appendChild(n);    }    if (id) n.id = id;  }  var html = attr("html");  if ("undefined" != typeof html) n.innerHTML = html;  var text = attr("text");  if ("undefined" != typeof text) n.textContent = text;  var style = attr("style");  if (style)    for (var prop in style)      n.style[prop] = style[prop];  for (prop in opt)    if (expandos[prop])      n[prop] = opt[prop];    else      n.setAttribute(prop, opt[prop]+"");  if (ids)    for (var id in ids)      ids[id] = document.getElementById(id);  return ids || n;}function enhanceConstructionPage() {  urbanAdjust = 0;  solarAdjust = 0;  gasAdjust = 0;  fusionAdjust = 0;  antimatterAdjust = 0;  researchAdjust = 0;  metalAdjust = 0;  crystalAdjust = 0;  roboticsAdjust = 0;  shipyardsAdjust = 0;  osAdjust = 0;  spaceportsAdjust = 0;  ccAdjust = 0;  naniteAdjust = 0;  androidAdjust = 0;  economicAdjust = 0;  terraformAdjust = 0;  mlpAdjust = 0;  orbitalbaseAdjust = 0;  jgAdjust = 0;  biosphereAdjust = 0;  capitalAdjust = 0;  barrackAdjust = 0;  laserAdjust = 0;  missileAdjust = 0;  plasmabaseAdjust = 0;  ionAdjust = 0;  photonAdjust = 0;  disruptorAdjust = 0;  deflectionAdjust = 0;  pshieldAdjust = 0;  pringAdjust = 0;  tableArray = document.getElementsByTagName("table")  for(i=0; i<tableArray.length; i++){  if(tableArray[i].innerHTML.match(/<th colspan=.2.>Construction Queue<.th>/)){  for(a=1; a<tableArray[i].childNodes[0].childNodes.length; a++){  if(!tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/<select name=.add_stack.>/)){  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Urban Structures/))  urbanAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Solar Plants/))  solarAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Gas Plants/))  gasAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Fusion Plants/))  fusionAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Antimatter Plants/))  antimatterAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Research Labs/))  researchAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Metal Refineries/))  metalAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Crystal Mines/))  crystalAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Robotic Factories/))  roboticsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Shipyards/) && !tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  shipyardsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  osAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Spaceports/))  spaceportsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Command Centers/))  ccAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Nanite Factories/))  naniteAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Androids Factories/))  androidAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Economic Centers/))  economicAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Terraform/))  terraformAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Multi-Level Platforms/))  mlpAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Base/))  orbitalbaseAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Jump Gate/))  jgAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Biosphere Modification/))  biosphereAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Capital/))  capitalAdjust++;}  }  }  }	table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;	var i_lastcolumn = 5;	var forms = document.getElementsByTagName(\'form\');	if (!table.innerHTML.match(/The research of this base is linked to/)){	if (table && table.childNodes.length > 4) {		table.childNodes[0].style.display=\'none\';		table.childNodes[2].style.display=\'none\';		for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {			if(!table.childNodes[nrow].innerHTML.match(/Research Labs linked to this base research./)){			table.childNodes[nrow+1].style.display=\'none\';			}		}	}	techmultipliers=GM_getValue(server+"techData", "0").split(",")	var energytechmultiplier = (techmultipliers[0]*0.05)+1;	var averageroute = GM_getValue(server+"averageRoute", "31");	var fertility = 0;	var uspopcost = 0;	var obpopcost = 0;	var obcostparentnode = 0;	var popcost = 0;	var areacost = 0;	var energycost = 0;	var econcost = 0;	var prodcost = 0;	var constcost = 0;	var flag = 0;	var bestAreaSignifier = node({tag: \'span\', html: \' <br /> (Best Area)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEconSignifier = node({tag: \'span\', html: \' <br /> (Best Econ)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestProdSignifier = node({tag: \'span\', html: \' <br /> (Best Prod)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestConstSignifier = node({tag: \'span\', html: \' <br /> (Best Const)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestPopSignifier = node({tag: \'span\', html: \' <br /> (Best Pop)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEnergySignifier = node({tag: \'span\', html: \' <br /> (Best Energy)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {		if(!table.childNodes[nrow].innerHTML.match(/linked to this base research./)){		var cname = table.childNodes[nrow].childNodes[1].firstChild.firstChild.firstChild.firstChild.nodeValue + table.childNodes[nrow].childNodes[1].firstChild.firstChild.childNodes[1].nodeValue;		if (location.search.indexOf(\'view=structures\')!=-1) {			table.childNodes[nrow].title = cname;			var td1help_res = table.childNodes[nrow+1].innerHTML.match(/(fertility|metal resource|crystals resource).\\((.+?)\\)/)			if (td1help_res) {			if (flag == 0){				if(td1help_res[1]=="fertility"){				var td1help = "&nbsp;(Fert "+td1help_res[2]+")"				}else if(td1help_res[1]=="metal resource"){				var td1help = "&nbsp;(Metal "+td1help_res[2]+")"				}else if(td1help_res[1]=="crystals resource"){				var td1help = "&nbsp;(Crystal "+td1help_res[2]+")"				}				var d = table.childNodes[nrow].childNodes[1].innerHTML + td1help;				table.childNodes[nrow].childNodes[1].innerHTML = d				}			}				if (cname==\'Terraform\') {				makeAdjustments(nrow, terraformAdjust)				terracost = parseInt(itemcost) / 5;					if(areacost == 0 || areacost > terracost){					areacost = terracost					table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Multi-Level Platforms\') {				adjust = mlpAdjust				makeAdjustments(nrow, mlpAdjust)					var cost = parseInt(itemcost) / 10;					if (cost < areacost) {						areacost = cost;						bestAreaSignifier.parentNode.removeChild(bestAreaSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Urban Structures\') {				makeAdjustments(nrow, urbanAdjust)          USLevel = table.childNodes[nrow].childNodes[1].innerHTML.match(/\\(Level [0-9]{1,}/);          USLevel = parseInt(USLevel[0].replace(/\\(Level /, ""));					fertility = parseInt(td1help_res[2]);					uspopcost = parseInt(itemcost);					uspopcost = (uspopcost+areacost) / fertility;					if (popcost == 0 || popcost > uspopcost){					popcost = uspopcost;					table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);					}				}				if (cname==\'Orbital Base\') {				makeAdjustments(nrow, orbitalbaseAdjust)					obpopcost = parseInt(itemcost) / 10;					obcostparentnode = table.childNodes[nrow].childNodes[2];					if (obpopcost && obpopcost < popcost) {						popcost = obpopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);								}				}								if (cname==\'Solar Plants\' || cname==\'Gas Plants\' || cname==\'Fusion Plants\' || cname==\'Antimatter Plants\') {				if(cname==\'Solar Plants\'){				adjust = solarAdjust				}else if(cname==\'Gas Plants\'){				adjust = gasAdjust				}else if(cname==\'Fusion Plants\'){				adjust = fusionAdjust				}else if(cname==\'Antimatter Plants\'){				adjust = antimatterAdjust				}makeAdjustments(nrow, adjust)					var c = parseInt(itemcost);					var e = parseInt(table.childNodes[nrow].childNodes[3].firstChild.nodeValue.slice(1));					c = (c + popcost + areacost) / (energytechmultiplier*e);					if (e>2){					if (!energycost)						energycost = c;					if (c <= energycost) {						energycost = c;						if (bestEnergySignifier.parentNode)							bestEnergySignifier.parentNode.removeChild(bestEnergySignifier);							table.childNodes[nrow].childNodes[2].appendChild(bestEnergySignifier);					}					}				}				if (cname == "Biosphere Modification"){makeAdjustments(nrow, biosphereAdjust)          var biopopcost = parseInt(itemcost);					biopopcost = (biopopcost+(24*energycost)+areacost)/USLevel										if (biopopcost < popcost) {						popcost = biopopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);																	}				}				if (cname == "Metal Refineries"){				makeAdjustments(nrow, metalAdjust)				var metal = parseInt(td1help_res[2]);				var metalcost = parseInt(itemcost);				metalprodcost = (metalcost + energycost + areacost + popcost)/ metal				metalconstcost = (metalcost + energycost + areacost + popcost)/ metal				metaleconcost = (metalcost + energycost + areacost + popcost)          	if(econcost == 0 || econcost > metaleconcost){          	econcost = metaleconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost == 0 || prodcost > metalprodcost){          	prodcost = metalprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost == 0 || constcost > metalconstcost){          	constcost = metalconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Crystals Mines"){				makeAdjustments(nrow, crystalAdjust)				var crystals = parseInt(td1help_res[2]);				var crystalcost = parseInt(itemcost);				crystalcost = (crystalcost + energycost + areacost)/ crystals          	if(econcost > crystalcost){          	econcost = crystalcost;													table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}			}				if (cname == "Robotic Factories"){				makeAdjustments(nrow, roboticsAdjust)				var robscost = parseInt(itemcost);				robsprodcost = (robscost + energycost + areacost + popcost)/ 2				robsconstcost = (robscost + energycost + areacost + popcost)/ 2				robseconcost = (robscost + energycost + areacost + popcost)          	if(econcost > robseconcost){          	econcost = robseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > robsprodcost){          	prodcost = robsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > robsconstcost){          	constcost = robsconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Shipyards"){				makeAdjustments(nrow, shipyardsAdjust)				var shipscost = parseInt(itemcost);				shipsprodcost = (shipscost + energycost + areacost + popcost)/ 2        shipseconcost = (shipscost + energycost + areacost + popcost)          	if(econcost > shipseconcost){          	econcost = shipseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > shipsprodcost){          	prodcost = shipsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Orbital Shipyards"){				makeAdjustments(nrow, osAdjust)				var oscost = parseInt(itemcost);				osprodcost = (oscost + (energycost*12) + popcost)/8        oseconcost = (oscost + (energycost*12) + popcost)/2          	if(econcost > oseconcost){          	econcost = oseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > osprodcost){          	prodcost = osprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Spaceports"){				makeAdjustments(nrow, spaceportsAdjust)				var Spcost = parseInt(itemcost);				Spcost = (Spcost + energycost + areacost)/ 2          	if(econcost > Spcost){          	econcost = Spcost;							table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}				if (cname == "Nanite Factories"){				makeAdjustments(nrow, naniteAdjust)				var nanicost = parseInt(itemcost);				naniprodcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				naniconstcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				nanieconcost = (nanicost + (energycost*2) + areacost + popcost) /2          	if(econcost > nanieconcost){          	econcost = nanieconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > naniprodcost){          	prodcost = naniprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > naniconstcost){          	constcost = naniconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Androids Factories"){				makeAdjustments(nrow, androidAdjust)				var andrcost = parseInt(itemcost);				andrprodcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andrconstcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andreconcost = (andrcost + (energycost*4) + areacost + popcost) /2          	if(econcost > andreconcost){          	econcost = andreconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > andrprodcost){          	prodcost = andrprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > andrconstcost){          	constcost = andrconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}								if (cname == "Economic Centers"){				makeAdjustments(nrow, economicAdjust)				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*2) + areacost + popcost) /3          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}        if (cname == "Capital"){        makeAdjustments(nrow, capitalAdjust)				basesArray = GM_getValue(server+"Bases")				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*12) + areacost + popcost) / (10+basesArray.length)          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}				        if (cname == "Research Labs"){        makeAdjustments(nrow, researchAdjust)				}					        if (cname == "Command Centers"){        makeAdjustments(nrow, ccAdjust)				}		if (flag == 0){				    	getOptionValue(cname);		if (v==1) {		buttontext=document.createElement("a")		buttontext.href="javascript:document.getElementsByName(\'add_stack\')[0].selectedIndex="+a+"; document.getElementsByTagName(\'form\')[1].submit()"		buttontext.innerHTML = "Queue"			if (buttontext) {			if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){			colnum=3			}else{			colnum=5			}				table.childNodes[nrow].childNodes[colnum].style.whiteSpace=\'nowrap\';				table.childNodes[nrow].childNodes[colnum].appendChild(buttontext);			}	}	if (flag == 0 && nrow==table.childNodes.length-1){						flag =1;						nrow = 1;						}		}}}}}function buttonToSelect(option, text, fallback_text) {}function makeAdjustments(nrow, adjustvar){adjust = adjustvar				if(table.childNodes[nrow].childNodes[6].innerHTML.match(/<span id="time/)){				adjust++ 				}				if(adjust>0){				basecost = parseInt(table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, ""))				time = getSeconds(table.childNodes[nrow].childNodes[5].firstChild.nodeValue)/basecost				time = secsToHMS(time*(Math.round(basecost*Math.pow(1.5, adjust))))				table.childNodes[nrow].childNodes[5].innerHTML = table.childNodes[nrow].childNodes[5].innerHTML + "<br />("+time+") "        table.childNodes[nrow].childNodes[1].innerHTML = table.childNodes[nrow].childNodes[1].innerHTML + " (+"+adjust+")"        table.childNodes[nrow].childNodes[2].firstChild.nodeValue = table.childNodes[nrow].childNodes[2].firstChild.nodeValue + " ("+Math.round((basecost*Math.pow(1.5, adjust)))+")"        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        itemcost = itemcost.replace(/[0-9]+\\(/,"")        itemcost = itemcost.replace(/\\)/, "")        }else{        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        }        }function secsToHMS(seconds){        secVar0 = Math.round(seconds);                            // The initial data, in seconds        minVar = Math.floor(secVar0/60);  // The minutes           hourVar = Math.floor(minVar/60);  // The minutes        minVar = minVar % 60;        secVar = secVar0 % 60;              // The balance of seconds        if(hourVar != 0){        return hourVar+"h "+(minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else if(minVar != 0){        return (minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else{        return (secVar<10?\'0\'+secVar:secVar)+"s"        }                }function getOptionValue(obj){v=0x = document.getElementsByName("add_stack")if(x[0]){x = x[0]for (i=0;i<x.length;i++)    {    if(x.options[i].text == obj){    v=1;	a=i    i = x.length    }    }    }    }/*function insertTimeTextBoxes(){    var inputs = document.forms[1].elements;    for(var i = 0; i < inputs.length; i++)    {        if(inputs[i].className == \'quant\')        {            var row = inputs[i].parentNode.parentNode;            //console.log(row);            var cell = document.createElement("td");            cell.setAttribute("align","center");            cell.innerHTML = \'<input type="text" value="" maxlength="5" size="5" name="\'+inputs[i].name+\' - Time" id="\'+inputs[i].name+\' - Time" class="quant" onchange="update(\\\'\'+inputs[i].name+\'\\\')"/>\';            row.appendChild(cell);            cell.addEventListener(\'keyup\',getConvertTimeToQuantityClosure(row),true);			//cell.addEventListener(\'blur\',onProductionTextBoxChanged,true);        }    }        var tbody = inputs[0].parentNode.parentNode.parentNode;    //console.log(tbody.childNodes[0].firstChild);    //Adjust colspan for top row and third row    tbody.childNodes[0].firstChild.setAttribute("colspan",7);    tbody.childNodes[2].firstChild.setAttribute("colspan",7);    //console.log(tbody.childNodes[1].firstChild);    //Insert column title    var titleCell = document.createElement("th");    titleCell.setAttribute("width","10%");    titleCell.textContent = "Time (h)"    tbody.childNodes[1].appendChild(titleCell);		titleCell.previousSibling.setAttribute("width","10%");    //adjust colspan for all help rows    var helpCells = document.evaluate(    "//td[@class=\'help\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(helpCells.snapshotLength);    for(var i=0;i<helpCells.snapshotLength;i++)    {        helpCells.snapshotItem(i).setAttribute("colspan",6);    }    //adjust colspan for all red rows    var redCells = document.evaluate(    "//td[@class=\'red\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(redCells.snapshotLength);    for(var i=0;i<redCells.snapshotLength;i++)    {        redCells.snapshotItem(i).setAttribute("colspan",2);    }    //adjust colspan for last two rows    document.getElementById("fast").addEventListener("click", function(){var inputs = document.forms[1].elements; for(var i = 0; i < inputs.length; i++){if(inputs[i].className == \'quant\'){if(inputs[i].value == ""){}else{var row = inputs[i].parentNode.parentNode; convertTimeToQuantity(row); unsafeWindow.update(inputs[i].name);}}}}, false)    tbody.childNodes[tbody.childNodes.length-1].firstChild.setAttribute("colspan",7);}*/function getConvertTimeToQuantityClosure(row){    function func(){        convertTimeToQuantity(row);    }    ;    return func;}function convertTimeToQuantity(row){	//console.log(row);    var credits = row.childNodes[2].textContent;    var time = row.childNodes[4].textContent;    var qtyInput = row.childNodes[5].firstChild;    var enteredTime;    try{        enteredTime = parseFloat(row.childNodes[6].firstChild.value);    }    catch(Exception)    {        return;    }    if(isNaN(enteredTime)){    enteredTime = 0    }else{    //console.log("Credits: "+credits+" Time: "+time+" qtyInput: "+ qtyInput.value);    //console.log("entered time: "+isNaN(enteredTime));    var totalSeconds = getSeconds(time);    if(totalSeconds != -1)    {        //console.log("Time " +getTimeDisplay(totalSeconds));        var enteredTimeInSeconds = enteredTime*60*60;        //console.log(enteredTimeInSeconds+" / " +totalSeconds);        if(enteredTimeInSeconds < totalSeconds){			qtyInput.value = "";		}else{			if(document.getElementById("fast").checked == true){			qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)*2			}else{				qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)			}		}    }    onProductionTextBoxKeyUp();    }}function getSeconds(timeString){    var regex = /((\\d|,| |\\.)*h)?\\W?((\\d|,| |\\.)*m)?\\W?((\\d|,| |\\.)*s)?/;    var result = regex.exec(timeString);    if(result)    {        //console.log(result);        var h = 0;var m=0;var s=0;        if(result[1] != null)        h = result[1].substring(0,result[1].indexOf("h"));        if(result[3] != null)        m = result[3].substring(0,result[3].indexOf("m"));        if(result[5] != null)        s = result[5].substring(0,result[5].indexOf("s"));        return h*60*60 + m*60 + s*1;    }    else return -1;}function getTimeDisplay(seconds){    var h = Math.floor(seconds/3600);    var m = Math.floor((seconds % 3600)/60);    var s = Math.floor((seconds % 3600) % 60);    var string = s+"s";    if(m>0 || h>0)		string = m+"m "+string;    if(h>0)		string = h+"h "+string;    return string;}var PRESET_KEYS = new Array("Fighters","Bombers","Heavy Bombers","Ion Bombers","Corvette","Recycler","Destroyer","Frigate","Ion Frigate","Scout Ship", "Outpost Ship","Cruiser","Carrier","Heavy Cruiser","Battleship","Fleet Carrier","Dreadnought","Titan","Leviathan","Death Star","Goods");function onProductionTextBoxKeyUp(){    var shipName;    var count=0,cost=0;    var productionCost = 0;    var totalTime = 0;    for(var i = 0;i <PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.log("Failed to find textBox for "+shipName+".");            continue;        }				if(textBox.value != "")        {            var row = textBox.parentNode.parentNode;            var time = row.childNodes[4].textContent;            //console.log(textBox.value);            count = parseInt(textBox.value);            cost = parseInt(textBox.parentNode.previousSibling.previousSibling.previousSibling.innerHTML.replace(/(,| |\\.)/g, ""));            totalTime+= getSeconds(time) * count;            //console.log(count + " " + shipName + "s @ " + cost);            productionCost += (cost * count);			//textBox.parentNode.nextSibling.value = "";        }    }    //console.log("total Time: "+getTimeDisplay(totalTime));    var fastProduction = document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.checked;    //console.info(fastProduction);    if(fastProduction)	{		productionCost *= 2;		totalTime /= 2;	}    //console.log("Text changed. Total production cost: " +productionCost);    var submitButton = document.evaluate(	    "//input[@type=\'submit\']",	    document,	    null,	    XPathResult.FIRST_ORDERED_NODE_TYPE,	    null).singleNodeValue;    if(productionCost > 0)		submitButton.value = "Submit";    else		submitButton.value = "Submit";}function registerTextBoxEventListeners(){    for(var i = 0;i < PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.info("Failed to find textBox for "+shipName+".");            continue;        }        textBox.addEventListener(\'keyup\',onProductionTextBoxKeyUp,false);		//textBox.addEventListener(\'blur\',onProductionTextBoxChanged,true);    }    document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'change\',onProductionTextBoxKeyUp,false);    //document.evaluate("//input[@type=\'reset\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'click\',onProductionTextBoxKeyUp,true);    document.evaluate("//form[@method=\'post\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'reset\',onProductionTextBoxKeyUp,false);}function productionHelperOnClick(num, box) {	num=num.replace("+", "")	num=num.replace(" ","")	num=num.replace("k","000")		document.getElementById(box).value = parseInt(document.getElementById(box).value) + parseInt(num);     calculateTotals();}function prodHelperEvent(e) {  if (e.shiftKey && (e.name == \'fast\')) {    for (i=0; i<empireLinks.length; i++) {    document.getElementById("fast_"+empireLinks[i]).checked = e.checked;    }  } else if (e.shiftKey && (e.name == \'unit\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("unit_"+empireLinks[i]).selectedIndex = e.selectedIndex;    }  } else if (e.shiftKey && (e.name == \'quant\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("quant_"+empireLinks[i]).value = e.value;    }  }  if ((e.name == \'fast\')||(e.name == \'unit\')||(e.name == \'quant\'))    calculateTotals();}function calculateTotals() {	var pcost = 0;  for (i=0; i<empireLinks.length; i++) {    n = (document.getElementById("fast_"+empireLinks[i]).checked) ? 2 : 1;    pcost += parseInt(ProductionGetCost[document.getElementById("unit_"+empireLinks[i]).selectedIndex] * document.getElementById("quant_"+empireLinks[i]).value * n);	}	document.getElementById(\'cost_all\').innerHTML = pcost+\' credits\';	var credits_left = parseInt(numcredits) - pcost;	document.getElementById(\'cost_all\').style.color = (credits_left < 0) ? \'red\' : \'\';}function resetForm() {  for (i=0; i<empireLinks.length; i++) {    document.getElementById("unit_"+empireLinks[i]).selectedIndex = 0;    document.getElementById("fast_"+empireLinks[i]).checked = false;    document.getElementById("quant_"+empireLinks[i]).value = 0;    returnto = i    calculateTotals();    i=returnto;  }}function startSubmitQueue() {  submitQueue(0);}function submitQueue(i) {    if (document.getElementById("quant_"+empireLinks[i]).value != 0) {      var postData = document.getElementById("unit_"+empireLinks[i]).value+"="+document.getElementById("quant_"+empireLinks[i]).value+"&post_back=true";      if (document.getElementById("fast_"+empireLinks[i]).checked)        postData += "&fast=true";      document.getElementById("quant_"+empireLinks[i]).value = \'ok\';      document.getElementById("quant_"+empireLinks[i]).style.backgroundColor = \'red\';      GM_xmlhttpRequest({        method: "POST",        url: serverurl+"base.aspx?base="+empireLinks[i]+"&view=production",        data: encodeURI(postData),        headers:{\'Content-type\':\'application/x-www-form-urlencoded\'},     		onreadystatechange: function(xhr) {if (xhr.readyState == "4") {endSubmitQueue(i, "1");}}      });    } else {      endSubmitQueue(i, "0");    }}function endSubmitQueue(i, value) {time=1000+Math.floor(Math.random()*1001)  if (i == empireLinks.length-1)    window.setTimeout(function(){ location.reload(true)}, time);  else  if(value == 0){  submitQueue(i+1)  }else{    window.setTimeout(function(){ submitQueue(i+1)}, time);    }}function productionHelper() {  var btn_details = [];  btn_details.push([1,\'+1 \']);  btn_details.push([5,\'+5 \']);  btn_details.push([10,\'+10 \']);  btn_details.push([25,\'+25 \']);  btn_details.push([100,\'+100 \']);  btn_details.push([250,\'+250 \']);  btn_details.push([1000,\'+1k \']);  table.rows[1].childNodes[4].innerHTML = \'Fast Prod\';  table.rows[1].childNodes[5].innerHTML = \'Unit Type\';  table.rows[1].childNodes[6].innerHTML = \'Quantity\';  table.rows[1].childNodes[3].innerHTML = \'Current Queue\';  a=0;  table.firstChild.style.display=\'none\';  for (i=2; i<table.rows.length; i=i+2) {    var currentRow = table.rows[i];		var res = /\\?base=((\\d|,| |\\.)+)/.exec(table.rows[i].childNodes[0].firstChild.href);	  table.rows[i+1].style.display = \'none\';	  empireLinks[a] = res[1];	  a++;	  currentRow.childNodes[3].innerHTML = currentRow.childNodes[5].innerHTML + "<br />" + table.rows[i+1].childNodes[3].innerHTML    currentRow.childNodes[4].innerHTML = "<input type=\'checkbox\' name=\'fast\' class=\'check\' id=\'fast_"+res[1]+"\' onfocus=\\"selectedBox=\'fast_"+res[1]+"\'\\" />";    currentRow.childNodes[6].innerHTML = "<input type=\'text\' name=\'quant\' class=\'quant\' id=\'quant_"+res[1]+"\' size=\'5\' maxlength=\'5\' value=\'0\' onfocus=\\"selectedBox=\'quant_"+res[1]+"\'\\" />";    var html = "<select name=\'unit\' id=\'unit_"+res[1]+"\' onfocus=\\"selectedBox=\'unit_"+res[1]+"\'\\"><option value=\'Fighters\'>Fighters</option><option value=\'Bombers\'>Bombers</option>";    html += "<option value=\'Heavy Bombers\'>Heavy Bombers</option><option value=\'Ion Bombers\'>Ion Bombers</option><option value=\'Corvette\'>Corvette</option>";    html += "<option value=\'Recycler\'>Recycler</option><option value=\'Destroyer\'>Destroyer</option><option value=\'Frigate\'>Frigate</option>"    html += "<option value=\'Ion Frigate\'>Ion Frigate</option><option value=\'Scout Ship\'>Scout Ship</option><option value=\'Outpost Ship\'>Outpost Ship</option>";    html += "<option value=\'Cruiser\'>Cruiser</option><option value=\'Carrier\'>Carrier</option><option value=\'Heavy Cruiser\'>Heavy Cruiser</option>";    html += "<option value=\'Battleship\'>Battleship</option><option value=\'Fleet Carrier\'>Fleet Carrier</option><option value=\'Dreadnought\'>Dreadnought</option>";    html += "<option value=\'Titan\'>Titan</option><option value=\'Leviathan\'>Leviathan</option><option value=\'Death Star\'>Death Star</option></select>";    currentRow.childNodes[5].innerHTML = html;    document.getElementById("unit_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("quant_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("fast_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    for(c=0; c<7; c++) {      var num = btn_details[c][0];      l = document.createElement("a");		l.href = "javascript:void(1);";		l.id= i + btn_details[c][1];		l.innerHTML = btn_details[c][1];            l.name = "quant_"+res[1];      currentRow.childNodes[6].appendChild(l);      document.getElementById(i + btn_details[c][1]).addEventListener(\'click\', function(){ productionHelperOnClick(this.innerHTML, this.name );}, true);    }  }  l = document.createElement("tr");  l.id="extrarow1";  table.appendChild(l);  l = document.createElement("td");		l.innerHTML = "0 credits";      l.className = \'help\';      l.align = "right";      l.id="cost_all"      document.getElementById("extrarow1").appendChild(l);      document.getElementById("cost_all").colSpan="7";      l = document.createElement("tr");      l.id="extrarow2";      table.appendChild(l);      l = document.createElement("td");      l.className = \'help\';      l.align = "right";          l.id="prodHelperButtons"      document.getElementById("extrarow2").appendChild(l);      document.getElementById("prodHelperButtons").colSpan="7";      l = document.createElement("input");      l.type = "reset";      l.id = "resetButton";      l.value = "Reset";      document.getElementById("prodHelperButtons").appendChild(l);      l = document.createElement("input");      l.type = "submit";      l.id = "submitButton";      l.value = "submit";      document.getElementById("prodHelperButtons").appendChild(l);   document.getElementById("submitButton").addEventListener(\'click\', function(){ startSubmitQueue();}, true);  document.getElementById("resetButton").addEventListener(\'click\', function(){ resetForm();}, true);}function productionHelperButton() {		table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;		var prodTitle = table.childNodes[1].childNodes[5];		scoutButton = document.createElement("a");		scoutButton.href = "javascript:void(1);";		scoutButton.id= "prodHelperButton";		scoutButton.innerHTML=" [&#177;]";		scoutButton.title = "Production Helper"		prodTitle.appendChild(scoutButton)		document.getElementById(\'prodHelperButton\').addEventListener(\'click\', function() {productionHelper();}, true);	}function saveTechData(){    //console.log("Saving tech data");    var techData = new Array();    var rows = document.evaluate(    "//tr[@align=\'center\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log("Tech rows: "+ rows.snapshotLength);    for (var i = 0; i < rows.snapshotLength; i++)    {        var techNameCell = document.evaluate(        "th[1]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        var techValueCell = document.evaluate(        "td[4]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        if(techNameCell.snapshotLength > 0)        {            var techValue = parseInt(techValueCell.snapshotItem(0).innerHTML.replace(/(,| |\\.)/g, ""));            var techName = techNameCell.snapshotItem(0).innerHTML;            //console.log(techName +": "+techValue);            techData[i] = techValue;        }    }    GM_setValue(server+"techData",techData.join());}/* function scannerGrab(){tableArray = document.getElementsByTagName("table")for(i=0; i<tableArray.length; i++){if(tableArray[i].innerHTML.match(/<th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=fleet">Fleet<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=player">Player<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=destination">Destination<\\/a><\\/th><th width="20%"><a href="empire.aspx\\?view=scanners&amp;order=arrival">Arrival<\\/a><\\/th><th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=size">Size<\\/a><\\/th>/)){table = tableArray[i]fleetId = []fleetName = []fleetOwner = []ownerId = []fleetDest = []fleetArrive = []fleetSize = []for(a=1; a<table.rows.length; a++){fleetId[a-1] = table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=/, "") fleetId[a-1] = fleetId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetName[a-1]=table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetName[a-1]=fleetName[a-1].replace(/<\\/a>/, "");fleetOwner[a-1]=table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=[0-9]{1,}">/, "")fleetOwner[a-1]=fleetOwner[a-1].replace(/<\\/a>/, "");ownerId[a-1] =table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=/, "")ownerId[a-1] = ownerId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetDest[a-1]=table.rows[a].childNodes[2].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)fleetArrive[a-1]=parseInt(table.rows[a].childNodes[3].title)+Math.round(new Date().getTime()/1000.0)fleetSize[a-1]=table.rows[a].childNodes[4].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetSize[a-1]=fleetSize[a-1].replace(/<\\/a>(.*?)/, "");fleetSize[a-1]=fleetSize[a-1].replace(/(,| |.)/, "");}sendData = "&fleetId="+fleetId+"&fleetName="+fleetName+"&fleetOwner="+fleetOwner+"&ownerId="+ownerId+"&fleetDest="+fleetDest+"&fleetArrive="+fleetArrive+"&fleetSize="+fleetSize+"&seenBy="+document.getElementById(\'account\').parentNode.childNodes[1].innerHTML.replace(/[A-Za-z]./, \'\')if(GIAServers.inArray(server)){sendtoserver(sendData, "scanners.php")}}}}*/// If NS -- that is, !IE -- then set up for mouse capturedocument.captureEvents(Event.MOUSEMOVE)// Set-up to use getMouseXY function onMouseMovedocument.addEventListener("mousemove", function(e) {getMouseXY(e)}, true);// Temporary variables to hold mouse x-y pos.svar tempX = 0var tempY = 0// Main function to retrieve mouse x-y pos.sfunction getMouseXY(e) {// grab the x-y pos.s if browser is NS    tempX = e.pageX    tempY = e.pageY  // catch possible negative values in NS4  if (tempX < 0){tempX = 0}  if (tempY < 0){tempY = 0}  // show the position values in the form named Show  // in the text fields named MouseX and MouseY  return true}function linkEventListeners(){if(GIAServers.inArray(server)){linkArray=document.getElementsByTagName("a")for(i=0; i<linkArray.length; i++){if(linkArray[i].href.match(/map.aspx\\?(.*?)loc=E[0-9]{2}:[0-9]{2}:[0-9]{2}/)){linkArray[i].addEventListener("mouseover", function(e) {showBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""), tempX, tempY)}, true);linkArray[i].addEventListener("mouseout", function() {hideBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""))}, true);}}}}function linkChange(){	linkArray=document.getElementsByTagName(\'a\')	for(i=0; i < linkArray.length; i++){		linkArray[i].target = "_blank"	}}  ////////////////////////////////////////// /// Execution //////////////////////////////////////////////////////////////////////if(document.location.href.match(/astroempires.com/)){replaceTime();if(document.location.href.match(/loc=[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){	if(document.body.innerHTML.match(/<th colspan=.4.>Base<\\/th>/)){	if(GIAServers.inArray(server)){	centerArray=document.getElementsByTagName(\'center\')	for(i=0; i<centerArray.length; i++){	if(centerArray[i].innerHTML.match(/Astro Type:/)){	baseLink = document.body.innerHTML.match(/base.aspx\\?base=[0-9]{1,}/)[0]	sourceDiv = document.createElement("div")	sourceDiv.id="baseDiv";	sourceDiv.innerHTML="Visit the <a href=\\""+baseLink+"\\">base page</a> to add this base to GIA.<br /><br />";	centerArray[i].appendChild(sourceDiv)	}	}	}	}}else if(document.location.href.match(/[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}/)){	debrisShow()}else if(document.location.href.match(/http:\\/\\/(.+?)\\.astroempires\\.com\\/base\\.aspx\\?base=[0-9]{1,}$/)){	if(window.parent.document.location.href != document.location.href){	baseDetails();	}}else if(document.location.href.match(/empire.aspx$/) || document.location.href.match(/empire.aspx\\?view=bases_events$/)){	productionHelperButton();}else if(document.location.href.match(/view=scanners/)){	scannerFormat();}else if(window.location.href.match(/empire.aspx\\?view=fleets/)){        sumShips();}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=structures/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=defenses/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){	if(!document.location.href.match(/&info=/)){enhanceConstructionPage();}}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=production/)){insertTimeTextBoxes()}if(window.location.href.indexOf(\'view=move\')==-1 && window.location.href.indexOf(\'view=fleets\')==-1 &&		window.location.href.indexOf(\'view=production\')==-1 && window.location.href.indexOf(\'view=structures\')==-1 &&		window.location.href.indexOf(\'view=trade\')==-1 && window.location.href.indexOf(\'view=research\')==-1){		formatVariousNumbers();	}	}'
                                                         }, 'Mojo::Asset::Memory' ),
                                       'pre_buffer' => '',
                                       'buffer' => '',
                                       'events' => {
                                                     'read' => [
                                                                 sub { "DUMMY" }
                                                               ]
                                                   },
                                       'read' => $VAR1->{'content'}{'events'}{'read'}[0],
                                       'body' => 2,
                                       'state' => 'finished',
                                       'raw_size' => 63681
                                     }, 'Mojo::Content::Single' )
               }, 'Mojo::Message::Request' );

[Wed Oct 22 14:08:59 2014] [debug] 200 OK (0.103785s, 9.635/s).
[Wed Oct 22 14:09:26 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 14:09:26 2014] [debug] wtf
[Wed Oct 22 14:09:26 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 14:09:29 2014] [debug] $VAR1 = [];

[Wed Oct 22 14:09:29 2014] [debug] POST "/ae/gia".
[Wed Oct 22 14:09:29 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 14:09:29 2014] [debug] $VAR1 = bless( {
                 'env' => {
                            'psgi.errors' => *::STDERR,
                            'psgi.nonblocking' => '',
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'psgi.multiprocess' => '',
                            'HTTP_CONNECTION' => 'close',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'HTTP_ACCEPT' => '*/*',
                            'QUERY_STRING' => '',
                            'psgix.input.buffered' => 1,
                            'HTTP_HOST' => 'localhost',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'CONTENT_LENGTH' => '63681',
                            'REQUEST_METHOD' => 'POST',
                            'SERVER_NAME' => 0,
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'psgi.multithread' => '',
                            'PATH_INFO' => '/ae/gia',
                            'psgix.harakiri' => 1,
                            'REMOTE_ADDR' => '127.0.0.1',
                            'REMOTE_PORT' => 54507,
                            'psgi.input' => bless( \*{'Stream::Buffered::PerlIO::$io'}, 'FileHandle' ),
                            'psgi.url_scheme' => 'http',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'REQUEST_URI' => '/ae/gia',
                            'psgi.run_once' => '',
                            'SERVER_PORT' => 5000,
                            'psgix.io' => bless( \*Symbol::GEN1, 'IO::Socket::INET' ),
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'psgi.streaming' => 1,
                            'SCRIPT_NAME' => ''
                          },
                 'buffer' => '',
                 'events' => {},
                 'version' => '1.0',
                 'max_message_size' => 10485760,
                 'content' => bless( {
                                       'headers' => bless( {
                                                             'normalcase' => {
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT'
                                                                             },
                                                             'headers' => {
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'content-length' => [
                                                                                                  '63681'
                                                                                                ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ],
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ]
                                                                          }
                                                           }, 'Mojo::Headers' ),
                                       'size' => 63681,
                                       'auto_upgrade' => 1,
                                       'real_size' => 63681,
                                       'buffer' => '',
                                       'events' => {
                                                     'read' => [
                                                                 sub { "DUMMY" }
                                                               ]
                                                   },
                                       'pre_buffer' => '',
                                       'asset' => bless( {
                                                           'content' => '// ==UserScript==// @name           GIA Script (Modified)// @author          Luke Bonaccorsi AKA SpeedySurfer// @namespace       http://gears.speedysurfer.co.uk// @description     Scouts for bases in the current region// @license         Creative Commons Attribution License// @include        http://*.astroempires.com/*// @exclude        http://*.astroempires.com/login.aspx// @exclude        http://*.astroempires.com/home.aspx// ==/UserScript==/* * This file is a Greasemonkey user script. To install it, you need  * the Firefox plugin "Greasemonkey" (URL: http://greasemonkey.mozdev.org/) * After you installed the extension, restart Firefox and revisit  * this script. Now you will see a new menu item "Install User Script" * in your tools menu. *  * To uninstall this script, go to your "Tools" menu and select  * "Manage User Scripts", then select this script from the list * and click uninstall :-) * * Creative Commons Attribution License (--> or Public Domain) * http://creativecommons.org/licenses/by/2.5/*/  ////////////////////////////////////////// /// Variables //////////////////////////////////////////////////////////////////////if (document.location.href.match(/(.+?)astroempires.com/)){var server=document.location.href.match(/\\/(.+?).astroempires.com/)[1]server = server.replace(/\\//, "")var serverurl= "http://"+server+".astroempires.com/"}if(document.location.href.match(/astroempires.com/)){var empireLinks = []; var ProductionGetCost = [5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000]; var numcredits = document.evaluate(    "/html/body/table/tbody/tr/th/table/tbody/tr[2]/th[2]",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    numcredits = numcredits.snapshotItem(0).innerHTML;var FT_INDEX = 0;var BO_INDEX = 1;var HB_INDEX = 2;var IB_INDEX = 3;var CV_INDEX = 4;var RC_INDEX = 5;var DE_INDEX = 6;var FR_INDEX = 7;var IF_INDEX = 8;var SS_INDEX = 9;var OS_INDEX = 10;var CR_INDEX = 11;var CA_INDEX = 12;var HC_INDEX = 13;var BC_INDEX = 14;var FC_INDEX = 15;var DN_INDEX = 16;var TI_INDEX = 17;var LE_INDEX = 18;var DS_INDEX = 19;var BARRACKS_INDEX = 20;var LASER_TURRETS_INDEX = 21;var MISSLE_TURRETS_INDEX = 22;var PLASMA_TURRENTS_INDEX = 23;var ION_TURRETS_INDEX = 24;var PHOTON_TURRETS_INDEX = 25;var DISRUPTOR_TURRETS_INDEX = 26;var DEFLECTION_SHIELDS_INDEX = 27;var PLANETARY_SHIELD_INDEX = 28;var PLANETARY_RING_INDEX = 29;var fightingShips = "11111011100101101111";var shipValues = new Array(5,10,30,60,20,30,40,80,120,40,100,200,400,500,2000,2500,10000,50000,200000,500000);var shipHangarValues = new Array(0,0,0,0,0,0,0,4,4,0,0,4,60,8,40,400,200,1000,4000,10000);var GIAServers = new Array("bravo");}  ////////////////////////////////////////// /// Misc /////////////////////////////////////////////////////////////////////////Array.prototype.inArray = function (value)// Returns true if the passed value is found in the// array. Returns false if it is not.{var i;for (i=0; i < this.length; i++) {// Matches identical (===), not just similar (==).if (this[i] === value) {return true;}}return false;};function replaceTime(){	  for(n=1;n<=500;n++)	  {		elem=document.getElementById(\'time\'+n);	    if (!elem)	    {	       break;	    }	    elem.id = \'blah\'+n;	    s=elem.title;	    var newElement, endTime;	    var d = new Date();	    var now = new Date();	    if (elem)	    {	       if(s<=0)	       {		 endTime="-"	       }	       else	       {		 d.setTime(d.getTime()+(s*1000));		 tempdate = new Date();		 tempdate.setDate(tempdate.getDate()+1)		 if(now.toLocaleDateString() == d.toLocaleDateString() )		 {		    endTime="Today @ "+d.formatDate(\'H:i:s\');		 }		 else if(tempdate.toLocaleDateString() == d.toLocaleDateString())		 {		    endTime="Tomorrow @ "+d.formatDate(\'H:i:s\');		 }		 else		 {		    endTime=d.formatDate(\'D jS M @ H:i:s\');		 }	       }	       elem.innerHTML = "<b><span id=\'time"+n+"\' title=\'"+ s +"\'>-</span></b><br><nobr><span id=\'done"+n+"\' style=\'font-size: xx-small; color: "+getAgeCol(s)+"\'>" + endTime + "</span></nobr>"	    }	  }};  // formatDate :// a PHP date like function, for formatting date strings// authored by Svend Tofte <www.svendtofte.com>// the code is in the public domain//// see http://www.svendtofte.com/javascript/javascript-date-string-formatting/// and http://www.php.net/date//// thanks to//  - Daniel Berlin <mail@daniel-berlin.de>,//    major overhaul and improvements//  - Matt Bannon,//    correcting some stupid bugs in my days-in-the-months list!//  - levon ghazaryan. pointing out an error in z switch.//  - Andy Pemberton. pointing out error in c switch//// input : format string// time : epoch time (seconds, and optional)//// if time is not passed, formatting is based on// the current "this" date object\'s set time.//// supported switches are// a, A, B, c, d, D, F, g, G, h, H, i, I (uppercase i), j, l (lowecase L),// L, m, M, n, N, O, P, r, s, S, t, U, w, W, y, Y, z, Z//// unsupported (as compared to date in PHP 5.1.3)// T, e, oDate.prototype.formatDate = function (input,time) {    var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday",                       "Thursday", "Friday", "Saturday"];    var daysShort =   ["Sun", "Mon", "Tue", "Wed",                       "Thu", "Fri", "Sat"];    var monthsShort = ["Jan", "Feb", "Mar", "Apr",                       "May", "Jun", "Jul", "Aug", "Sep",                       "Oct", "Nov", "Dec"];    var monthsLong =  ["January", "February", "March", "April",                       "May", "June", "July", "August", "September",                       "October", "November", "December"];    var switches = { // switches object        a : function () {            // Lowercase Ante meridiem and Post meridiem            return date.getHours() > 11? "pm" : "am";        },        A : function () {            // Uppercase Ante meridiem and Post meridiem            return (this.a().toUpperCase ());        },        B : function (){            // Swatch internet time. code simply grabbed from ppk,            // since I was feeling lazy:            // http://www.xs4all.nl/~ppk/js/beat.html            var off = (date.getTimezoneOffset() + 60)*60;            var theSeconds = (date.getHours() * 3600) +                             (date.getMinutes() * 60) +                              date.getSeconds() + off;            var beat = Math.floor(theSeconds/86.4);            if (beat > 1000) beat -= 1000;            if (beat < 0) beat += 1000;            if ((String(beat)).length == 1) beat = "00"+beat;            if ((String(beat)).length == 2) beat = "0"+beat;            return beat;        },        c : function () {            // ISO 8601 date (e.g.: "2004-02-12T15:19:21+00:00"), as per            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            return (this.Y() + "-" + this.m() + "-" + this.d() + "T" +                    this.H() + ":" + this.i() + ":" + this.s() + this.P());        },        d : function () {            // Day of the month, 2 digits with leading zeros            var j = String(this.j());            return (j.length == 1 ? "0"+j : j);        },        D : function () {            // A textual representation of a day, three letters            return daysShort[date.getDay()];        },        F : function () {            // A full textual representation of a month            return monthsLong[date.getMonth()];        },        g : function () {           // 12-hour format of an hour without leading zeros, 1 through 12!           if (date.getHours() == 0) {               return 12;           } else {               return date.getHours()>12 ? date.getHours()-12 : date.getHours();           }       },        G : function () {            // 24-hour format of an hour without leading zeros            return date.getHours();        },        h : function () {            // 12-hour format of an hour with leading zeros            var g = String(this.g());            return (g.length == 1 ? "0"+g : g);        },        H : function () {            // 24-hour format of an hour with leading zeros            var G = String(this.G());            return (G.length == 1 ? "0"+G : G);        },        i : function () {            // Minutes with leading zeros            var min = String (date.getMinutes ());            return (min.length == 1 ? "0" + min : min);        },        I : function () {            // Whether or not the date is in daylight saving time (DST)            // note that this has no bearing in actual DST mechanics,            // and is just a pure guess. buyer beware.            var noDST = new Date ("January 1 " + this.Y() + " 00:00:00");            return (noDST.getTimezoneOffset () ==                    date.getTimezoneOffset () ? 0 : 1);        },        j : function () {            // Day of the month without leading zeros            return date.getDate();        },        l : function () {            // A full textual representation of the day of the week            return daysLong[date.getDay()];        },        L : function () {            // leap year or not. 1 if leap year, 0 if not.            // the logic should match iso\'s 8601 standard.            // http://www.uic.edu/depts/accc/software/isodates/leapyear.html            var Y = this.Y();            if (                (Y % 4 == 0 && Y % 100 != 0) ||                (Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0)                ) {                return 1;            } else {                return 0;            }        },        m : function () {            // Numeric representation of a month, with leading zeros            var n = String(this.n());            return (n.length == 1 ? "0"+n : n);        },        M : function () {            // A short textual representation of a month, three letters            return monthsShort[date.getMonth()];        },        n : function () {            // Numeric representation of a month, without leading zeros            return date.getMonth()+1;        },        N : function () {            // ISO-8601 numeric representation of the day of the week            var w = this.w();            return (w == 0 ? 7 : w);        },        O : function () {            // Difference to Greenwich time (GMT) in hours            var os = Math.abs(date.getTimezoneOffset());            var h = String(Math.floor(os/60));            var m = String(os%60);            h.length == 1? h = "0"+h:1;            m.length == 1? m = "0"+m:1;            return date.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;        },        P : function () {            // Difference to GMT, with colon between hours and minutes            var O = this.O();            return (O.substr(0, 3) + ":" + O.substr(3, 2));        },        r : function () {            // RFC 822 formatted date            var r; // result            //  Thu         ,     21               Dec              2000            r = this.D() + ", " + this.d() + " " + this.M() + " " + this.Y() +            //    16          :    01          :    07               0200            " " + this.H() + ":" + this.i() + ":" + this.s() + " " + this.O();            return r;        },        s : function () {            // Seconds, with leading zeros            var sec = String (date.getSeconds ());            return (sec.length == 1 ? "0" + sec : sec);        },        S : function () {            // English ordinal suffix for the day of the month, 2 characters            switch (date.getDate ()) {                case  1: return ("st");                case  2: return ("nd");                case  3: return ("rd");                case 21: return ("st");                case 22: return ("nd");                case 23: return ("rd");                case 31: return ("st");                default: return ("th");            }        },        t : function () {            // thanks to Matt Bannon for some much needed code-fixes here!            var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];            if (this.L()==1 && this.n()==2) return 29; // ~leap day            return daysinmonths[this.n()];        },        U : function () {            // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)            return Math.round(date.getTime()/1000);        },        w : function () {            // Numeric representation of the day of the week            return date.getDay();        },        W : function () {            // Weeknumber, as per ISO specification:            // http://www.cl.cam.ac.uk/~mgk25/iso-time.html            var DoW = this.N ();            var DoY = this.z ();            // If the day is 3 days before New Year\'s Eve and is Thursday or earlier,            // it\'s week 1 of next year.            var daysToNY = 364 + this.L () - DoY;            if (daysToNY <= 2 && DoW <= (3 - daysToNY)) {                return 1;            }            // If the day is within 3 days after New Year\'s Eve and is Friday or later,            // it belongs to the old year.            if (DoY <= 2 && DoW >= 5) {                return new Date (this.Y () - 1, 11, 31).formatDate ("W");            }            var nyDoW = new Date (this.Y (), 0, 1).getDay ();            nyDoW = nyDoW != 0 ? nyDoW - 1 : 6;            if (nyDoW <= 3) { // First day of the year is a Thursday or earlier                return (1 + Math.floor ((DoY + nyDoW) / 7));            } else {  // First day of the year is a Friday or later                return (1 + Math.floor ((DoY - (7 - nyDoW)) / 7));            }        },        y : function () {            // A two-digit representation of a year            var y = String(this.Y());            return y.substring(y.length-2,y.length);        },        Y : function () {            // A full numeric representation of a year, 4 digits            // we first check, if getFullYear is supported. if it            // is, we just use that. ppks code is nice, but wont            // work with dates outside 1900-2038, or something like that            if (date.getFullYear) {                var newDate = new Date("January 1 2001 00:00:00 +0000");                var x = newDate .getFullYear();                if (x == 2001) {                    // i trust the method now                    return date.getFullYear();                }            }            // else, do this:            // codes thanks to ppk:            // http://www.xs4all.nl/~ppk/js/introdate.html            var x = date.getYear();            var y = x % 100;            y += (y < 38) ? 2000 : 1900;            return y;        },        z : function () {            // The day of the year, zero indexed! 0 through 366            var s = "January 1 " + this.Y() + " 00:00:00 GMT" + this.O();            var t = new Date(s);            var diff = date.getTime() - t.getTime();            return Math.floor(diff/1000/60/60/24);        },        Z : function () {            // Timezone offset in seconds            return (date.getTimezoneOffset () * -60);        }    }    function getSwitch(str) {        if (switches[str] != undefined) {            return switches[str]();        } else {            return str;        }    }    var date;    if (time) {        var date = new Date (time);    } else {        var date = this;    }    var formatString = input.split("");    var i = 0;    while (i < formatString.length) {        if (formatString[i] == "%") {            // this is our way of allowing users to escape stuff            formatString.splice(i,1);        } else {            formatString[i] = getSwitch(formatString[i]);        }        i++;    }    return formatString.join("");}// Some (not all) predefined format strings from PHP 5.1.1, which// offer standard date representations.// See: http://www.php.net/manual/en/ref.datetime.php#datetime.constants//// Atom      "2005-08-15T15:52:01+00:00"Date.DATE_ATOM    = "Y-m-d%TH:i:sP";// ISO-8601  "2005-08-15T15:52:01+0000"Date.DATE_ISO8601 = "Y-m-d%TH:i:sO";// RFC 2822  "Mon, 15 Aug 2005 15:52:01 +0000"Date.DATE_RFC2822 = "D, d M Y H:i:s O";// W3C       "2005-08-15 15:52:01+00:00"Date.DATE_W3C     = "Y-m-d%TH:i:sP";function getAgeCol(age) {		var col = \'#461B7E\'; // 72 hours +		if (age <= 3600)			col = \'#FFFFFF\'; // 1 hour		else if (age <=10800)			col = \'#FFFFFF\'; // 3 hours		else if (age <=21600)			col = \'#9E7BFF\'; // 6 hours		else if (age <=43200)			col = \'#9172EC\'; // 12 hours		else if (age <=86400)			col = \'#8467D7\'; // 24 hours		else if (age <=172800)			col = \'#7A5DC7\'; // 48 hours		else if (age <=259200)			col = \'#461B7E\'; // 72 hours		return col;}function debrisShow(){	spanArray = document.getElementsByTagName("span")	for(i=0; i<spanArray.length; i++){		if(spanArray[i].getAttribute("class") == "gray"){		spanArray[i].innerHTML = spanArray[i].title		}	}}function formatVariousNumbers(){	var debrisElement = document.evaluate(    "//center[contains(text(),\'Debris\')]",    document,    null,    XPathResult.FIRST_ORDERED_NODE_TYPE,    null).singleNodeValue;    if(debrisElement !=null)    {        var debrisMessage = debrisElement.textContent;        console.log(debrisMessage);        var indexOfText = debrisMessage.indexOf(" credits");        var valueText = debrisMessage.substring(0,indexOfText);        var value = commaFormat(parseInt(valueText));        //console.log(valueText+" new value:" +value.toString());        //console.log(debrisElement.textContent + " -< " + debrisElement.textContent.replace(valueText,value.toString()));        debrisElement.textContent = debrisElement.textContent.replace(valueText,value.toString());    }}function scannerFormat(){	baseArray=document.getElementsByTagName("a")	bases = GM_getValue(server+"Bases")	for(i=0; i<baseArray.length; i++){		if(baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){			basecoord=baseArray[i].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)			if(bases.match(basecoord)){			baseArray[i].setAttribute("style", "color: red; font-weight: normal;")			}		}	}}var galaxyInfoArrays = new Array();function getGalaxyInfoArray(galaxy){	if(galaxyInfoArrays[galaxy]==undefined)	{		var newArray = new Array(20);		for(var i = 0; i < 20;i++)		{			newArray[i] = 0;		}		galaxyInfoArrays[galaxy] = new Array(galaxy,0,newArray,0,0);//[galaxy number],[mobile fleet count],[mobilefleetarray],[total fighting fleet],[total fleet],	}	return galaxyInfoArrays[galaxy];}function isBase(base){	bases = GM_getValue(server+"Bases")    if(bases==null)    return false;    if(bases.match(base)){        return true;    }else{    return false;	}}function insertTotalsRow(node,sums,mobileSums,fleetCount,mobileFleetCount,overallFleetTotal,overallFightingFleetTotal,overallMobileFleetTotal,overallMobileFightingFleetTotal){    	//GALAXY ROWS	for(var i = 0;i<galaxyInfoArrays.length;i++)	{		var galaxyInfoArray = galaxyInfoArrays[i];		if(galaxyInfoArray==undefined || galaxyInfoArray[1] == 0)			continue;				var sumRow = document.createElement("tr");	    sumRow.setAttribute(\'align\',\'center\');	    	    var element = sumRow.insertCell(0);	    element.textContent = "Mobile Fleets ("+i+")";	    element = sumRow.insertCell(1);	    element.textContent = galaxyInfoArray[1];	    		var galaxyFleetSums = galaxyInfoArray[2];		for(var k = 0; k < 20; k++)	    {	        //console.log(sums[k]);	        var cell = document.createElement("td");	        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	        if(galaxyFleetSums[k] > 0)				cell.innerHTML = "<small>"+galaxyFleetSums[k]+"</small>";	        //console.log(element);	        sumRow.insertBefore(cell,null);	    }	    //Add totals cell	    var cell = document.createElement("td");	    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");	    cell.innerHTML =galaxyInfoArray[3] +" / "+ galaxyInfoArray[4];	    //console.log(element);	    sumRow.insertBefore(cell,null);	    node.insertBefore(sumRow,null);	}	//MOBILE ROW	var sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    var element = sumRow.insertCell(0);    element.textContent = "Total Mobile Fleets";    element = sumRow.insertCell(1);    element.textContent = mobileFleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(mobileSums[k] > 0)			cell.innerHTML = "<small>"+mobileSums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallMobileFightingFleetTotal +" / "+ overallMobileFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);    //TOTAL ROW    sumRow = document.createElement("tr");    sumRow.setAttribute(\'align\',\'center\');    element = sumRow.insertCell(0);    element.textContent = "Total Fleets";    element = sumRow.insertCell(1);    element.textContent = fleetCount;    for(var k = 0; k < 20; k++)    {        //console.log(sums[k]);        var cell = document.createElement("td");        cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");        if(sums[k] > 0)			cell.innerHTML = "<small>"+sums[k]+"</small>";        //console.log(element);        sumRow.insertBefore(cell,null);    }    //Add totals cell    var cell = document.createElement("td");    //cell.setAttribute("style","border: #000066 solid 1px; border-width: 0 1 1 1;");    cell.innerHTML =overallFightingFleetTotal +" / "+ overallFleetTotal;    //console.log(element);    sumRow.insertBefore(cell,null);    node.insertBefore(sumRow,null);}function node(opt) {  function attr(name) {    var value = opt[name];    delete opt[name];    return value;  }  var expandos = { id: 1, className: 1, title: 1, type: 1, checked: 1 };  var id = opt.id;  var n = document.getElementById(id);  if (!n) {    var tag = attr("tag") || "div";    if ("string" == typeof tag)      n = document.createElement(tag);    else {      var t = document.createElement("div");      t.innerHTML = tag.toXMLString();      var ids = {};      for each (var n in $x(\'.//*[@id]\', t))        ids[n.id] = 1;      if (!n) ids = null;      var r = document.createRange();      r.selectNodeContents(t);      n = r.extractContents();      if (n.childNodes.length == 1)        n = n.firstChild;    }    var after = attr("after");    var before = opt.prepend ? opt.prepend.firstChild : attr("before");    var parent = attr("prepend") || attr("append") ||                   (before || after || {}).parentNode;    if (parent) {      if (before)        parent.insertBefore(n, before);      else if (after)        parent.insertBefore(n, after.nextSibling);      else        parent.appendChild(n);    }    if (id) n.id = id;  }  var html = attr("html");  if ("undefined" != typeof html) n.innerHTML = html;  var text = attr("text");  if ("undefined" != typeof text) n.textContent = text;  var style = attr("style");  if (style)    for (var prop in style)      n.style[prop] = style[prop];  for (prop in opt)    if (expandos[prop])      n[prop] = opt[prop];    else      n.setAttribute(prop, opt[prop]+"");  if (ids)    for (var id in ids)      ids[id] = document.getElementById(id);  return ids || n;}function enhanceConstructionPage() {  urbanAdjust = 0;  solarAdjust = 0;  gasAdjust = 0;  fusionAdjust = 0;  antimatterAdjust = 0;  researchAdjust = 0;  metalAdjust = 0;  crystalAdjust = 0;  roboticsAdjust = 0;  shipyardsAdjust = 0;  osAdjust = 0;  spaceportsAdjust = 0;  ccAdjust = 0;  naniteAdjust = 0;  androidAdjust = 0;  economicAdjust = 0;  terraformAdjust = 0;  mlpAdjust = 0;  orbitalbaseAdjust = 0;  jgAdjust = 0;  biosphereAdjust = 0;  capitalAdjust = 0;  barrackAdjust = 0;  laserAdjust = 0;  missileAdjust = 0;  plasmabaseAdjust = 0;  ionAdjust = 0;  photonAdjust = 0;  disruptorAdjust = 0;  deflectionAdjust = 0;  pshieldAdjust = 0;  pringAdjust = 0;  tableArray = document.getElementsByTagName("table")  for(i=0; i<tableArray.length; i++){  if(tableArray[i].innerHTML.match(/<th colspan=.2.>Construction Queue<.th>/)){  for(a=1; a<tableArray[i].childNodes[0].childNodes.length; a++){  if(!tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/<select name=.add_stack.>/)){  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Urban Structures/))  urbanAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Solar Plants/))  solarAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Gas Plants/))  gasAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Fusion Plants/))  fusionAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Antimatter Plants/))  antimatterAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Research Labs/))  researchAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Metal Refineries/))  metalAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Crystal Mines/))  crystalAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Robotic Factories/))  roboticsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Shipyards/) && !tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  shipyardsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Shipyards/))  osAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Spaceports/))  spaceportsAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Command Centers/))  ccAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Nanite Factories/))  naniteAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Androids Factories/))  androidAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Economic Centers/))  economicAdjust++;if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Terraform/))  terraformAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Multi-Level Platforms/))  mlpAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Orbital Base/))  orbitalbaseAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Jump Gate/))  jgAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Biosphere Modification/))  biosphereAdjust++;  if(tableArray[i].childNodes[0].childNodes[a].innerHTML.match(/Capital/))  capitalAdjust++;}  }  }  }	table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;	var i_lastcolumn = 5;	var forms = document.getElementsByTagName(\'form\');	if (!table.innerHTML.match(/The research of this base is linked to/)){	if (table && table.childNodes.length > 4) {		table.childNodes[0].style.display=\'none\';		table.childNodes[2].style.display=\'none\';		for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {			if(!table.childNodes[nrow].innerHTML.match(/Research Labs linked to this base research./)){			table.childNodes[nrow+1].style.display=\'none\';			}		}	}	techmultipliers=GM_getValue(server+"techData", "0").split(",")	var energytechmultiplier = (techmultipliers[0]*0.05)+1;	var averageroute = GM_getValue(server+"averageRoute", "31");	var fertility = 0;	var uspopcost = 0;	var obpopcost = 0;	var obcostparentnode = 0;	var popcost = 0;	var areacost = 0;	var energycost = 0;	var econcost = 0;	var prodcost = 0;	var constcost = 0;	var flag = 0;	var bestAreaSignifier = node({tag: \'span\', html: \' <br /> (Best Area)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEconSignifier = node({tag: \'span\', html: \' <br /> (Best Econ)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestProdSignifier = node({tag: \'span\', html: \' <br /> (Best Prod)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestConstSignifier = node({tag: \'span\', html: \' <br /> (Best Const)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestPopSignifier = node({tag: \'span\', html: \' <br /> (Best Pop)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	var bestEnergySignifier = node({tag: \'span\', html: \' <br /> (Best Energy)\', style: {fontSize: \'7pt\', verticalAlign: \'top\'}});	for (var nrow=3; nrow<table.childNodes.length; nrow+=2) {		if(!table.childNodes[nrow].innerHTML.match(/linked to this base research./)){		var cname = table.childNodes[nrow].childNodes[1].firstChild.firstChild.firstChild.firstChild.nodeValue + table.childNodes[nrow].childNodes[1].firstChild.firstChild.childNodes[1].nodeValue;		if (location.search.indexOf(\'view=structures\')!=-1) {			table.childNodes[nrow].title = cname;			var td1help_res = table.childNodes[nrow+1].innerHTML.match(/(fertility|metal resource|crystals resource).\\((.+?)\\)/)			if (td1help_res) {			if (flag == 0){				if(td1help_res[1]=="fertility"){				var td1help = "&nbsp;(Fert "+td1help_res[2]+")"				}else if(td1help_res[1]=="metal resource"){				var td1help = "&nbsp;(Metal "+td1help_res[2]+")"				}else if(td1help_res[1]=="crystals resource"){				var td1help = "&nbsp;(Crystal "+td1help_res[2]+")"				}				var d = table.childNodes[nrow].childNodes[1].innerHTML + td1help;				table.childNodes[nrow].childNodes[1].innerHTML = d				}			}				if (cname==\'Terraform\') {				makeAdjustments(nrow, terraformAdjust)				terracost = parseInt(itemcost) / 5;					if(areacost == 0 || areacost > terracost){					areacost = terracost					table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Multi-Level Platforms\') {				adjust = mlpAdjust				makeAdjustments(nrow, mlpAdjust)					var cost = parseInt(itemcost) / 10;					if (cost < areacost) {						areacost = cost;						bestAreaSignifier.parentNode.removeChild(bestAreaSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestAreaSignifier);					}				}				if (cname==\'Urban Structures\') {				makeAdjustments(nrow, urbanAdjust)          USLevel = table.childNodes[nrow].childNodes[1].innerHTML.match(/\\(Level [0-9]{1,}/);          USLevel = parseInt(USLevel[0].replace(/\\(Level /, ""));					fertility = parseInt(td1help_res[2]);					uspopcost = parseInt(itemcost);					uspopcost = (uspopcost+areacost) / fertility;					if (popcost == 0 || popcost > uspopcost){					popcost = uspopcost;					table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);					}				}				if (cname==\'Orbital Base\') {				makeAdjustments(nrow, orbitalbaseAdjust)					obpopcost = parseInt(itemcost) / 10;					obcostparentnode = table.childNodes[nrow].childNodes[2];					if (obpopcost && obpopcost < popcost) {						popcost = obpopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);								}				}								if (cname==\'Solar Plants\' || cname==\'Gas Plants\' || cname==\'Fusion Plants\' || cname==\'Antimatter Plants\') {				if(cname==\'Solar Plants\'){				adjust = solarAdjust				}else if(cname==\'Gas Plants\'){				adjust = gasAdjust				}else if(cname==\'Fusion Plants\'){				adjust = fusionAdjust				}else if(cname==\'Antimatter Plants\'){				adjust = antimatterAdjust				}makeAdjustments(nrow, adjust)					var c = parseInt(itemcost);					var e = parseInt(table.childNodes[nrow].childNodes[3].firstChild.nodeValue.slice(1));					c = (c + popcost + areacost) / (energytechmultiplier*e);					if (e>2){					if (!energycost)						energycost = c;					if (c <= energycost) {						energycost = c;						if (bestEnergySignifier.parentNode)							bestEnergySignifier.parentNode.removeChild(bestEnergySignifier);							table.childNodes[nrow].childNodes[2].appendChild(bestEnergySignifier);					}					}				}				if (cname == "Biosphere Modification"){makeAdjustments(nrow, biosphereAdjust)          var biopopcost = parseInt(itemcost);					biopopcost = (biopopcost+(24*energycost)+areacost)/USLevel										if (biopopcost < popcost) {						popcost = biopopcost;						bestPopSignifier.parentNode.removeChild(bestPopSignifier);						table.childNodes[nrow].childNodes[2].appendChild(bestPopSignifier);																	}				}				if (cname == "Metal Refineries"){				makeAdjustments(nrow, metalAdjust)				var metal = parseInt(td1help_res[2]);				var metalcost = parseInt(itemcost);				metalprodcost = (metalcost + energycost + areacost + popcost)/ metal				metalconstcost = (metalcost + energycost + areacost + popcost)/ metal				metaleconcost = (metalcost + energycost + areacost + popcost)          	if(econcost == 0 || econcost > metaleconcost){          	econcost = metaleconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost == 0 || prodcost > metalprodcost){          	prodcost = metalprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost == 0 || constcost > metalconstcost){          	constcost = metalconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Crystals Mines"){				makeAdjustments(nrow, crystalAdjust)				var crystals = parseInt(td1help_res[2]);				var crystalcost = parseInt(itemcost);				crystalcost = (crystalcost + energycost + areacost)/ crystals          	if(econcost > crystalcost){          	econcost = crystalcost;													table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}			}				if (cname == "Robotic Factories"){				makeAdjustments(nrow, roboticsAdjust)				var robscost = parseInt(itemcost);				robsprodcost = (robscost + energycost + areacost + popcost)/ 2				robsconstcost = (robscost + energycost + areacost + popcost)/ 2				robseconcost = (robscost + energycost + areacost + popcost)          	if(econcost > robseconcost){          	econcost = robseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > robsprodcost){          	prodcost = robsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > robsconstcost){          	constcost = robsconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Shipyards"){				makeAdjustments(nrow, shipyardsAdjust)				var shipscost = parseInt(itemcost);				shipsprodcost = (shipscost + energycost + areacost + popcost)/ 2        shipseconcost = (shipscost + energycost + areacost + popcost)          	if(econcost > shipseconcost){          	econcost = shipseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > shipsprodcost){          	prodcost = shipsprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Orbital Shipyards"){				makeAdjustments(nrow, osAdjust)				var oscost = parseInt(itemcost);				osprodcost = (oscost + (energycost*12) + popcost)/8        oseconcost = (oscost + (energycost*12) + popcost)/2          	if(econcost > oseconcost){          	econcost = oseconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > osprodcost){          	prodcost = osprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									}				if (cname == "Spaceports"){				makeAdjustments(nrow, spaceportsAdjust)				var Spcost = parseInt(itemcost);				Spcost = (Spcost + energycost + areacost)/ 2          	if(econcost > Spcost){          	econcost = Spcost;							table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);							}									}				if (cname == "Nanite Factories"){				makeAdjustments(nrow, naniteAdjust)				var nanicost = parseInt(itemcost);				naniprodcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				naniconstcost = (nanicost + (energycost*2) + areacost + popcost)/ 4				nanieconcost = (nanicost + (energycost*2) + areacost + popcost) /2          	if(econcost > nanieconcost){          	econcost = nanieconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > naniprodcost){          	prodcost = naniprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > naniconstcost){          	constcost = naniconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}				if (cname == "Androids Factories"){				makeAdjustments(nrow, androidAdjust)				var andrcost = parseInt(itemcost);				andrprodcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andrconstcost = (andrcost + (energycost*4) + areacost + popcost)/ 6				andreconcost = (andrcost + (energycost*4) + areacost + popcost) /2          	if(econcost > andreconcost){          	econcost = andreconcost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}						if(prodcost > andrprodcost){          	prodcost = andrprodcost;						table.childNodes[nrow].childNodes[2].appendChild(bestProdSignifier);						}									if(constcost > andrconstcost){          	constcost = andrconstcost;						table.childNodes[nrow].childNodes[2].appendChild(bestConstSignifier);						}												}								if (cname == "Economic Centers"){				makeAdjustments(nrow, economicAdjust)				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*2) + areacost + popcost) /3          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}        if (cname == "Capital"){        makeAdjustments(nrow, capitalAdjust)				basesArray = GM_getValue(server+"Bases")				var eccost = parseInt(itemcost)				eccost = (eccost + (energycost*12) + areacost + popcost) / (10+basesArray.length)          	if(econcost > eccost){          	econcost = eccost;						table.childNodes[nrow].childNodes[2].appendChild(bestEconSignifier);						}									}				        if (cname == "Research Labs"){        makeAdjustments(nrow, researchAdjust)				}					        if (cname == "Command Centers"){        makeAdjustments(nrow, ccAdjust)				}		if (flag == 0){				    	getOptionValue(cname);		if (v==1) {		buttontext=document.createElement("a")		buttontext.href="javascript:document.getElementsByName(\'add_stack\')[0].selectedIndex="+a+"; document.getElementsByTagName(\'form\')[1].submit()"		buttontext.innerHTML = "Queue"			if (buttontext) {			if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){			colnum=3			}else{			colnum=5			}				table.childNodes[nrow].childNodes[colnum].style.whiteSpace=\'nowrap\';				table.childNodes[nrow].childNodes[colnum].appendChild(buttontext);			}	}	if (flag == 0 && nrow==table.childNodes.length-1){						flag =1;						nrow = 1;						}		}}}}}function buttonToSelect(option, text, fallback_text) {}function makeAdjustments(nrow, adjustvar){adjust = adjustvar				if(table.childNodes[nrow].childNodes[6].innerHTML.match(/<span id="time/)){				adjust++ 				}				if(adjust>0){				basecost = parseInt(table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, ""))				time = getSeconds(table.childNodes[nrow].childNodes[5].firstChild.nodeValue)/basecost				time = secsToHMS(time*(Math.round(basecost*Math.pow(1.5, adjust))))				table.childNodes[nrow].childNodes[5].innerHTML = table.childNodes[nrow].childNodes[5].innerHTML + "<br />("+time+") "        table.childNodes[nrow].childNodes[1].innerHTML = table.childNodes[nrow].childNodes[1].innerHTML + " (+"+adjust+")"        table.childNodes[nrow].childNodes[2].firstChild.nodeValue = table.childNodes[nrow].childNodes[2].firstChild.nodeValue + " ("+Math.round((basecost*Math.pow(1.5, adjust)))+")"        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        itemcost = itemcost.replace(/[0-9]+\\(/,"")        itemcost = itemcost.replace(/\\)/, "")        }else{        itemcost = table.childNodes[nrow].childNodes[2].firstChild.nodeValue.replace(/(,| |\\.)/g, "")        }        }function secsToHMS(seconds){        secVar0 = Math.round(seconds);                            // The initial data, in seconds        minVar = Math.floor(secVar0/60);  // The minutes           hourVar = Math.floor(minVar/60);  // The minutes        minVar = minVar % 60;        secVar = secVar0 % 60;              // The balance of seconds        if(hourVar != 0){        return hourVar+"h "+(minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else if(minVar != 0){        return (minVar<10?\'0\'+minVar:minVar)+"m "+(secVar<10?\'0\'+secVar:secVar)+"s"        }else{        return (secVar<10?\'0\'+secVar:secVar)+"s"        }                }function getOptionValue(obj){v=0x = document.getElementsByName("add_stack")if(x[0]){x = x[0]for (i=0;i<x.length;i++)    {    if(x.options[i].text == obj){    v=1;	a=i    i = x.length    }    }    }    }/*function insertTimeTextBoxes(){    var inputs = document.forms[1].elements;    for(var i = 0; i < inputs.length; i++)    {        if(inputs[i].className == \'quant\')        {            var row = inputs[i].parentNode.parentNode;            //console.log(row);            var cell = document.createElement("td");            cell.setAttribute("align","center");            cell.innerHTML = \'<input type="text" value="" maxlength="5" size="5" name="\'+inputs[i].name+\' - Time" id="\'+inputs[i].name+\' - Time" class="quant" onchange="update(\\\'\'+inputs[i].name+\'\\\')"/>\';            row.appendChild(cell);            cell.addEventListener(\'keyup\',getConvertTimeToQuantityClosure(row),true);			//cell.addEventListener(\'blur\',onProductionTextBoxChanged,true);        }    }        var tbody = inputs[0].parentNode.parentNode.parentNode;    //console.log(tbody.childNodes[0].firstChild);    //Adjust colspan for top row and third row    tbody.childNodes[0].firstChild.setAttribute("colspan",7);    tbody.childNodes[2].firstChild.setAttribute("colspan",7);    //console.log(tbody.childNodes[1].firstChild);    //Insert column title    var titleCell = document.createElement("th");    titleCell.setAttribute("width","10%");    titleCell.textContent = "Time (h)"    tbody.childNodes[1].appendChild(titleCell);		titleCell.previousSibling.setAttribute("width","10%");    //adjust colspan for all help rows    var helpCells = document.evaluate(    "//td[@class=\'help\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(helpCells.snapshotLength);    for(var i=0;i<helpCells.snapshotLength;i++)    {        helpCells.snapshotItem(i).setAttribute("colspan",6);    }    //adjust colspan for all red rows    var redCells = document.evaluate(    "//td[@class=\'red\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log(redCells.snapshotLength);    for(var i=0;i<redCells.snapshotLength;i++)    {        redCells.snapshotItem(i).setAttribute("colspan",2);    }    //adjust colspan for last two rows    document.getElementById("fast").addEventListener("click", function(){var inputs = document.forms[1].elements; for(var i = 0; i < inputs.length; i++){if(inputs[i].className == \'quant\'){if(inputs[i].value == ""){}else{var row = inputs[i].parentNode.parentNode; convertTimeToQuantity(row); unsafeWindow.update(inputs[i].name);}}}}, false)    tbody.childNodes[tbody.childNodes.length-1].firstChild.setAttribute("colspan",7);}*/function getConvertTimeToQuantityClosure(row){    function func(){        convertTimeToQuantity(row);    }    ;    return func;}function convertTimeToQuantity(row){	//console.log(row);    var credits = row.childNodes[2].textContent;    var time = row.childNodes[4].textContent;    var qtyInput = row.childNodes[5].firstChild;    var enteredTime;    try{        enteredTime = parseFloat(row.childNodes[6].firstChild.value);    }    catch(Exception)    {        return;    }    if(isNaN(enteredTime)){    enteredTime = 0    }else{    //console.log("Credits: "+credits+" Time: "+time+" qtyInput: "+ qtyInput.value);    //console.log("entered time: "+isNaN(enteredTime));    var totalSeconds = getSeconds(time);    if(totalSeconds != -1)    {        //console.log("Time " +getTimeDisplay(totalSeconds));        var enteredTimeInSeconds = enteredTime*60*60;        //console.log(enteredTimeInSeconds+" / " +totalSeconds);        if(enteredTimeInSeconds < totalSeconds){			qtyInput.value = "";		}else{			if(document.getElementById("fast").checked == true){			qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)*2			}else{				qtyInput.value = Math.round(enteredTimeInSeconds / totalSeconds)			}		}    }    onProductionTextBoxKeyUp();    }}function getSeconds(timeString){    var regex = /((\\d|,| |\\.)*h)?\\W?((\\d|,| |\\.)*m)?\\W?((\\d|,| |\\.)*s)?/;    var result = regex.exec(timeString);    if(result)    {        //console.log(result);        var h = 0;var m=0;var s=0;        if(result[1] != null)        h = result[1].substring(0,result[1].indexOf("h"));        if(result[3] != null)        m = result[3].substring(0,result[3].indexOf("m"));        if(result[5] != null)        s = result[5].substring(0,result[5].indexOf("s"));        return h*60*60 + m*60 + s*1;    }    else return -1;}function getTimeDisplay(seconds){    var h = Math.floor(seconds/3600);    var m = Math.floor((seconds % 3600)/60);    var s = Math.floor((seconds % 3600) % 60);    var string = s+"s";    if(m>0 || h>0)		string = m+"m "+string;    if(h>0)		string = h+"h "+string;    return string;}var PRESET_KEYS = new Array("Fighters","Bombers","Heavy Bombers","Ion Bombers","Corvette","Recycler","Destroyer","Frigate","Ion Frigate","Scout Ship", "Outpost Ship","Cruiser","Carrier","Heavy Cruiser","Battleship","Fleet Carrier","Dreadnought","Titan","Leviathan","Death Star","Goods");function onProductionTextBoxKeyUp(){    var shipName;    var count=0,cost=0;    var productionCost = 0;    var totalTime = 0;    for(var i = 0;i <PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.log("Failed to find textBox for "+shipName+".");            continue;        }				if(textBox.value != "")        {            var row = textBox.parentNode.parentNode;            var time = row.childNodes[4].textContent;            //console.log(textBox.value);            count = parseInt(textBox.value);            cost = parseInt(textBox.parentNode.previousSibling.previousSibling.previousSibling.innerHTML.replace(/(,| |\\.)/g, ""));            totalTime+= getSeconds(time) * count;            //console.log(count + " " + shipName + "s @ " + cost);            productionCost += (cost * count);			//textBox.parentNode.nextSibling.value = "";        }    }    //console.log("total Time: "+getTimeDisplay(totalTime));    var fastProduction = document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.checked;    //console.info(fastProduction);    if(fastProduction)	{		productionCost *= 2;		totalTime /= 2;	}    //console.log("Text changed. Total production cost: " +productionCost);    var submitButton = document.evaluate(	    "//input[@type=\'submit\']",	    document,	    null,	    XPathResult.FIRST_ORDERED_NODE_TYPE,	    null).singleNodeValue;    if(productionCost > 0)		submitButton.value = "Submit";    else		submitButton.value = "Submit";}function registerTextBoxEventListeners(){    for(var i = 0;i < PRESET_KEYS.length;i++)    {        shipName = PRESET_KEYS[i];        textBox = document.evaluate(        "//input[@name=\'" + shipName + "\']",        document,        null,        XPathResult.FIRST_ORDERED_NODE_TYPE,        null).singleNodeValue;        //console.log(textBox);        if(textBox == null)        {            //console.info("Failed to find textBox for "+shipName+".");            continue;        }        textBox.addEventListener(\'keyup\',onProductionTextBoxKeyUp,false);		//textBox.addEventListener(\'blur\',onProductionTextBoxChanged,true);    }    document.evaluate("//input[@class=\'check\' and @name=\'fast\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'change\',onProductionTextBoxKeyUp,false);    //document.evaluate("//input[@type=\'reset\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'click\',onProductionTextBoxKeyUp,true);    document.evaluate("//form[@method=\'post\']",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.addEventListener(\'reset\',onProductionTextBoxKeyUp,false);}function productionHelperOnClick(num, box) {	num=num.replace("+", "")	num=num.replace(" ","")	num=num.replace("k","000")		document.getElementById(box).value = parseInt(document.getElementById(box).value) + parseInt(num);     calculateTotals();}function prodHelperEvent(e) {  if (e.shiftKey && (e.name == \'fast\')) {    for (i=0; i<empireLinks.length; i++) {    document.getElementById("fast_"+empireLinks[i]).checked = e.checked;    }  } else if (e.shiftKey && (e.name == \'unit\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("unit_"+empireLinks[i]).selectedIndex = e.selectedIndex;    }  } else if (e.shiftKey && (e.name == \'quant\')) {    e.blur();    for (i=0; i<empireLinks.length; i++) {      document.getElementById("quant_"+empireLinks[i]).value = e.value;    }  }  if ((e.name == \'fast\')||(e.name == \'unit\')||(e.name == \'quant\'))    calculateTotals();}function calculateTotals() {	var pcost = 0;  for (i=0; i<empireLinks.length; i++) {    n = (document.getElementById("fast_"+empireLinks[i]).checked) ? 2 : 1;    pcost += parseInt(ProductionGetCost[document.getElementById("unit_"+empireLinks[i]).selectedIndex] * document.getElementById("quant_"+empireLinks[i]).value * n);	}	document.getElementById(\'cost_all\').innerHTML = pcost+\' credits\';	var credits_left = parseInt(numcredits) - pcost;	document.getElementById(\'cost_all\').style.color = (credits_left < 0) ? \'red\' : \'\';}function resetForm() {  for (i=0; i<empireLinks.length; i++) {    document.getElementById("unit_"+empireLinks[i]).selectedIndex = 0;    document.getElementById("fast_"+empireLinks[i]).checked = false;    document.getElementById("quant_"+empireLinks[i]).value = 0;    returnto = i    calculateTotals();    i=returnto;  }}function startSubmitQueue() {  submitQueue(0);}function submitQueue(i) {    if (document.getElementById("quant_"+empireLinks[i]).value != 0) {      var postData = document.getElementById("unit_"+empireLinks[i]).value+"="+document.getElementById("quant_"+empireLinks[i]).value+"&post_back=true";      if (document.getElementById("fast_"+empireLinks[i]).checked)        postData += "&fast=true";      document.getElementById("quant_"+empireLinks[i]).value = \'ok\';      document.getElementById("quant_"+empireLinks[i]).style.backgroundColor = \'red\';      GM_xmlhttpRequest({        method: "POST",        url: serverurl+"base.aspx?base="+empireLinks[i]+"&view=production",        data: encodeURI(postData),        headers:{\'Content-type\':\'application/x-www-form-urlencoded\'},     		onreadystatechange: function(xhr) {if (xhr.readyState == "4") {endSubmitQueue(i, "1");}}      });    } else {      endSubmitQueue(i, "0");    }}function endSubmitQueue(i, value) {time=1000+Math.floor(Math.random()*1001)  if (i == empireLinks.length-1)    window.setTimeout(function(){ location.reload(true)}, time);  else  if(value == 0){  submitQueue(i+1)  }else{    window.setTimeout(function(){ submitQueue(i+1)}, time);    }}function productionHelper() {  var btn_details = [];  btn_details.push([1,\'+1 \']);  btn_details.push([5,\'+5 \']);  btn_details.push([10,\'+10 \']);  btn_details.push([25,\'+25 \']);  btn_details.push([100,\'+100 \']);  btn_details.push([250,\'+250 \']);  btn_details.push([1000,\'+1k \']);  table.rows[1].childNodes[4].innerHTML = \'Fast Prod\';  table.rows[1].childNodes[5].innerHTML = \'Unit Type\';  table.rows[1].childNodes[6].innerHTML = \'Quantity\';  table.rows[1].childNodes[3].innerHTML = \'Current Queue\';  a=0;  table.firstChild.style.display=\'none\';  for (i=2; i<table.rows.length; i=i+2) {    var currentRow = table.rows[i];		var res = /\\?base=((\\d|,| |\\.)+)/.exec(table.rows[i].childNodes[0].firstChild.href);	  table.rows[i+1].style.display = \'none\';	  empireLinks[a] = res[1];	  a++;	  currentRow.childNodes[3].innerHTML = currentRow.childNodes[5].innerHTML + "<br />" + table.rows[i+1].childNodes[3].innerHTML    currentRow.childNodes[4].innerHTML = "<input type=\'checkbox\' name=\'fast\' class=\'check\' id=\'fast_"+res[1]+"\' onfocus=\\"selectedBox=\'fast_"+res[1]+"\'\\" />";    currentRow.childNodes[6].innerHTML = "<input type=\'text\' name=\'quant\' class=\'quant\' id=\'quant_"+res[1]+"\' size=\'5\' maxlength=\'5\' value=\'0\' onfocus=\\"selectedBox=\'quant_"+res[1]+"\'\\" />";    var html = "<select name=\'unit\' id=\'unit_"+res[1]+"\' onfocus=\\"selectedBox=\'unit_"+res[1]+"\'\\"><option value=\'Fighters\'>Fighters</option><option value=\'Bombers\'>Bombers</option>";    html += "<option value=\'Heavy Bombers\'>Heavy Bombers</option><option value=\'Ion Bombers\'>Ion Bombers</option><option value=\'Corvette\'>Corvette</option>";    html += "<option value=\'Recycler\'>Recycler</option><option value=\'Destroyer\'>Destroyer</option><option value=\'Frigate\'>Frigate</option>"    html += "<option value=\'Ion Frigate\'>Ion Frigate</option><option value=\'Scout Ship\'>Scout Ship</option><option value=\'Outpost Ship\'>Outpost Ship</option>";    html += "<option value=\'Cruiser\'>Cruiser</option><option value=\'Carrier\'>Carrier</option><option value=\'Heavy Cruiser\'>Heavy Cruiser</option>";    html += "<option value=\'Battleship\'>Battleship</option><option value=\'Fleet Carrier\'>Fleet Carrier</option><option value=\'Dreadnought\'>Dreadnought</option>";    html += "<option value=\'Titan\'>Titan</option><option value=\'Leviathan\'>Leviathan</option><option value=\'Death Star\'>Death Star</option></select>";    currentRow.childNodes[5].innerHTML = html;    document.getElementById("unit_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("quant_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    document.getElementById("fast_"+res[1]).addEventListener(\'change\', function(){ prodHelperEvent(document.getElementById(unsafeWindow.selectedBox));}, true);    for(c=0; c<7; c++) {      var num = btn_details[c][0];      l = document.createElement("a");		l.href = "javascript:void(1);";		l.id= i + btn_details[c][1];		l.innerHTML = btn_details[c][1];            l.name = "quant_"+res[1];      currentRow.childNodes[6].appendChild(l);      document.getElementById(i + btn_details[c][1]).addEventListener(\'click\', function(){ productionHelperOnClick(this.innerHTML, this.name );}, true);    }  }  l = document.createElement("tr");  l.id="extrarow1";  table.appendChild(l);  l = document.createElement("td");		l.innerHTML = "0 credits";      l.className = \'help\';      l.align = "right";      l.id="cost_all"      document.getElementById("extrarow1").appendChild(l);      document.getElementById("cost_all").colSpan="7";      l = document.createElement("tr");      l.id="extrarow2";      table.appendChild(l);      l = document.createElement("td");      l.className = \'help\';      l.align = "right";          l.id="prodHelperButtons"      document.getElementById("extrarow2").appendChild(l);      document.getElementById("prodHelperButtons").colSpan="7";      l = document.createElement("input");      l.type = "reset";      l.id = "resetButton";      l.value = "Reset";      document.getElementById("prodHelperButtons").appendChild(l);      l = document.createElement("input");      l.type = "submit";      l.id = "submitButton";      l.value = "submit";      document.getElementById("prodHelperButtons").appendChild(l);   document.getElementById("submitButton").addEventListener(\'click\', function(){ startSubmitQueue();}, true);  document.getElementById("resetButton").addEventListener(\'click\', function(){ resetForm();}, true);}function productionHelperButton() {		table = document.evaluate( "//th[@class=\'th_header2\']/../..", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;		var prodTitle = table.childNodes[1].childNodes[5];		scoutButton = document.createElement("a");		scoutButton.href = "javascript:void(1);";		scoutButton.id= "prodHelperButton";		scoutButton.innerHTML=" [&#177;]";		scoutButton.title = "Production Helper"		prodTitle.appendChild(scoutButton)		document.getElementById(\'prodHelperButton\').addEventListener(\'click\', function() {productionHelper();}, true);	}function saveTechData(){    //console.log("Saving tech data");    var techData = new Array();    var rows = document.evaluate(    "//tr[@align=\'center\']",    document,    null,    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,    null);    //console.log("Tech rows: "+ rows.snapshotLength);    for (var i = 0; i < rows.snapshotLength; i++)    {        var techNameCell = document.evaluate(        "th[1]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        var techValueCell = document.evaluate(        "td[4]",        rows.snapshotItem(i),        null,        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,        null);        if(techNameCell.snapshotLength > 0)        {            var techValue = parseInt(techValueCell.snapshotItem(0).innerHTML.replace(/(,| |\\.)/g, ""));            var techName = techNameCell.snapshotItem(0).innerHTML;            //console.log(techName +": "+techValue);            techData[i] = techValue;        }    }    GM_setValue(server+"techData",techData.join());}/* function scannerGrab(){tableArray = document.getElementsByTagName("table")for(i=0; i<tableArray.length; i++){if(tableArray[i].innerHTML.match(/<th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=fleet">Fleet<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=player">Player<\\/a><\\/th><th width="30%"><a href="empire.aspx\\?view=scanners&amp;order=destination">Destination<\\/a><\\/th><th width="20%"><a href="empire.aspx\\?view=scanners&amp;order=arrival">Arrival<\\/a><\\/th><th width="10%"><a href="empire.aspx\\?view=scanners&amp;order=size">Size<\\/a><\\/th>/)){table = tableArray[i]fleetId = []fleetName = []fleetOwner = []ownerId = []fleetDest = []fleetArrive = []fleetSize = []for(a=1; a<table.rows.length; a++){fleetId[a-1] = table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=/, "") fleetId[a-1] = fleetId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetName[a-1]=table.rows[a].childNodes[0].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetName[a-1]=fleetName[a-1].replace(/<\\/a>/, "");fleetOwner[a-1]=table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=[0-9]{1,}">/, "")fleetOwner[a-1]=fleetOwner[a-1].replace(/<\\/a>/, "");ownerId[a-1] =table.rows[a].childNodes[1].innerHTML.replace(/<a(.*?) href="profile.aspx\\?player=/, "")ownerId[a-1] = ownerId[a-1].replace(/">(.+?)<\\/a>(.*?)/, "")fleetDest[a-1]=table.rows[a].childNodes[2].innerHTML.match(/[A-Za-z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)fleetArrive[a-1]=parseInt(table.rows[a].childNodes[3].title)+Math.round(new Date().getTime()/1000.0)fleetSize[a-1]=table.rows[a].childNodes[4].innerHTML.replace(/<a(.*?) href="fleet.aspx\\?fleet=[0-9]{1,}">/, "")fleetSize[a-1]=fleetSize[a-1].replace(/<\\/a>(.*?)/, "");fleetSize[a-1]=fleetSize[a-1].replace(/(,| |.)/, "");}sendData = "&fleetId="+fleetId+"&fleetName="+fleetName+"&fleetOwner="+fleetOwner+"&ownerId="+ownerId+"&fleetDest="+fleetDest+"&fleetArrive="+fleetArrive+"&fleetSize="+fleetSize+"&seenBy="+document.getElementById(\'account\').parentNode.childNodes[1].innerHTML.replace(/[A-Za-z]./, \'\')if(GIAServers.inArray(server)){sendtoserver(sendData, "scanners.php")}}}}*/// If NS -- that is, !IE -- then set up for mouse capturedocument.captureEvents(Event.MOUSEMOVE)// Set-up to use getMouseXY function onMouseMovedocument.addEventListener("mousemove", function(e) {getMouseXY(e)}, true);// Temporary variables to hold mouse x-y pos.svar tempX = 0var tempY = 0// Main function to retrieve mouse x-y pos.sfunction getMouseXY(e) {// grab the x-y pos.s if browser is NS    tempX = e.pageX    tempY = e.pageY  // catch possible negative values in NS4  if (tempX < 0){tempX = 0}  if (tempY < 0){tempY = 0}  // show the position values in the form named Show  // in the text fields named MouseX and MouseY  return true}function linkEventListeners(){if(GIAServers.inArray(server)){linkArray=document.getElementsByTagName("a")for(i=0; i<linkArray.length; i++){if(linkArray[i].href.match(/map.aspx\\?(.*?)loc=E[0-9]{2}:[0-9]{2}:[0-9]{2}/)){linkArray[i].addEventListener("mouseover", function(e) {showBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""), tempX, tempY)}, true);linkArray[i].addEventListener("mouseout", function() {hideBaseInfo(this.href.replace(/http:\\/\\/(.+?)\\.astroempires\\.com\\/map.aspx\\?(.*?)loc=/, ""))}, true);}}}}function linkChange(){	linkArray=document.getElementsByTagName(\'a\')	for(i=0; i < linkArray.length; i++){		linkArray[i].target = "_blank"	}}  ////////////////////////////////////////// /// Execution //////////////////////////////////////////////////////////////////////if(document.location.href.match(/astroempires.com/)){replaceTime();if(document.location.href.match(/loc=[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}/)){	if(document.body.innerHTML.match(/<th colspan=.4.>Base<\\/th>/)){	if(GIAServers.inArray(server)){	centerArray=document.getElementsByTagName(\'center\')	for(i=0; i<centerArray.length; i++){	if(centerArray[i].innerHTML.match(/Astro Type:/)){	baseLink = document.body.innerHTML.match(/base.aspx\\?base=[0-9]{1,}/)[0]	sourceDiv = document.createElement("div")	sourceDiv.id="baseDiv";	sourceDiv.innerHTML="Visit the <a href=\\""+baseLink+"\\">base page</a> to add this base to GIA.<br /><br />";	centerArray[i].appendChild(sourceDiv)	}	}	}	}}else if(document.location.href.match(/[A-Z][0-9]{2}:[0-9]{2}:[0-9]{2}/)){	debrisShow()}else if(document.location.href.match(/http:\\/\\/(.+?)\\.astroempires\\.com\\/base\\.aspx\\?base=[0-9]{1,}$/)){	if(window.parent.document.location.href != document.location.href){	baseDetails();	}}else if(document.location.href.match(/empire.aspx$/) || document.location.href.match(/empire.aspx\\?view=bases_events$/)){	productionHelperButton();}else if(document.location.href.match(/view=scanners/)){	scannerFormat();}else if(window.location.href.match(/empire.aspx\\?view=fleets/)){        sumShips();}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=structures/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=defenses/) || document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=research/)){	if(!document.location.href.match(/&info=/)){enhanceConstructionPage();}}else if(document.location.href.match(/http:\\/\\/(.+?).astroempires.com\\/base.aspx\\?base=[0-9]{1,}&view=production/)){insertTimeTextBoxes()}if(window.location.href.indexOf(\'view=move\')==-1 && window.location.href.indexOf(\'view=fleets\')==-1 &&		window.location.href.indexOf(\'view=production\')==-1 && window.location.href.indexOf(\'view=structures\')==-1 &&		window.location.href.indexOf(\'view=trade\')==-1 && window.location.href.indexOf(\'view=research\')==-1){		formatVariousNumbers();	}	}',
                                                           'auto_upgrade' => 1,
                                                           'max_memory_size' => 262144
                                                         }, 'Mojo::Asset::Memory' ),
                                       'raw_size' => 63681,
                                       'state' => 'finished',
                                       'body' => 2,
                                       'read' => $VAR1->{'content'}{'events'}{'read'}[0]
                                     }, 'Mojo::Content::Single' ),
                 'method' => 'POST',
                 'url' => bless( {
                                   'path' => bless( {
                                                      'path' => '/ae/gia',
                                                      'charset' => 'UTF-8'
                                                    }, 'Mojo::Path' ),
                                   'base' => bless( {
                                                      'scheme' => 'HTTP',
                                                      'port' => '',
                                                      'path' => bless( {
                                                                         'leading_slash' => '',
                                                                         'parts' => [],
                                                                         'trailing_slash' => '',
                                                                         'charset' => 'UTF-8'
                                                                       }, 'Mojo::Path' ),
                                                      'host' => 'localhost'
                                                    }, 'Mojo::URL' )
                                 }, 'Mojo::URL' ),
                 'finished' => 1,
                 'state' => 'finished',
                 'raw_size' => 0
               }, 'Mojo::Message::Request' );

[Wed Oct 22 14:09:29 2014] [debug] 200 OK (0.126341s, 7.915/s).
[Wed Oct 22 14:09:36 2014] [debug] $VAR1 = [];

[Wed Oct 22 14:09:36 2014] [debug] POST "/ae/gia".
[Wed Oct 22 14:09:36 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 14:09:36 2014] [debug] $VAR1 = bless( {
                 'finished' => 1,
                 'state' => 'finished',
                 'raw_size' => 0,
                 'content' => bless( {
                                       'raw_size' => 0,
                                       'state' => 'finished',
                                       'body' => 1,
                                       'read' => sub { "DUMMY" },
                                       'headers' => bless( {
                                                             'normalcase' => {
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT'
                                                                             },
                                                             'headers' => {
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ]
                                                                          }
                                                           }, 'Mojo::Headers' ),
                                       'auto_upgrade' => 1,
                                       'size' => 0,
                                       'real_size' => 0,
                                       'events' => {
                                                     'read' => [
                                                                 $VAR1->{'content'}{'read'}
                                                               ]
                                                   },
                                       'buffer' => '',
                                       'pre_buffer' => ''
                                     }, 'Mojo::Content::Single' ),
                 'method' => 'POST',
                 'url' => bless( {
                                   'base' => bless( {
                                                      'port' => '',
                                                      'scheme' => 'HTTP',
                                                      'path' => bless( {
                                                                         'leading_slash' => '',
                                                                         'parts' => [],
                                                                         'trailing_slash' => '',
                                                                         'charset' => 'UTF-8'
                                                                       }, 'Mojo::Path' ),
                                                      'host' => 'localhost'
                                                    }, 'Mojo::URL' ),
                                   'path' => bless( {
                                                      'path' => '/ae/gia',
                                                      'charset' => 'UTF-8'
                                                    }, 'Mojo::Path' )
                                 }, 'Mojo::URL' ),
                 'max_message_size' => 10485760,
                 'env' => {
                            'PATH_INFO' => '/ae/gia',
                            'psgi.multithread' => '',
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'SERVER_NAME' => 0,
                            'REQUEST_METHOD' => 'POST',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'CONTENT_LENGTH' => '0',
                            'HTTP_HOST' => 'localhost',
                            'QUERY_STRING' => '',
                            'psgix.input.buffered' => 1,
                            'HTTP_ACCEPT' => '*/*',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'HTTP_CONNECTION' => 'close',
                            'psgi.multiprocess' => '',
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'psgi.nonblocking' => '',
                            'psgi.errors' => *::STDERR,
                            'SCRIPT_NAME' => '',
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'psgi.streaming' => 1,
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'psgix.io' => bless( \*Symbol::GEN2, 'IO::Socket::INET' ),
                            'SERVER_PORT' => 5000,
                            'psgi.run_once' => '',
                            'REQUEST_URI' => '/ae/gia',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'psgi.url_scheme' => 'http',
                            'psgi.input' => \*{'HTTP::Server::PSGI::$input'},
                            'REMOTE_PORT' => 54509,
                            'REMOTE_ADDR' => '127.0.0.1',
                            'psgix.harakiri' => 1
                          },
                 'events' => {},
                 'buffer' => '',
                 'version' => '1.0'
               }, 'Mojo::Message::Request' );

[Wed Oct 22 14:09:36 2014] [debug] 200 OK (0.001400s, 714.286/s).
[Wed Oct 22 14:09:46 2014] [debug] $VAR1 = [];

[Wed Oct 22 14:09:46 2014] [debug] POST "/ae/gia".
[Wed Oct 22 14:09:46 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 14:09:46 2014] [debug] $VAR1 = bless( {
                 'content' => bless( {
                                       'pre_buffer' => '',
                                       'events' => {
                                                     'read' => [
                                                                 sub { "DUMMY" }
                                                               ]
                                                   },
                                       'buffer' => '',
                                       'headers' => bless( {
                                                             'normalcase' => {
                                                                               'x-forwarded-host' => 'X-FORWARDED-HOST',
                                                                               'x-forwarded-for' => 'X-FORWARDED-FOR',
                                                                               'x-real-ip' => 'X-REAL-IP',
                                                                               'x-forwarded-port' => 'X-FORWARDED-PORT'
                                                                             },
                                                             'headers' => {
                                                                            'accept' => [
                                                                                          '*/*'
                                                                                        ],
                                                                            'x-forwarded-port' => [
                                                                                                    '443'
                                                                                                  ],
                                                                            'x-forwarded-host' => [
                                                                                                    'localhost'
                                                                                                  ],
                                                                            'connection' => [
                                                                                              'close'
                                                                                            ],
                                                                            'x-forwarded-for' => [
                                                                                                   '127.0.0.1'
                                                                                                 ],
                                                                            'x-real-ip' => [
                                                                                             '127.0.0.1'
                                                                                           ],
                                                                            'user-agent' => [
                                                                                              'curl/7.35.0'
                                                                                            ],
                                                                            'content-type' => [
                                                                                                'application/x-www-form-urlencoded'
                                                                                              ],
                                                                            'host' => [
                                                                                        'localhost'
                                                                                      ]
                                                                          }
                                                           }, 'Mojo::Headers' ),
                                       'auto_upgrade' => 1,
                                       'size' => 0,
                                       'real_size' => 0,
                                       'read' => $VAR1->{'content'}{'events'}{'read'}[0],
                                       'raw_size' => 0,
                                       'body' => 1,
                                       'state' => 'finished'
                                     }, 'Mojo::Content::Single' ),
                 'method' => 'POST',
                 'url' => bless( {
                                   'base' => bless( {
                                                      'host' => 'localhost',
                                                      'port' => '',
                                                      'scheme' => 'HTTP',
                                                      'path' => bless( {
                                                                         'leading_slash' => '',
                                                                         'charset' => 'UTF-8',
                                                                         'trailing_slash' => '',
                                                                         'parts' => []
                                                                       }, 'Mojo::Path' )
                                                    }, 'Mojo::URL' ),
                                   'path' => bless( {
                                                      'charset' => 'UTF-8',
                                                      'path' => '/ae/gia'
                                                    }, 'Mojo::Path' )
                                 }, 'Mojo::URL' ),
                 'finished' => 1,
                 'state' => 'finished',
                 'raw_size' => 0,
                 'env' => {
                            'HTTP_X_FORWARDED_HOST' => 'localhost',
                            'psgix.io' => bless( \*Symbol::GEN3, 'IO::Socket::INET' ),
                            'psgi.run_once' => '',
                            'SERVER_PORT' => 5000,
                            'psgi.streaming' => 1,
                            'psgi.version' => [
                                                1,
                                                1
                                              ],
                            'SCRIPT_NAME' => '',
                            'HTTP_USER_AGENT' => 'curl/7.35.0',
                            'REMOTE_PORT' => 54511,
                            'psgi.input' => \*{'HTTP::Server::PSGI::$input'},
                            'psgix.harakiri' => 1,
                            'REMOTE_ADDR' => '127.0.0.1',
                            'CONTENT_TYPE' => 'application/x-www-form-urlencoded',
                            'REQUEST_URI' => '/ae/gia',
                            'psgi.url_scheme' => 'http',
                            'SERVER_PROTOCOL' => 'HTTP/1.0',
                            'CONTENT_LENGTH' => '0',
                            'HTTP_HOST' => 'localhost',
                            'HTTP_X_FORWARDED_PORT' => '443',
                            'psgix.input.buffered' => 1,
                            'QUERY_STRING' => '',
                            'HTTP_ACCEPT' => '*/*',
                            'PATH_INFO' => '/ae/gia',
                            'psgi.multithread' => '',
                            'SERVER_NAME' => 0,
                            'REQUEST_METHOD' => 'POST',
                            'HTTP_X_REAL_IP' => '127.0.0.1',
                            'HTTP_X_FORWARDED_FOR' => '127.0.0.1',
                            'psgi.multiprocess' => '',
                            'psgi.errors' => *::STDERR,
                            'psgi.nonblocking' => '',
                            'HTTP_CONNECTION' => 'close'
                          },
                 'events' => {},
                 'buffer' => '',
                 'version' => '1.0',
                 'max_message_size' => 10485760
               }, 'Mojo::Message::Request' );

[Wed Oct 22 14:09:46 2014] [debug] 200 OK (0.001219s, 820.345/s).
[Wed Oct 22 15:14:44 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 15:14:44 2014] [debug] wtf
[Wed Oct 22 15:14:44 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 15:15:32 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 15:15:32 2014] [debug] wtf
[Wed Oct 22 15:15:32 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 15:16:15 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 15:16:15 2014] [debug] wtf
[Wed Oct 22 15:16:15 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 15:16:25 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 15:16:25 2014] [debug] wtf
[Wed Oct 22 15:16:25 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 15:19:01 2014] [debug] $VAR1 = [];

[Wed Oct 22 15:19:01 2014] [debug] POST "/ae/gmDrop".
[Wed Oct 22 15:19:01 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 15:19:01 2014] [debug] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd"><html><head>  <meta name="generator" content=  "HTML Tidy for Linux/x86 (vers 25 March 2009), see www.w3.org">  <title>Map</title>  <meta http-equiv='cache-control' content='no-cache'>  <meta http-equiv='pragma' content='no-cache'>  <meta http-equiv='expires' content='0'>  <link rel='shortcut icon' href=  'http://cdn.astroempires.com/images/favicon.ico'>  <link rel='stylesheet' type='text/css' href=  'http://cdn.astroempires.com/skins/darkAstros/style6.css'>  <style type='text/css'>#map { background-color: #333399; }  </style>  <link href=  'http://cdn.astroempires.com/skins/map2/universal_v1.11/map2_base_4.css'  type='text/css' rel='stylesheet'>  <link href=  'http://cdn.astroempires.com/skins/map2/universal_v1.11/map2_style-standard.css'  type='text/css' rel='stylesheet'>  <link href=  'http://cdn.astroempires.com/skins/notifications_v1.3/notification_5.css'  type='text/css' rel='stylesheet'>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/jquery-1.8.2.min.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/js_timers_v1.12.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/common_v2.0.27d.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/wz_jsgraphics_305.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/jquery-ui-1.8.24.custom.min.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/jquery.ui.touch-punch_v0.3.1.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/jquery.mousewheel_v3.1.11.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/map_v1.119.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/sort_v2.0.27.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/notifications_v1.24.js'></script></head><body>  <script type="text/javascript">notifications('notifications_ajax.aspx?method=ajax&player=7325&version=1', 30, 8,0);  </script>  <div align='center'>    <a href='ranks.aspx'>Ranks</a> <span class=    'comment'><b>(2181)</b></span> - <a href=    'updates.aspx'>Updates</a> - <a href=    'terms.aspx?view=rules'>Rules</a> - <a href=    'help.aspx'>Help</a> - <a href='tables.aspx'>Tables</a> -    <a href='http://portal.astroempires.com' target=    '_blank'>Portal</a> - <a href='http://forum.astroempires.com'    target='_blank'>Forum</a> - <a href=    'http://wiki.astroempires.com' target='_blank'>Wiki</a> -    <a href='extras.aspx'>Extras</a> - <a href=    'contact.aspx'>Support</a> - <a href=    'home.aspx?session=logout&amp;id=9910582733192116'>Logout</a><br>    <small><span id='server-time' title='2014/10/16 23:54:54'>16    Oct 2014, 23:54:54</span></small>  </div><br>  <script type='text/javascript'>clientDate_format=0;display_animated_server_time=true;header_timer(); setInterval('header_timer();', 250);  </script>  <table align='center' width='850' class='top'>    <tr>      <td colspan='5' align='center'>        <img src='http://cdn.astroempires.com/images/logo_mini.gif'        alt='Astro Empires'><br>        <small>Server:</small> <span style='position: relative;'        id='servers-dropdown'><small><a href=        'account.aspx?view=servers' onclick='return !1;'>Bravo        &#9660;</a></small></span>        <div id='servers-list' style=        'position: absolute; display: none; width: auto; z-index: 10; left: -5px; top: 15px;'>        <span style='position: relative;' id=        'servers-dropdown'></span>          <table class='no_back' cellpadding='6'>            <tr>              <th style='line-height: 140%'><a href=              'http://alpha.astroempires.com/account.aspx'>Alpha</a><br>              <a href=              'http://beta.astroempires.com/account.aspx'>Beta</a><br>              <a href=              'http://ceti.astroempires.com/account.aspx'>Ceti</a><br>              <a href=              'http://delta.astroempires.com/account.aspx'>Delta</a><br>              <a href=              'http://epsilon.astroempires.com/account.aspx'>Epsilon</a><br>              <a href=              'http://fenix.astroempires.com/account.aspx'>Fenix</a><br>              <a href=              'http://gamma.astroempires.com/account.aspx'>Gamma</a><br>              <a href=              'http://helion.astroempires.com/account.aspx'>Helion</a><br>              <a href=              'http://ixion.astroempires.com/account.aspx'>Ixion</a><br>              <a href=              'http://juno.astroempires.com/account.aspx'>Juno</a><br>              <a href=              'http://kappa.astroempires.com/account.aspx'>Kappa</a><br>              <a href=              'http://lyra.astroempires.com/account.aspx'>Lyra</a><br>              <a href=              'http://mira.astroempires.com/account.aspx'>Mira</a><br>              <a href=              'http://nova.astroempires.com/account.aspx'>Nova</a><br>              <a href=              'http://omega.astroempires.com/account.aspx'>Omega</a><br>              <a href=              'http://pegasus.astroempires.com/account.aspx'>Pegasus</a><br>              <a href=              'http://andromeda.astroempires.com/account.aspx'>Andromeda</a><br>              Bravo<br>              - - - -<br>              <a href=              'http://ares.astroempires.com/account.aspx'>Ares</a><br></th>            </tr>          </table>        </div><script type="text/javascript">$("#servers-dropdown").click( function(event) { $("#advertising2").toggle(); $("#servers-list").toggle(); event.stopPropagation(); } );$("body").click( function() { $("#servers-list").hide(); $("#advertising2").show(); } );        </script>      </td>      <td colspan='4' align='center'>        <table class='no_back' align='center'>          <tr>            <th id='account' width='80'><a href=            'account.aspx'>Account</a></th>            <th width='90'>7325</th>            <th id='messages' width='80'><a href=            'messages.aspx'>Messages</a></th>            <th width='90'>0 New</th>          </tr>          <tr>            <th id='credits'><a href=            'credits.aspx'>Credits</a></th>            <th>7</th>            <th id='board'><a href='board.aspx'>Board</a></th>            <th>0 New</th>          </tr>        </table>      </td>    </tr>    <tr>      <th colspan='9'><marquee scrollamount='1' scrolldelay='1'      behavior='alternate' loop='1'>&nbsp; <a href=      'profile.aspx?player=2504'>[Sith] DemonicGold</a> vs.      <a href='profile.aspx?player=3672'>[DAMN] Godzilla</a>      losses: 225 / 500 &nbsp;&nbsp; <a href=      'profile.aspx?player=870'>[Mmmmm] Delepitore</a> vs. <a href=      'profile.aspx?player=37'>[&#194;&#165;&#194;&#165;]      Azazel</a> losses: 840 / 3,245</marquee></th>    </tr>    <tr>      <th width='10%' id='bases'><a href='base.aspx'>Bases</a></th>      <th width='10%' id='map'><a href='map.aspx'>Map</a></th>      <th width='10%' id='fleets'><a href=      'fleet.aspx'>Fleets</a></th>      <th width='11%' id='empire'><a href=      'empire.aspx'>Empire</a></th>      <th width='13%' id='commanders'><a href=      'commander.aspx'>Commanders</a></th>      <th width='10%' id='guild'><a href=      'guild.aspx'>Guild</a></th>      <th width='10%' id='notes'><a href=      'notes.aspx'>Notes</a></th>      <th width='13%' id='bookmarks'><a href=      'bookmarks.aspx'>Bookmarks</a></th>      <th width='13%' id='notifications'><a href=      'notifications.aspx'>Notifications</a></th>    </tr>  </table><br>  <div style='text-align: center;'>    <div style='width: 850px; height: 540px; margin: 0 auto;'>      <div id='map2_ToolBox_1' class='map2_ToolBox'></div>      <div id='map2_ToolBox_0' class='map2_ToolBox'></div>      <div style='width: 100%; height: 100%; position: relative;'>        <div id='map2_Wrapper' style='visibility: hidden;'>          <div class='map2_Cell' style=          'width: 100%; height: 100%;'>            <div class='map2_Cell-Row map2_Cell-Row-1'>              <div id='map2_Cell-0' class=              'map2_Cell-Corner map2_Cell-0'></div>              <div id='map2_Cell-1' class=              'map2_Cell-Horizontal map2_Cell-1'></div>              <div id='map2_Cell-2' class=              'map2_Cell-Corner map2_Cell-2'></div>            </div>            <div class='map2_Cell-Row map2_Cell-Row-2'>              <div id='map2_Cell-3' class=              'map2_Cell-Vertical map2_Cell-3'></div>              <div id='map2_Cell-4' class=              'map2_Cell-4 map2_Cell-Center'>                <div style=                'position: absolute; float: left; top: 13px; left: 13px;'>                <script type='text/javascript'>var mapPlayer = [];mapPlayer[0]='2â¬¢bookB39:14:77:22â¬¢rocky moon 2nd posâ¬¢B39:14:77:22â¬¢cyanâ¬¢map.aspx?loc=B39:14:77:22â¬¢';mapPlayer[1]='2â¬¢bookB39:14:94:21â¬¢rocky 2- peeped [AVA] Dr Jeepersâ¬¢B39:14:94:21â¬¢cyanâ¬¢map.aspx?loc=B39:14:94:21â¬¢';mapPlayer[2]='2â¬¢bookB39:17:00:21â¬¢rocky 2ndâ¬¢B39:17:00:21â¬¢cyanâ¬¢map.aspx?loc=B39:17:00:21â¬¢';mapPlayer[3]='2â¬¢bookB39:17:74:21â¬¢rocky 2nd x 2â¬¢B39:17:74:21â¬¢cyanâ¬¢map.aspx?loc=B39:17:74:21â¬¢';mapPlayer[4]='2â¬¢bookB39:28:96:22â¬¢rocky moon 2ndâ¬¢B39:28:96:22â¬¢cyanâ¬¢map.aspx?loc=B39:28:96:22â¬¢';mapPlayer[5]='2â¬¢bookB39:34:19:21â¬¢rocky 2nd moonâ¬¢B39:34:19:21â¬¢cyanâ¬¢map.aspx?loc=B39:34:19:21â¬¢';mapPlayer[6]='2â¬¢bookB39:34:85:22â¬¢rocky 2ndâ¬¢B39:34:85:22â¬¢cyanâ¬¢map.aspx?loc=B39:34:85:22â¬¢';mapPlayer[7]='2â¬¢bookB39:35:66:22â¬¢rocky moon 2ndâ¬¢B39:35:66:22â¬¢cyanâ¬¢map.aspx?loc=B39:35:66:22â¬¢';mapPlayer[8]='2â¬¢bookB39:35:73:21â¬¢rocky moon 2ndâ¬¢B39:35:73:21â¬¢cyanâ¬¢map.aspx?loc=B39:35:73:21â¬¢';mapPlayer[9]='2â¬¢bookB39:53:46:21â¬¢Allarick 2â¬¢B39:53:46:21â¬¢cyanâ¬¢map.aspx?loc=B39:53:46:21â¬¢';mapPlayer[10]='2â¬¢bookB39:62:16:21â¬¢Allarick 1â¬¢B39:62:16:21â¬¢cyanâ¬¢map.aspx?loc=B39:62:16:21â¬¢';mapPlayer[11]='2â¬¢bookB39:76:57:31â¬¢rocky 3rdâ¬¢B39:76:57:31â¬¢cyanâ¬¢map.aspx?loc=B39:76:57:31â¬¢';mapPlayer[12]='2â¬¢bookB39:77:34:21â¬¢rocky 2â¬¢B39:77:34:21â¬¢cyanâ¬¢map.aspx?loc=B39:77:34:21â¬¢';mapPlayer[13]='1â¬¢fleet445609â¬¢Fleet 1â¬¢B39:17:31:10â¬¢#eeeeeeâ¬¢fleet.aspx?fleet=445609â¬¢Size: 20â¬¢â¬¢0â¬¢0';mapPlayer[14]='1â¬¢fleet448284â¬¢Fleet 2â¬¢B39:43:34:20â¬¢#eeeeeeâ¬¢fleet.aspx?fleet=448284â¬¢Size: 20â¬¢â¬¢0â¬¢0';mapPlayer[15]='1â¬¢fleet448341â¬¢Fleet 3â¬¢B39:46:12:31â¬¢#eeeeeeâ¬¢fleet.aspx?fleet=448341â¬¢Size: 20â¬¢â¬¢0â¬¢0';mapPlayer[16]='1â¬¢fleet453186â¬¢Fleet 4â¬¢B39:77:42:21â¬¢#eeeeeeâ¬¢fleet.aspx?fleet=453186â¬¢Size: 195â¬¢â¬¢0â¬¢0';mapPlayer[17]='1â¬¢fleet468241â¬¢Fleet 5â¬¢B39:77:34:21â¬¢#eeeeeeâ¬¢fleet.aspx?fleet=468241â¬¢Size: 35â¬¢â¬¢0â¬¢0';mapPlayer[18]='1â¬¢fleet469371â¬¢Fleet 6â¬¢B39:86:03:10â¬¢#eeeeeeâ¬¢fleet.aspx?fleet=469371â¬¢Size: 20â¬¢â¬¢0â¬¢0';mapPlayer[19]='0â¬¢base50648â¬¢Home Planetâ¬¢B39:77:42:21â¬¢whiteâ¬¢base.aspx?base=50648â¬¢';mapPlayer[20]='0â¬¢base51525â¬¢Bobâ¬¢B39:77:34:21â¬¢whiteâ¬¢base.aspx?base=51525â¬¢';var mapRegion = [];mapRegion[76]=1;mapRegion[57]=1;mapRegion[68]=1;mapRegion[47]=1;mapRegion[58]=1;mapRegion[25]=1;mapRegion[48]=1;mapRegion[37]=1;mapRegion[15]=1;mapRegion[49]=1;mapRegion[27]=1;mapRegion[14]=1;mapRegion[26]=1;mapRegion[24]=1;mapRegion[28]=1;mapRegion[35]=1;mapRegion[77]=1;mapRegion[36]=1;mapRegion[34]=1;mapRegion[17]=1;mapRegion[43]=1;mapRegion[46]=1;mapRegion[86]=1;var starTypes = [];starTypes['Y.'] = ['star_yellow', 'Yellow Star'];starTypes['W.'] = ['star_white','White Star'];starTypes['R.'] = ['star_red','Red Star'];starTypes['N.'] = ['star_neutron','Neutron Star'];starTypes['B.'] = ['star_blue','Blue Star'];starTypes['O.'] = ['star_orange','Orange Star'];starTypes['WD'] = ['star_white-dwarf','White Dwarf Star'];starTypes['RG'] = ['star_red-giant','Red Giant Star'];starTypes['BG'] = ['star_blue-giant','Blue Giant Star'];starTypes['SG'] = ['star_super-giant','Super Giant Star'];starTypes['WH'] = ['star_worm-hole','Wormhole'];var starsGalaxy = 'B39';var mapCurrentRegion = 23;var starsBlockName = -1;var curMapNum = 3;var MapsQuant = 4;var serverGalaxies = 40;var mapURL = 'map.aspx';var regionURLparam = 'loc=';var zoomURLparam = 'zoom=';var mapTimerInterval = '10000';var pageURL = 'map.aspx';var galaxiesURL = 'map.aspx?gal=';var galaxyRegions = '100';var mapFavs=2;var mapFavs_tab=4;var mapFavs_pos=1;var mapFavs_side=0;var mapTileSize = [];var mapFavs_types = [];mapFavs_types[0] = 'Bases';mapFavs_types[1] = 'Fleets';mapFavs_types[2] = 'Bookmarks';mapFavs_types[3] = 'Bases Occupied';var location_label = 'location';var fleetmove_label = 'move';var mapFormat_Height = '1';var mapFormat_minH = '540';var mapHighScalesN = 0;var mapZoomToRegion = 0;var mapFavBases = '2';var mapFavListSize = '20';var mapXMLguildsb = 'map_ajax.aspx?method=ajax&player=7325&action=list_bases&version=1&rnd=7621110&gal=B39&guild=';var mapXMLguildsbe = '';var mapUserType = '1';var mapUserTypeErr = '';var mapUserID = '7325';var mapUserGID = '225';var mapLblRegion = 'Region';var mapParallax = true;var mapFog = true;var mapGuilds = true;var mapMobile = false; var mapTouch = false;                  </script>                  <div id='map2_Viewport'>                    <div id='map2_Layer-0' class=                    'mapcontent mapgrid-5' style=                    'position: relative; height: 500px; width: 500px;'>                    <div id='map2_ObjGFX_bot0' style=                    'display: block;'></div>                      <div id='map2_ObjRegions0' style=                      'display: block;'></div>                      <div id='map2_ObjTiles0' style=                      'display: block;'></div>                      <div id='map2_ObjGFX0' style=                      'display: block;'></div>                      <div id='map2_ObjMOTION0' style=                      'display: block;'></div>                    </div><script type='text/javascript'>mapTileSize[0]='50';mapHighScalesN ++;mapZoomToRegion ++;                    </script>                    <div id='map2_Layer-1' class=                    'mapcontent mapgrid-12' style=                    'position: relative; height: 1200px; width: 1200px;'>                    <div id='map2_ObjGFX_bot1' style=                    'display: block;'></div>                      <div id='map2_ObjRegions1' style=                      'display: block;'></div>                      <div id='map2_ObjTiles1' style=                      'display: block;'></div>                      <div id='map2_ObjGFX1' style=                      'display: block;'></div>                      <div id='map2_ObjMOTION1' style=                      'display: block;'></div>                    </div><script type='text/javascript'>mapTileSize[1]='120';mapHighScalesN ++;mapZoomToRegion ++;                    </script>                    <div id='map2_Layer-2' class=                    'mapcontent mapgrid-24' style=                    'position: relative; height: 2400px; width: 2400px;'>                    <div id='map2_ObjGFX_bot2' style=                    'display: block;'></div>                      <div id='map2_ObjRegions2' style=                      'display: block;'></div>                      <div id='map2_ObjTiles2' style=                      'display: block;'></div>                      <div id='map2_ObjGFX2' style=                      'display: block;'></div>                      <div id='map2_ObjMOTION2' style=                      'display: block;'></div>                    </div><script type='text/javascript'>mapTileSize[2]='240';                    </script>                    <div id='map2_Layer-3' class=                    'mapcontent mapgrid-48' style=                    'position: relative; height: 4800px; width: 4800px;'>                    <div id='map2_ObjGFX_bot3' style=                    'display: block;'></div>                      <div id='map2_ObjRegions3' style=                      'display: block;'></div>                      <div id='map2_ObjTiles3' style=                      'display: block;'></div>                      <div id='map2_ObjGFX3' style=                      'display: block;'></div>                      <div id='map2_ObjMOTION3' style=                      'display: block;'></div>                    </div><script type='text/javascript'>mapTileSize[3]='480';                    </script>                    <div id='map2_Layer-4' class=                    'mapcontent mapgrid-96' style=                    'position: relative; height: 9600px; width: 9600px;'>                    <div id='map2_ObjGFX_bot4' style=                    'display: block;'></div>                      <div id='map2_ObjRegions4' style=                      'display: block;'></div>                      <div id='map2_ObjTiles4' style=                      'display: block;'></div>                      <div id='map2_ObjGFX4' style=                      'display: block;'></div>                      <div id='map2_ObjMOTION4' style=                      'display: block;'></div>                    </div><script type='text/javascript'>mapTileSize[4]='960';                    </script>                  </div><a id='map2_NavBtn_left' class=                  'left'></a><a id='map2_NavBtn_right' class=                  'right'></a><a id='map2_NavBtn_up' class=                  'up'></a><a id='map2_NavBtn_down' class=                  'down'></a><a id='map2_NavBtn_zoom' class=                  'zoom'></a><a id='map2_NavBtn_back' class=                  'back'></a><a id='map2_NavBtn_fs' class=                  'back'></a>                </div>              </div>              <div id='map2_Cell-5' class=              'map2_Cell-Vertical map2_Cell-5'></div>            </div>            <div class='map2_Cell-Row map2_Cell-Row-3'>              <div id='map2_Cell-6' class=              'map2_Cell-Corner map2_Cell-6'></div>              <div id='map2_Cell-7' class=              'map2_Cell-Horizontal map2_Cell-7'></div>              <div id='map2_Cell-8' class=              'map2_Cell-Corner map2_Cell-8'></div>            </div>          </div>        </div>        <div id='map2_Fav'>          <div id='map2_Fav_location'>            <div id='draglink_Fav' class='map2_Fav-Header'>              <p>Current Location</p>            </div>            <div class='map2_Fav-Content'>              <div class='map2_Fav-Location'>                <p><span class='galaxy' onclick=                'changeVisibility("map2_Fav-Galaxies",0);'>Galaxy                B39</span> <span class='galaxy-tab'>:</span>                <span class='galaxy galaxy-region' onclick=                'changeVisibility("map2_Fav-Regions",0);'>Region                <strong id='setRegion'></strong></span><span id=                'map2_Fav-Galaxies' style=                'display: none;'></span><span id='map2_Fav-Regions'                style='display: none;'></span></p>                <form method='get' action='map.aspx' onsubmit=                'return checkInputLocation(this)'>                  <input class='txt' id='getLocation' name='loc'                  type='text'><input class='btn' type='submit'                  value=''>                </form>              </div>            </div>            <div class='map2_Fav-Bottom'></div>          </div>          <div id='map2_Fav_items'>            <div id='favBar2_header' class='map2_Fav-Header'            onclick='changeVisibility("favBar2",0);'>              <p>Galaxy B39</p>            </div>            <div class='map2_Fav-Content'>              <ul>                <li><a onclick='changeVisibility("0",1);' id=                'external' class=                'list-display'><span>2</span>Bases</a><a id=                'map2_ObjStatus:0' class='list-switch'></a></li>                <li style="list-style: none; display: inline">                  <ul id='map2_Fav-0'></ul>                </li>              </ul>              <ul>                <li><a onclick='changeVisibility("1",1);' id=                'external' class=                'list-display'><span>6</span>Fleets</a><a id=                'map2_ObjStatus:1' class='list-switch'></a></li>                <li style="list-style: none; display: inline">                  <ul id='map2_Fav-1'></ul>                </li>              </ul>              <ul>                <li><a onclick='changeVisibility("2",1);' id=                'external' class=                'list-display'><span>13</span>Bookmarks</a><a id=                'map2_ObjStatus:2' class='list-switch'></a></li>                <li style="list-style: none; display: inline">                  <ul id='map2_Fav-2'></ul>                </li>              </ul>              <ul>                <li class='guilds'><a onclick=                'load_map_guilds("map_ajax.aspx?method=ajax&amp;player=7325&amp;action=list_guilds&amp;version=1&amp;rnd=7621110&amp;gal=B39");'                id='external' class='list-display'><span id=                'map2_Fav-4-val1'>&nbsp;</span>Guilds</a><a onclick='load_map_guilds("map_ajax.aspx?method=ajax&amp;player=7325&amp;action=list_guilds&amp;version=1&amp;rnd=7621110&amp;gal=B39");'                id='map2_Fav-4-switch' class=                'list-switch-off'></a><a id='map2_ObjStatus:4'                class='list-switch-off' style=                'display:none;'></a></li>                <li style="list-style: none; display: inline">                  <ul id='map2_Fav-4'></ul>                </li>              </ul>            </div>            <div class='map2_Fav-Bottom'></div>          </div>        </div>      </div><script type='text/javascript'>setMapSize();set_mapobjects();load_map_galaxy('galaxies_xml/Bravo-39.xml');window.onunload = function(){};$(function() {$( '#map2_Fav').draggable();});      </script>    </div>  </div><!-- event 17/10/2014 00:03:54 ; 539 sec --></body></html>
[Wed Oct 22 15:19:01 2014] [debug] Rendering template "main/dumpPostData.html.ep".
[Wed Oct 22 15:19:01 2014] [debug] Rendering template "layouts/default.html.ep".
[Wed Oct 22 15:19:01 2014] [debug] Rendering template "common_styles.html.ep".
[Wed Oct 22 15:19:01 2014] [debug] Rendering template "header.html.ep".
[Wed Oct 22 15:19:01 2014] [debug] Rendering template "common_js.html.ep".
[Wed Oct 22 15:19:01 2014] [debug] 200 OK (0.115884s, 8.629/s).
[Wed Oct 22 15:23:59 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 15:23:59 2014] [debug] wtf
[Wed Oct 22 15:23:59 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 15:24:19 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 15:24:19 2014] [debug] wtf
[Wed Oct 22 15:24:19 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 15:24:45 2014] [debug] Your secret passphrase needs to be changed!!!
[Wed Oct 22 15:24:45 2014] [debug] wtf
[Wed Oct 22 15:24:45 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Wed Oct 22 15:24:48 2014] [debug] $VAR1 = [];

[Wed Oct 22 15:24:48 2014] [debug] POST "/ae/gmDrop".
[Wed Oct 22 15:24:48 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 15:24:48 2014] [debug] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd"><html><head>  <meta name="generator" content=  "HTML Tidy for Linux/x86 (vers 25 March 2009), see www.w3.org">  <title>Map</title>  <meta http-equiv='cache-control' content='no-cache'>  <meta http-equiv='pragma' content='no-cache'>  <meta http-equiv='expires' content='0'>  <link rel='shortcut icon' href=  'http://cdn.astroempires.com/images/favicon.ico'>  <link rel='stylesheet' type='text/css' href=  'http://cdn.astroempires.com/skins/darkAstros/style6.css'>  <style type='text/css'>#map { background-color: #333399; }  </style>  <link href=  'http://cdn.astroempires.com/skins/map2/universal_v1.11/map2_base_4.css'  type='text/css' rel='stylesheet'>  <link href=  'http://cdn.astroempires.com/skins/map2/universal_v1.11/map2_style-standard.css'  type='text/css' rel='stylesheet'>  <link href=  'http://cdn.astroempires.com/skins/notifications_v1.3/notification_5.css'  type='text/css' rel='stylesheet'>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/jquery-1.8.2.min.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/js_timers_v1.12.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/common_v2.0.27d.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/wz_jsgraphics_305.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/jquery-ui-1.8.24.custom.min.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/jquery.ui.touch-punch_v0.3.1.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/jquery.mousewheel_v3.1.11.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/map_v1.119.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/sort_v2.0.27.js'></script>  <script type='text/javascript' src=  'http://cdn.astroempires.com/javascript/notifications_v1.24.js'></script></head><body>  <script type="text/javascript">notifications('notifications_ajax.aspx?method=ajax&player=7325&version=1', 30, 8,0);  </script>  <div align='center'>    <a href='ranks.aspx'>Ranks</a> <span class=    'comment'><b>(2181)</b></span> - <a href=    'updates.aspx'>Updates</a> - <a href=    'terms.aspx?view=rules'>Rules</a> - <a href=    'help.aspx'>Help</a> - <a href='tables.aspx'>Tables</a> -    <a href='http://portal.astroempires.com' target=    '_blank'>Portal</a> - <a href='http://forum.astroempires.com'    target='_blank'>Forum</a> - <a href=    'http://wiki.astroempires.com' target='_blank'>Wiki</a> -    <a href='extras.aspx'>Extras</a> - <a href=    'contact.aspx'>Support</a> - <a href=    'home.aspx?session=logout&amp;id=9910582733192116'>Logout</a><br>    <small><span id='server-time' title='2014/10/16 23:54:54'>16    Oct 2014, 23:54:54</span></small>  </div><br>  <script type='text/javascript'>clientDate_format=0;display_animated_server_time=true;header_timer(); setInterval('header_timer();', 250);  </script>  <table align='center' width='850' class='top'>    <tr>      <td colspan='5' align='center'>        <img src='http://cdn.astroempires.com/images/logo_mini.gif'        alt='Astro Empires'><br>        <small>Server:</small> <span style='position: relative;'        id='servers-dropdown'><small><a href=        'account.aspx?view=servers' onclick='return !1;'>Bravo        &#9660;</a></small></span>        <div id='servers-list' style=        'position: absolute; display: none; width: auto; z-index: 10; left: -5px; top: 15px;'>        <span style='position: relative;' id=        'servers-dropdown'></span>          <table class='no_back' cellpadding='6'>            <tr>              <th style='line-height: 140%'><a href=              'http://alpha.astroempires.com/account.aspx'>Alpha</a><br>              <a href=              'http://beta.astroempires.com/account.aspx'>Beta</a><br>              <a href=              'http://ceti.astroempires.com/account.aspx'>Ceti</a><br>              <a href=              'http://delta.astroempires.com/account.aspx'>Delta</a><br>              <a href=              'http://epsilon.astroempires.com/account.aspx'>Epsilon</a><br>              <a href=              'http://fenix.astroempires.com/account.aspx'>Fenix</a><br>              <a href=              'http://gamma.astroempires.com/account.aspx'>Gamma</a><br>              <a href=              'http://helion.astroempires.com/account.aspx'>Helion</a><br>              <a href=              'http://ixion.astroempires.com/account.aspx'>Ixion</a><br>              <a href=              'http://juno.astroempires.com/account.aspx'>Juno</a><br>              <a href=              'http://kappa.astroempires.com/account.aspx'>Kappa</a><br>              <a href=              'http://lyra.astroempires.com/account.aspx'>Lyra</a><br>              <a href=              'http://mira.astroempires.com/account.aspx'>Mira</a><br>              <a href=              'http://nova.astroempires.com/account.aspx'>Nova</a><br>              <a href=              'http://omega.astroempires.com/account.aspx'>Omega</a><br>              <a href=              'http://pegasus.astroempires.com/account.aspx'>Pegasus</a><br>              <a href=              'http://andromeda.astroempires.com/account.aspx'>Andromeda</a><br>              Bravo<br>              - - - -<br>              <a href=              'http://ares.astroempires.com/account.aspx'>Ares</a><br></th>            </tr>          </table>        </div><script type="text/javascript">$("#servers-dropdown").click( function(event) { $("#advertising2").toggle(); $("#servers-list").toggle(); event.stopPropagation(); } );$("body").click( function() { $("#servers-list").hide(); $("#advertising2").show(); } );        </script>      </td>      <td colspan='4' align='center'>        <table class='no_back' align='center'>          <tr>            <th id='account' width='80'><a href=            'account.aspx'>Account</a></th>            <th width='90'>7325</th>            <th id='messages' width='80'><a href=            'messages.aspx'>Messages</a></th>            <th width='90'>0 New</th>          </tr>          <tr>            <th id='credits'><a href=            'credits.aspx'>Credits</a></th>            <th>7</th>            <th id='board'><a href='board.aspx'>Board</a></th>            <th>0 New</th>          </tr>        </table>      </td>    </tr>    <tr>      <th colspan='9'><marquee scrollamount='1' scrolldelay='1'      behavior='alternate' loop='1'>&nbsp; <a href=      'profile.aspx?player=2504'>[Sith] DemonicGold</a> vs.      <a href='profile.aspx?player=3672'>[DAMN] Godzilla</a>      losses: 225 / 500 &nbsp;&nbsp; <a href=      'profile.aspx?player=870'>[Mmmmm] Delepitore</a> vs. <a href=      'profile.aspx?player=37'>[&#194;&#165;&#194;&#165;]      Azazel</a> losses: 840 / 3,245</marquee></th>    </tr>    <tr>      <th width='10%' id='bases'><a href='base.aspx'>Bases</a></th>      <th width='10%' id='map'><a href='map.aspx'>Map</a></th>      <th width='10%' id='fleets'><a href=      'fleet.aspx'>Fleets</a></th>      <th width='11%' id='empire'><a href=      'empire.aspx'>Empire</a></th>      <th width='13%' id='commanders'><a href=      'commander.aspx'>Commanders</a></th>      <th width='10%' id='guild'><a href=      'guild.aspx'>Guild</a></th>      <th width='10%' id='notes'><a href=      'notes.aspx'>Notes</a></th>      <th width='13%' id='bookmarks'><a href=      'bookmarks.aspx'>Bookmarks</a></th>      <th width='13%' id='notifications'><a href=      'notifications.aspx'>Notifications</a></th>    </tr>  </table><br>  <div style='text-align: center;'>    <div style='width: 850px; height: 540px; margin: 0 auto;'>      <div id='map2_ToolBox_1' class='map2_ToolBox'></div>      <div id='map2_ToolBox_0' class='map2_ToolBox'></div>      <div style='width: 100%; height: 100%; position: relative;'>        <div id='map2_Wrapper' style='visibility: hidden;'>          <div class='map2_Cell' style=          'width: 100%; height: 100%;'>            <div class='map2_Cell-Row map2_Cell-Row-1'>              <div id='map2_Cell-0' class=              'map2_Cell-Corner map2_Cell-0'></div>              <div id='map2_Cell-1' class=              'map2_Cell-Horizontal map2_Cell-1'></div>              <div id='map2_Cell-2' class=              'map2_Cell-Corner map2_Cell-2'></div>            </div>            <div class='map2_Cell-Row map2_Cell-Row-2'>              <div id='map2_Cell-3' class=              'map2_Cell-Vertical map2_Cell-3'></div>              <div id='map2_Cell-4' class=              'map2_Cell-4 map2_Cell-Center'>                <div style=                'position: absolute; float: left; top: 13px; left: 13px;'>                <script type='text/javascript'>var mapPlayer = [];mapPlayer[0]='2â¬¢bookB39:14:77:22â¬¢rocky moon 2nd posâ¬¢B39:14:77:22â¬¢cyanâ¬¢map.aspx?loc=B39:14:77:22â¬¢';mapPlayer[1]='2â¬¢bookB39:14:94:21â¬¢rocky 2- peeped [AVA] Dr Jeepersâ¬¢B39:14:94:21â¬¢cyanâ¬¢map.aspx?loc=B39:14:94:21â¬¢';mapPlayer[2]='2â¬¢bookB39:17:00:21â¬¢rocky 2ndâ¬¢B39:17:00:21â¬¢cyanâ¬¢map.aspx?loc=B39:17:00:21â¬¢';mapPlayer[3]='2â¬¢bookB39:17:74:21â¬¢rocky 2nd x 2â¬¢B39:17:74:21â¬¢cyanâ¬¢map.aspx?loc=B39:17:74:21â¬¢';mapPlayer[4]='2â¬¢bookB39:28:96:22â¬¢rocky moon 2ndâ¬¢B39:28:96:22â¬¢cyanâ¬¢map.aspx?loc=B39:28:96:22â¬¢';mapPlayer[5]='2â¬¢bookB39:34:19:21â¬¢rocky 2nd moonâ¬¢B39:34:19:21â¬¢cyanâ¬¢map.aspx?loc=B39:34:19:21â¬¢';mapPlayer[6]='2â¬¢bookB39:34:85:22â¬¢rocky 2ndâ¬¢B39:34:85:22â¬¢cyanâ¬¢map.aspx?loc=B39:34:85:22â¬¢';mapPlayer[7]='2â¬¢bookB39:35:66:22â¬¢rocky moon 2ndâ¬¢B39:35:66:22â¬¢cyanâ¬¢map.aspx?loc=B39:35:66:22â¬¢';mapPlayer[8]='2â¬¢bookB39:35:73:21â¬¢rocky moon 2ndâ¬¢B39:35:73:21â¬¢cyanâ¬¢map.aspx?loc=B39:35:73:21â¬¢';mapPlayer[9]='2â¬¢bookB39:53:46:21â¬¢Allarick 2â¬¢B39:53:46:21â¬¢cyanâ¬¢map.aspx?loc=B39:53:46:21â¬¢';mapPlayer[10]='2â¬¢bookB39:62:16:21â¬¢Allarick 1â¬¢B39:62:16:21â¬¢cyanâ¬¢map.aspx?loc=B39:62:16:21â¬¢';mapPlayer[11]='2â¬¢bookB39:76:57:31â¬¢rocky 3rdâ¬¢B39:76:57:31â¬¢cyanâ¬¢map.aspx?loc=B39:76:57:31â¬¢';mapPlayer[12]='2â¬¢bookB39:77:34:21â¬¢rocky 2â¬¢B39:77:34:21â¬¢cyanâ¬¢map.aspx?loc=B39:77:34:21â¬¢';mapPlayer[13]='1â¬¢fleet445609â¬¢Fleet 1â¬¢B39:17:31:10â¬¢#eeeeeeâ¬¢fleet.aspx?fleet=445609â¬¢Size: 20â¬¢â¬¢0â¬¢0';mapPlayer[14]='1â¬¢fleet448284â¬¢Fleet 2â¬¢B39:43:34:20â¬¢#eeeeeeâ¬¢fleet.aspx?fleet=448284â¬¢Size: 20â¬¢â¬¢0â¬¢0';mapPlayer[15]='1â¬¢fleet448341â¬¢Fleet 3â¬¢B39:46:12:31â¬¢#eeeeeeâ¬¢fleet.aspx?fleet=448341â¬¢Size: 20â¬¢â¬¢0â¬¢0';mapPlayer[16]='1â¬¢fleet453186â¬¢Fleet 4â¬¢B39:77:42:21â¬¢#eeeeeeâ¬¢fleet.aspx?fleet=453186â¬¢Size: 195â¬¢â¬¢0â¬¢0';mapPlayer[17]='1â¬¢fleet468241â¬¢Fleet 5â¬¢B39:77:34:21â¬¢#eeeeeeâ¬¢fleet.aspx?fleet=468241â¬¢Size: 35â¬¢â¬¢0â¬¢0';mapPlayer[18]='1â¬¢fleet469371â¬¢Fleet 6â¬¢B39:86:03:10â¬¢#eeeeeeâ¬¢fleet.aspx?fleet=469371â¬¢Size: 20â¬¢â¬¢0â¬¢0';mapPlayer[19]='0â¬¢base50648â¬¢Home Planetâ¬¢B39:77:42:21â¬¢whiteâ¬¢base.aspx?base=50648â¬¢';mapPlayer[20]='0â¬¢base51525â¬¢Bobâ¬¢B39:77:34:21â¬¢whiteâ¬¢base.aspx?base=51525â¬¢';var mapRegion = [];mapRegion[76]=1;mapRegion[57]=1;mapRegion[68]=1;mapRegion[47]=1;mapRegion[58]=1;mapRegion[25]=1;mapRegion[48]=1;mapRegion[37]=1;mapRegion[15]=1;mapRegion[49]=1;mapRegion[27]=1;mapRegion[14]=1;mapRegion[26]=1;mapRegion[24]=1;mapRegion[28]=1;mapRegion[35]=1;mapRegion[77]=1;mapRegion[36]=1;mapRegion[34]=1;mapRegion[17]=1;mapRegion[43]=1;mapRegion[46]=1;mapRegion[86]=1;var starTypes = [];starTypes['Y.'] = ['star_yellow', 'Yellow Star'];starTypes['W.'] = ['star_white','White Star'];starTypes['R.'] = ['star_red','Red Star'];starTypes['N.'] = ['star_neutron','Neutron Star'];starTypes['B.'] = ['star_blue','Blue Star'];starTypes['O.'] = ['star_orange','Orange Star'];starTypes['WD'] = ['star_white-dwarf','White Dwarf Star'];starTypes['RG'] = ['star_red-giant','Red Giant Star'];starTypes['BG'] = ['star_blue-giant','Blue Giant Star'];starTypes['SG'] = ['star_super-giant','Super Giant Star'];starTypes['WH'] = ['star_worm-hole','Wormhole'];var starsGalaxy = 'B39';var mapCurrentRegion = 23;var starsBlockName = -1;var curMapNum = 3;var MapsQuant = 4;var serverGalaxies = 40;var mapURL = 'map.aspx';var regionURLparam = 'loc=';var zoomURLparam = 'zoom=';var mapTimerInterval = '10000';var pageURL = 'map.aspx';var galaxiesURL = 'map.aspx?gal=';var galaxyRegions = '100';var mapFavs=2;var mapFavs_tab=4;var mapFavs_pos=1;var mapFavs_side=0;var mapTileSize = [];var mapFavs_types = [];mapFavs_types[0] = 'Bases';mapFavs_types[1] = 'Fleets';mapFavs_types[2] = 'Bookmarks';mapFavs_types[3] = 'Bases Occupied';var location_label = 'location';var fleetmove_label = 'move';var mapFormat_Height = '1';var mapFormat_minH = '540';var mapHighScalesN = 0;var mapZoomToRegion = 0;var mapFavBases = '2';var mapFavListSize = '20';var mapXMLguildsb = 'map_ajax.aspx?method=ajax&player=7325&action=list_bases&version=1&rnd=7621110&gal=B39&guild=';var mapXMLguildsbe = '';var mapUserType = '1';var mapUserTypeErr = '';var mapUserID = '7325';var mapUserGID = '225';var mapLblRegion = 'Region';var mapParallax = true;var mapFog = true;var mapGuilds = true;var mapMobile = false; var mapTouch = false;                  </script>                  <div id='map2_Viewport'>                    <div id='map2_Layer-0' class=                    'mapcontent mapgrid-5' style=                    'position: relative; height: 500px; width: 500px;'>                    <div id='map2_ObjGFX_bot0' style=                    'display: block;'></div>                      <div id='map2_ObjRegions0' style=                      'display: block;'></div>                      <div id='map2_ObjTiles0' style=                      'display: block;'></div>                      <div id='map2_ObjGFX0' style=                      'display: block;'></div>                      <div id='map2_ObjMOTION0' style=                      'display: block;'></div>                    </div><script type='text/javascript'>mapTileSize[0]='50';mapHighScalesN ++;mapZoomToRegion ++;                    </script>                    <div id='map2_Layer-1' class=                    'mapcontent mapgrid-12' style=                    'position: relative; height: 1200px; width: 1200px;'>                    <div id='map2_ObjGFX_bot1' style=                    'display: block;'></div>                      <div id='map2_ObjRegions1' style=                      'display: block;'></div>                      <div id='map2_ObjTiles1' style=                      'display: block;'></div>                      <div id='map2_ObjGFX1' style=                      'display: block;'></div>                      <div id='map2_ObjMOTION1' style=                      'display: block;'></div>                    </div><script type='text/javascript'>mapTileSize[1]='120';mapHighScalesN ++;mapZoomToRegion ++;                    </script>                    <div id='map2_Layer-2' class=                    'mapcontent mapgrid-24' style=                    'position: relative; height: 2400px; width: 2400px;'>                    <div id='map2_ObjGFX_bot2' style=                    'display: block;'></div>                      <div id='map2_ObjRegions2' style=                      'display: block;'></div>                      <div id='map2_ObjTiles2' style=                      'display: block;'></div>                      <div id='map2_ObjGFX2' style=                      'display: block;'></div>                      <div id='map2_ObjMOTION2' style=                      'display: block;'></div>                    </div><script type='text/javascript'>mapTileSize[2]='240';                    </script>                    <div id='map2_Layer-3' class=                    'mapcontent mapgrid-48' style=                    'position: relative; height: 4800px; width: 4800px;'>                    <div id='map2_ObjGFX_bot3' style=                    'display: block;'></div>                      <div id='map2_ObjRegions3' style=                      'display: block;'></div>                      <div id='map2_ObjTiles3' style=                      'display: block;'></div>                      <div id='map2_ObjGFX3' style=                      'display: block;'></div>                      <div id='map2_ObjMOTION3' style=                      'display: block;'></div>                    </div><script type='text/javascript'>mapTileSize[3]='480';                    </script>                    <div id='map2_Layer-4' class=                    'mapcontent mapgrid-96' style=                    'position: relative; height: 9600px; width: 9600px;'>                    <div id='map2_ObjGFX_bot4' style=                    'display: block;'></div>                      <div id='map2_ObjRegions4' style=                      'display: block;'></div>                      <div id='map2_ObjTiles4' style=                      'display: block;'></div>                      <div id='map2_ObjGFX4' style=                      'display: block;'></div>                      <div id='map2_ObjMOTION4' style=                      'display: block;'></div>                    </div><script type='text/javascript'>mapTileSize[4]='960';                    </script>                  </div><a id='map2_NavBtn_left' class=                  'left'></a><a id='map2_NavBtn_right' class=                  'right'></a><a id='map2_NavBtn_up' class=                  'up'></a><a id='map2_NavBtn_down' class=                  'down'></a><a id='map2_NavBtn_zoom' class=                  'zoom'></a><a id='map2_NavBtn_back' class=                  'back'></a><a id='map2_NavBtn_fs' class=                  'back'></a>                </div>              </div>              <div id='map2_Cell-5' class=              'map2_Cell-Vertical map2_Cell-5'></div>            </div>            <div class='map2_Cell-Row map2_Cell-Row-3'>              <div id='map2_Cell-6' class=              'map2_Cell-Corner map2_Cell-6'></div>              <div id='map2_Cell-7' class=              'map2_Cell-Horizontal map2_Cell-7'></div>              <div id='map2_Cell-8' class=              'map2_Cell-Corner map2_Cell-8'></div>            </div>          </div>        </div>        <div id='map2_Fav'>          <div id='map2_Fav_location'>            <div id='draglink_Fav' class='map2_Fav-Header'>              <p>Current Location</p>            </div>            <div class='map2_Fav-Content'>              <div class='map2_Fav-Location'>                <p><span class='galaxy' onclick=                'changeVisibility("map2_Fav-Galaxies",0);'>Galaxy                B39</span> <span class='galaxy-tab'>:</span>                <span class='galaxy galaxy-region' onclick=                'changeVisibility("map2_Fav-Regions",0);'>Region                <strong id='setRegion'></strong></span><span id=                'map2_Fav-Galaxies' style=                'display: none;'></span><span id='map2_Fav-Regions'                style='display: none;'></span></p>                <form method='get' action='map.aspx' onsubmit=                'return checkInputLocation(this)'>                  <input class='txt' id='getLocation' name='loc'                  type='text'><input class='btn' type='submit'                  value=''>                </form>              </div>            </div>            <div class='map2_Fav-Bottom'></div>          </div>          <div id='map2_Fav_items'>            <div id='favBar2_header' class='map2_Fav-Header'            onclick='changeVisibility("favBar2",0);'>              <p>Galaxy B39</p>            </div>            <div class='map2_Fav-Content'>              <ul>                <li><a onclick='changeVisibility("0",1);' id=                'external' class=                'list-display'><span>2</span>Bases</a><a id=                'map2_ObjStatus:0' class='list-switch'></a></li>                <li style="list-style: none; display: inline">                  <ul id='map2_Fav-0'></ul>                </li>              </ul>              <ul>                <li><a onclick='changeVisibility("1",1);' id=                'external' class=                'list-display'><span>6</span>Fleets</a><a id=                'map2_ObjStatus:1' class='list-switch'></a></li>                <li style="list-style: none; display: inline">                  <ul id='map2_Fav-1'></ul>                </li>              </ul>              <ul>                <li><a onclick='changeVisibility("2",1);' id=                'external' class=                'list-display'><span>13</span>Bookmarks</a><a id=                'map2_ObjStatus:2' class='list-switch'></a></li>                <li style="list-style: none; display: inline">                  <ul id='map2_Fav-2'></ul>                </li>              </ul>              <ul>                <li class='guilds'><a onclick=                'load_map_guilds("map_ajax.aspx?method=ajax&amp;player=7325&amp;action=list_guilds&amp;version=1&amp;rnd=7621110&amp;gal=B39");'                id='external' class='list-display'><span id=                'map2_Fav-4-val1'>&nbsp;</span>Guilds</a><a onclick='load_map_guilds("map_ajax.aspx?method=ajax&amp;player=7325&amp;action=list_guilds&amp;version=1&amp;rnd=7621110&amp;gal=B39");'                id='map2_Fav-4-switch' class=                'list-switch-off'></a><a id='map2_ObjStatus:4'                class='list-switch-off' style=                'display:none;'></a></li>                <li style="list-style: none; display: inline">                  <ul id='map2_Fav-4'></ul>                </li>              </ul>            </div>            <div class='map2_Fav-Bottom'></div>          </div>        </div>      </div><script type='text/javascript'>setMapSize();set_mapobjects();load_map_galaxy('galaxies_xml/Bravo-39.xml');window.onunload = function(){};$(function() {$( '#map2_Fav').draggable();});      </script>    </div>  </div><!-- event 17/10/2014 00:03:54 ; 539 sec --></body></html>
[Wed Oct 22 15:24:48 2014] [debug] 200 OK (0.104624s, 9.558/s).
[Wed Oct 22 15:25:00 2014] [debug] $VAR1 = [];

[Wed Oct 22 15:25:00 2014] [debug] POST "/ae/gmDrop".
[Wed Oct 22 15:25:00 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 15:25:00 2014] [debug] server=yey
[Wed Oct 22 15:25:00 2014] [debug] 200 OK (0.000711s, 1406.470/s).
[Wed Oct 22 16:02:56 2014] [debug] $VAR1 = [];

[Wed Oct 22 16:02:56 2014] [debug] POST "/ae/gmDrop".
[Wed Oct 22 16:02:56 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 16:02:56 2014] [debug] server=yey
[Wed Oct 22 16:02:56 2014] [debug] 200 OK (0.000799s, 1251.564/s).
[Wed Oct 22 16:25:52 2014] [debug] $VAR1 = [];

[Wed Oct 22 16:25:52 2014] [debug] GET "/ae/".
[Wed Oct 22 16:25:52 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "index".
[Wed Oct 22 16:25:52 2014] [debug] Rendering template "main/index.html.ep".
[Wed Oct 22 16:25:52 2014] [debug] Rendering template "layouts/default.html.ep".
[Wed Oct 22 16:25:52 2014] [debug] Rendering template "common_styles.html.ep".
[Wed Oct 22 16:25:52 2014] [debug] Rendering template "header.html.ep".
[Wed Oct 22 16:25:52 2014] [debug] Rendering template "common_js.html.ep".
[Wed Oct 22 16:25:52 2014] [debug] 200 OK (0.014980s, 66.756/s).
[Wed Oct 22 16:25:54 2014] [debug] $VAR1 = [];

[Wed Oct 22 16:25:54 2014] [debug] GET "/ae/login".
[Wed Oct 22 16:25:54 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "login".
[Wed Oct 22 16:25:54 2014] [debug] routed to login correctly
[Wed Oct 22 16:25:54 2014] [debug] Rendering template "main/login.html.ep".
[Wed Oct 22 16:25:54 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 16:25:54 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 16:25:54 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 16:25:54 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 16:25:54 2014] [debug] 200 OK (0.007575s, 132.013/s).
[Wed Oct 22 16:25:58 2014] [debug] $VAR1 = [];

[Wed Oct 22 16:25:58 2014] [debug] GET "/ae/login".
[Wed Oct 22 16:25:58 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "login".
[Wed Oct 22 16:25:58 2014] [debug] routed to login correctly
[Wed Oct 22 16:25:58 2014] [debug] Rendering cached template "main/login.html.ep".
[Wed Oct 22 16:25:58 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 16:25:58 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 16:25:58 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 16:25:58 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 16:25:58 2014] [debug] 200 OK (0.005644s, 177.179/s).
[Wed Oct 22 16:26:12 2014] [debug] $VAR1 = [];

[Wed Oct 22 16:26:12 2014] [debug] GET "/ae/gmDrop".
[Wed Oct 22 16:26:12 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 16:26:12 2014] [debug] Rendering template "example/welcome.html.ep".
[Wed Oct 22 16:26:12 2014] [debug] Rendering template "layouts/default.html.ep".
[Wed Oct 22 16:26:12 2014] [debug] Rendering template "common_styles.html.ep".
[Wed Oct 22 16:26:12 2014] [debug] Rendering template "header.html.ep".
[Wed Oct 22 16:26:12 2014] [debug] Rendering template "common_js.html.ep".
[Wed Oct 22 16:26:12 2014] [debug] 200 OK (0.013953s, 71.669/s).
[Wed Oct 22 16:55:28 2014] [debug] $VAR1 = [];

[Wed Oct 22 16:55:28 2014] [debug] GET "/ae/gmDrop".
[Wed Oct 22 16:55:28 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 16:55:28 2014] [debug] Rendering cached template "example/welcome.html.ep".
[Wed Oct 22 16:55:28 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 16:55:28 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 16:55:28 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 16:55:28 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 16:55:28 2014] [debug] 200 OK (0.005618s, 177.999/s).
[Wed Oct 22 17:00:34 2014] [debug] $VAR1 = [];

[Wed Oct 22 17:00:34 2014] [debug] OPTIONS "/ae/gmDrop".
[Wed Oct 22 17:00:34 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 17:00:34 2014] [debug] Rendering template "not_found.html.ep".
[Wed Oct 22 17:00:34 2014] [debug] Rendering template "layouts/none.html.ep".
[Wed Oct 22 17:00:34 2014] [debug] 404 Not Found (0.008459s, 118.217/s).
[Wed Oct 22 17:01:31 2014] [debug] $VAR1 = [];

[Wed Oct 22 17:01:31 2014] [debug] OPTIONS "/ae/gmDrop".
[Wed Oct 22 17:01:31 2014] [debug] Template "not_found.development.html.ep" not found.
[Wed Oct 22 17:01:31 2014] [debug] Rendering cached template "not_found.html.ep".
[Wed Oct 22 17:01:31 2014] [debug] Rendering cached template "layouts/none.html.ep".
[Wed Oct 22 17:01:31 2014] [debug] 404 Not Found (0.001878s, 532.481/s).
[Wed Oct 22 17:04:14 2014] [debug] $VAR1 = [];

[Wed Oct 22 17:04:14 2014] [debug] GET "/ae/gmDrop".
[Wed Oct 22 17:04:14 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 17:04:14 2014] [debug] Rendering cached template "example/welcome.html.ep".
[Wed Oct 22 17:04:14 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 17:04:14 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 17:04:14 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 17:04:14 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 17:04:14 2014] [debug] 200 OK (0.006500s, 153.846/s).
[Wed Oct 22 17:25:17 2014] [debug] $VAR1 = [];

[Wed Oct 22 17:25:17 2014] [debug] POST "/ae/gmDrop".
[Wed Oct 22 17:25:17 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 17:25:17 2014] [debug] server=yey
[Wed Oct 22 17:25:17 2014] [debug] 200 OK (0.000861s, 1161.440/s).
[Wed Oct 22 17:25:25 2014] [debug] $VAR1 = [];

[Wed Oct 22 17:25:25 2014] [debug] GET "/ae/gmDrop".
[Wed Oct 22 17:25:25 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 17:25:25 2014] [debug] Rendering cached template "example/welcome.html.ep".
[Wed Oct 22 17:25:25 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 17:25:25 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 17:25:25 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 17:25:25 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 17:25:25 2014] [debug] 200 OK (0.005721s, 174.795/s).
[Wed Oct 22 17:28:20 2014] [debug] $VAR1 = [];

[Wed Oct 22 17:28:20 2014] [debug] GET "/ae/gmDrop".
[Wed Oct 22 17:28:20 2014] [debug] Routing to controller "AeWeb::Controller::Example" and action "welcome".
[Wed Oct 22 17:28:20 2014] [debug] Rendering cached template "example/welcome.html.ep".
[Wed Oct 22 17:28:20 2014] [debug] Rendering cached template "layouts/default.html.ep".
[Wed Oct 22 17:28:20 2014] [debug] Rendering cached template "common_styles.html.ep".
[Wed Oct 22 17:28:20 2014] [debug] Rendering cached template "header.html.ep".
[Wed Oct 22 17:28:20 2014] [debug] Rendering cached template "common_js.html.ep".
[Wed Oct 22 17:28:20 2014] [debug] 200 OK (0.005955s, 167.926/s).
[Wed Oct 22 17:32:33 2014] [debug] $VAR1 = [];

[Wed Oct 22 17:32:33 2014] [debug] POST "/ae/gmDrop".
[Wed Oct 22 17:32:33 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 17:32:33 2014] [debug] {"server":"andromeda","playerId":1234}
[Wed Oct 22 17:32:33 2014] [debug] 200 OK (0.000853s, 1172.333/s).
[Wed Oct 22 17:35:00 2014] [debug] $VAR1 = [];

[Wed Oct 22 17:35:00 2014] [debug] POST "/ae/gmDrop".
[Wed Oct 22 17:35:00 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 17:35:00 2014] [debug] {"server":"andromeda","playerId":1234}
[Wed Oct 22 17:35:00 2014] [debug] 200 OK (0.000871s, 1148.106/s).
[Wed Oct 22 17:35:00 2014] [debug] $VAR1 = [];

[Wed Oct 22 17:35:00 2014] [debug] POST "/ae/gmDrop".
[Wed Oct 22 17:35:00 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 17:35:00 2014] [debug] {"server":"andromeda","playerId":1234}
[Wed Oct 22 17:35:00 2014] [debug] 200 OK (0.001316s, 759.878/s).
[Wed Oct 22 17:35:02 2014] [debug] $VAR1 = [];

[Wed Oct 22 17:35:02 2014] [debug] POST "/ae/gmDrop".
[Wed Oct 22 17:35:02 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Wed Oct 22 17:35:02 2014] [debug] {"server":"andromeda","playerId":1234}
[Wed Oct 22 17:35:02 2014] [debug] 200 OK (0.000831s, 1203.369/s).
[Thu Oct 23 15:08:11 2014] [debug] Your secret passphrase needs to be changed!!!
[Thu Oct 23 15:08:11 2014] [debug] wtf
[Thu Oct 23 15:08:11 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Thu Oct 23 15:42:43 2014] [debug] Your secret passphrase needs to be changed!!!
[Thu Oct 23 15:42:43 2014] [debug] wtf
[Thu Oct 23 15:42:43 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Thu Oct 23 15:47:20 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Thu Oct 23 15:49:36 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Thu Oct 23 15:56:00 2014] [debug] Your secret passphrase needs to be changed!!!
[Thu Oct 23 15:56:00 2014] [debug] $VAR1 = [];

[Thu Oct 23 15:56:00 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 15:56:00 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 15:56:00 2014] [debug] {"server":"andromeda","time":"2014/10/23 20:56:10","player":"30045","fleet":[{"location":"A28:54:51:31"},{"id":"fleet.aspx?fleet=2769325","name":"Fleet 1","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"285","location":"A28:54:51:31"}],"base":[{"name":"Home Planet","id":"base.aspx?base=139373","owner":{"name":"Delta","id":"profile.aspx?player=30045"},"econ":"39 / 39"}],"astro":[{"type":"Moon","terrain":"Rocky","location":"A28:54:51:31"}]}
[Thu Oct 23 15:56:00 2014] [debug] 200 OK (0.160166s, 6.244/s).
[Thu Oct 23 16:12:43 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:12:43 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:12:43 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:12:43 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:12:22","player":"30045","fleet":[{},{"id":"fleet.aspx?fleet=2608508","name":"Fleet 12","player":{"name":"[COP]  wanjiayu","id":"profile.aspx?player=17376"},"size":"2500"},{"id":"fleet.aspx?fleet=2790596","name":"Fleet 4","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"20"}],"base":[{"owner":{"id":"profile.aspx?player=17367","name":"Draeker"},"economy":"53","ownerIncome":71.69811320754717,"Command Centers":"1","defenses":{"Laser Turrets":"0 / 10","Missile Turrets":"0 / 10","Plasma Turrets":"0 / 5","Ion Turrets":"0 / 5"}}],"astro":[]}
[Thu Oct 23 16:12:43 2014] [debug] 200 OK (0.002260s, 442.478/s).
[Thu Oct 23 16:15:04 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:15:04 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:15:04 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:15:04 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:15:15","player":"30045","fleet":[{},{"id":"fleet.aspx?fleet=2608508","name":"Fleet 12","player":{"name":"[COP]  wanjiayu","id":"profile.aspx?player=17376"},"size":"2500"},{"id":"fleet.aspx?fleet=2790596","name":"Fleet 4","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"20"}],"base":[{"owner":{"id":"profile.aspx?player=17367","name":"Draeker"},"economy":"53","ownerIncome":71.69811320754717,"Command Centers":"1","defenses":{"Laser Turrets":"0 / 10","Missile Turrets":"0 / 10","Plasma Turrets":"0 / 5","Ion Turrets":"0 / 5"}}],"astro":[]}
[Thu Oct 23 16:15:04 2014] [debug] 200 OK (0.001826s, 547.645/s).
[Thu Oct 23 16:15:57 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:15:57 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:15:57 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:15:57 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:16:08","player":"30045","fleet":[{},{"id":"fleet.aspx?fleet=2608508","name":"Fleet 12","player":{"name":"[COP]  wanjiayu","id":"profile.aspx?player=17376"},"size":"2500"},{"id":"fleet.aspx?fleet=2790596","name":"Fleet 4","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"20"}],"base":[{"owner":{"id":"profile.aspx?player=17367","name":"Draeker"},"economy":"53","ownerIncome":71.69811320754717,"Command Centers":"1","defenses":{"Laser Turrets":"0 / 10","Missile Turrets":"0 / 10","Plasma Turrets":"0 / 5","Ion Turrets":"0 / 5"}}],"astro":[]}
[Thu Oct 23 16:15:57 2014] [debug] 200 OK (0.001976s, 506.073/s).
[Thu Oct 23 16:17:03 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:17:03 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:17:03 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:17:03 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:17:13","player":"30045","fleet":[{},{"id":"fleet.aspx?fleet=2608508","name":"Fleet 12","player":{"name":"[COP]  wanjiayu","id":"profile.aspx?player=17376"},"size":"2500"},{"id":"fleet.aspx?fleet=2790596","name":"Fleet 4","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"20"}],"base":[{"owner":{"id":"profile.aspx?player=17367","name":"Draeker"},"economy":"53","ownerIncome":71.69811320754717,"Command Centers":"1","defenses":{"Laser Turrets":"0 / 10","Missile Turrets":"0 / 10","Plasma Turrets":"0 / 5","Ion Turrets":"0 / 5"}}],"astro":[]}
[Thu Oct 23 16:17:03 2014] [debug] 200 OK (0.001536s, 651.042/s).
[Thu Oct 23 16:17:31 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:17:31 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:17:31 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:17:31 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:17:42","player":"30045","fleet":[{},{"id":"fleet.aspx?fleet=2608508","name":"Fleet 12","player":{"name":"[COP]  wanjiayu","id":"profile.aspx?player=17376"},"size":"2500"},{"id":"fleet.aspx?fleet=2790596","name":"Fleet 4","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"20"}],"base":[{"owner":{"id":"profile.aspx?player=17367","name":"Draeker"},"economy":"53","ownerIncome":71.69811320754717,"Command Centers":"1","defenses":{"Laser Turrets":"0 / 10","Missile Turrets":"0 / 10","Plasma Turrets":"0 / 5","Ion Turrets":"0 / 5"}}],"astro":[]}
[Thu Oct 23 16:17:31 2014] [debug] 200 OK (0.001732s, 577.367/s).
[Thu Oct 23 16:18:12 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:18:12 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:18:12 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:18:12 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:18:23","player":"30045","fleet":[{},{"id":"fleet.aspx?fleet=2608508","name":"Fleet 12","player":{"name":"[COP]  wanjiayu","id":"profile.aspx?player=17376"},"size":"2500"},{"id":"fleet.aspx?fleet=2790596","name":"Fleet 4","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"20"}],"base":[{"owner":{"id":"profile.aspx?player=17367","name":"Draeker"},"economy":"53","ownerIncome":71.69811320754717,"Command Centers":"1","defenses":{"Laser Turrets":"0 / 10","Missile Turrets":"0 / 10","Plasma Turrets":"0 / 5","Ion Turrets":"0 / 5"}}],"astro":[]}
[Thu Oct 23 16:18:12 2014] [debug] 200 OK (0.002863s, 349.284/s).
[Thu Oct 23 16:19:49 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:19:49 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:19:49 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:19:49 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:19:59","player":"30045","fleet":[{},{"id":"fleet.aspx?fleet=2608508","name":"Fleet 12","player":{"name":"[COP]  wanjiayu","id":"profile.aspx?player=17376"},"size":"2500"},{"id":"fleet.aspx?fleet=2790596","name":"Fleet 4","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"20"}],"base":[{"owner":{"id":"profile.aspx?player=17367","name":"Draeker"},"economy":"53","ownerIncome":71.69811320754717,"Command Centers":"1","defenses":{"Laser Turrets":"0 / 10","Missile Turrets":"0 / 10","Plasma Turrets":"0 / 5","Ion Turrets":"0 / 5"}}],"astro":[]}
[Thu Oct 23 16:19:49 2014] [debug] 200 OK (0.001836s, 544.662/s).
[Thu Oct 23 16:20:12 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:20:12 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:20:12 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:20:12 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:20:23","player":"30045","fleet":[{},{"id":"fleet.aspx?fleet=2608508","name":"Fleet 12","player":{"name":"[COP]  wanjiayu","id":"profile.aspx?player=17376"},"size":"2500"},{"id":"fleet.aspx?fleet=2790596","name":"Fleet 4","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"20"}],"base":[{"owner":{"id":"profile.aspx?player=17367","name":"Draeker"},"economy":"53","ownerIncome":71.69811320754717,"Command Centers":"1","defenses":{"Laser Turrets":"0 / 10","Missile Turrets":"0 / 10","Plasma Turrets":"0 / 5","Ion Turrets":"0 / 5"}}],"astro":[]}
[Thu Oct 23 16:20:12 2014] [debug] 200 OK (0.002359s, 423.908/s).
[Thu Oct 23 16:26:55 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:26:55 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:26:55 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:26:55 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:26:42","player":"30045","fleet":[{"location":"A28:63:29:21"},{"id":"fleet.aspx?fleet=2608508","name":"Fleet 12","player":{"name":"[COP]  wanjiayu","id":"profile.aspx?player=17376"},"size":"2500","location":"A28:63:29:21"},{"id":"fleet.aspx?fleet=2790596","name":"Fleet 4","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"20","location":"A28:63:29:21"}],"base":[{"name":"Ergo 2","id":"base.aspx?base=98380","owner":{"name":"Draeker","id":"profile.aspx?player=17367"},"occupier":{"name":"[COP]  wanjiayu","id":"profile.aspx?player=17376"},"econ":"38 / 53"}],"astro":[{"type":"Moon","terrain":"Craters","location":"A28:63:29:21"}]}
[Thu Oct 23 16:26:55 2014] [debug] 200 OK (0.002597s, 385.060/s).
[Thu Oct 23 16:26:55 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:26:55 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:26:55 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:26:55 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:27:06","player":"30045","fleet":[{},{"id":"fleet.aspx?fleet=2608508","name":"Fleet 12","player":{"name":"[COP]  wanjiayu","id":"profile.aspx?player=17376"},"size":"2500"},{"id":"fleet.aspx?fleet=2790596","name":"Fleet 4","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"20"}],"base":[{"name":{},"location":{},"tradeRoutes":{},"owner":{"id":"profile.aspx?player=17367","name":"Draeker"},"economy":"53","ownerIncome":71.69811320754717,"Command Centers":"1","defenses":{"Laser Turrets":"0 / 10","Missile Turrets":"0 / 10","Plasma Turrets":"0 / 5","Ion Turrets":"0 / 5"}}],"astro":[]}
[Thu Oct 23 16:26:55 2014] [debug] 200 OK (0.001757s, 569.152/s).
[Thu Oct 23 16:28:13 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:28:13 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:28:13 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:28:13 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:28:14","player":"30045","fleet":[{},{"id":"fleet.aspx?fleet=2608508","name":"Fleet 12","player":{"name":"[COP]  wanjiayu","id":"profile.aspx?player=17376"},"size":"2500"},{"id":"fleet.aspx?fleet=2790596","name":"Fleet 4","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"20"}],"base":[{"name":{},"location":{},"tradeRoutes":{},"owner":{"id":"profile.aspx?player=17367","name":"Draeker"},"economy":"53","ownerIncome":71.69811320754717,"Command Centers":"1","defenses":{"Laser Turrets":"0 / 10","Missile Turrets":"0 / 10","Plasma Turrets":"0 / 5","Ion Turrets":"0 / 5"}}],"astro":[]}
[Thu Oct 23 16:28:13 2014] [debug] 200 OK (0.001681s, 594.884/s).
[Thu Oct 23 16:29:48 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:29:48 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:29:48 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:29:48 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:29:59","player":"30045","fleet":[{},{"id":"fleet.aspx?fleet=2608508","name":"Fleet 12","player":{"name":"[COP]  wanjiayu","id":"profile.aspx?player=17376"},"size":"2500"},{"id":"fleet.aspx?fleet=2790596","name":"Fleet 4","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"20"}],"base":[{"name":{},"location":{},"tradeRoutes":{},"owner":{"id":"profile.aspx?player=17367","name":"Draeker"},"economy":"53","ownerIncome":71.69811320754717,"Command Centers":"1","defenses":{"Laser Turrets":"0 / 10","Missile Turrets":"0 / 10","Plasma Turrets":"0 / 5","Ion Turrets":"0 / 5"}}],"astro":[]}
[Thu Oct 23 16:29:48 2014] [debug] 200 OK (0.001763s, 567.215/s).
[Thu Oct 23 16:33:29 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:33:29 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:33:29 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:33:29 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:33:19","player":"30045","fleet":[{"location":"A28:54:51:31"},{"id":"fleet.aspx?fleet=2769325","name":"Fleet 1","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"285","location":"A28:54:51:31"}],"base":[{"name":"Home Planet","id":"base.aspx?base=139373","owner":{"name":"Delta","id":"profile.aspx?player=30045"},"economy":"39 / 39"}],"astro":[{"type":"Moon","terrain":"Rocky","location":"A28:54:51:31"}]}
[Thu Oct 23 16:33:29 2014] [debug] 200 OK (0.001576s, 634.518/s).
[Thu Oct 23 16:33:59 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:33:59 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:33:59 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:33:59 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:34:10","player":"30045","fleet":[{"location":"A28:54:51:31"},{"id":"fleet.aspx?fleet=2769325","name":"Fleet 1","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"285","location":"A28:54:51:31"}],"base":[{"name":"Home Planet","id":"base.aspx?base=139373","owner":{"name":"Delta","id":"profile.aspx?player=30045"},"economy":"39 / 39"}],"astro":[{"type":"Moon","terrain":"Rocky","location":"A28:54:51:31"}]}
[Thu Oct 23 16:33:59 2014] [debug] 200 OK (0.002916s, 342.936/s).
[Thu Oct 23 16:34:39 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Thu Oct 23 16:35:25 2014] [debug] Your secret passphrase needs to be changed!!!
[Thu Oct 23 16:35:25 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:35:25 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:35:25 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:35:25 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:35:36","player":"30045","fleet":[{"location":"A28:54:51:31"},{"id":"fleet.aspx?fleet=2769325","name":"Fleet 1","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"285","location":"A28:54:51:31"}],"base":[{"name":"Home Planet","id":"base.aspx?base=139373","owner":{"name":"Delta","id":"profile.aspx?player=30045"},"economy":"39 / 39"}],"astro":[{"type":"Moon","terrain":"Rocky","location":"A28:54:51:31"}]}
[Thu Oct 23 16:35:25 2014] [debug] 200 OK (0.109982s, 9.092/s).
[Thu Oct 23 16:36:03 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:36:03 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:36:03 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:36:03 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:36:14","player":"30045","fleet":[{"location":"A28:54:51:31"},{"id":"fleet.aspx?fleet=2769325","name":"Fleet 1","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"285","location":"A28:54:51:31"}],"base":[{"name":"Home Planet","id":"base.aspx?base=139373","owner":{"name":"Delta","id":"profile.aspx?player=30045"},"economy":"39 / 39"}],"astro":[{"type":"Moon","terrain":"Rocky","location":"A28:54:51:31"}]}
[Thu Oct 23 16:36:03 2014] [debug] 200 OK (0.001745s, 573.066/s).
[Thu Oct 23 16:36:49 2014] [debug] Reading configuration file "/home/nate/src/git/AstroEmpires/ae_web/ae_web.conf".
[Thu Oct 23 16:36:52 2014] [debug] Your secret passphrase needs to be changed!!!
[Thu Oct 23 16:36:52 2014] [debug] $VAR1 = [];

[Thu Oct 23 16:36:52 2014] [debug] POST "/ae/gmDrop".
[Thu Oct 23 16:36:53 2014] [debug] Routing to controller "AeWeb::Controller::Main" and action "dumpPostData".
[Thu Oct 23 16:36:53 2014] [debug] {"server":"andromeda","time":"2014/10/23 21:37:03","player":"30045","fleet":[{"location":"A28:54:51:31"},{"id":"fleet.aspx?fleet=2769325","name":"Fleet 1","player":{"name":"Delta","id":"profile.aspx?player=30045"},"size":"285","location":"A28:54:51:31"}],"base":[{"name":"Home Planet","id":"base.aspx?base=139373","owner":{"name":"Delta","id":"profile.aspx?player=30045"},"economy":"39 / 39"}],"astro":[{"type":"Moon","terrain":"Rocky","location":"A28:54:51:31"}]}
[Thu Oct 23 16:36:53 2014] [debug] rendering json response
[Thu Oct 23 16:36:53 2014] [debug] 200 OK (0.105212s, 9.505/s).
